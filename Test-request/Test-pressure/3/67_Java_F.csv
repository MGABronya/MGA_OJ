,index,languageName,submissionId,submitTime,userName,statusMessage,code
0,F,Java,60975047,2023-02-24 20:54:12,小怂很怂,答案错误,"
import java.io.*;

/**
 * @ClassName 翼伯父作威
 * @Description TODO
 * @Author 小怂很怂
 * @Date 2023/2/24 20:48
 * @Version 1.0
 **/
public class Main{
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StreamTokenizer st = new StreamTokenizer(br);
    static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws Exception {
        int T=nextInt();
        for (int i=0;i<T;i++){
            int n=nextInt();
            int m=nextInt();
            int count=1000000000;
            if (n==0||m==0||n==m){
                pw.println(count*2-1);
            }else if (n==2&&m==1||n==1&&m==2){
                pw.println(count*2-2);
            }else if(n==2||m==2||n==1||m==1){
                pw.println(count*2-3);
            }else if (Math.abs(n-m)==1){
                pw.println(count*2-3);
            }else{
                pw.println(count*2-((Math.min(n,m)+1)/2+2));
            }
        }
        pw.flush();//必须加
    }

    public static int nextInt() throws Exception {//int型
        st.nextToken();
        return (int) st.nval;
    }

    public static long nextLong() throws Exception {//long型
        st.nextToken();
        return (long) st.nval;
    }
}
"
1,F,Java,60976539,2023-02-24 21:30:07,小怂很怂,答案错误,"import java.io.*;

/**

 * @ClassName 翼伯父作威

 * @Description TODO

 * @Author 小怂很怂

 * @Date 2023/2/24 20:48

 * @Version 1.0

 **/

public class Main{

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    static StreamTokenizer st = new StreamTokenizer(br);

    static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws Exception {

        int T=nextInt();

        for (int i=0;i<T;i++){

            int n=nextInt();

            int m=nextInt();

            int count=1000000000;

            if (n==0||m==0||n==m){

                pw.println(count*2-1);

            }else if (n==2&&m==1||n==1&&m==2){

                pw.println(count*2-2);

            }else if(n==2||m==2||n==1||m==1){

                pw.println(count*2-3);

            }else if (Math.abs(n-m)==1){

                pw.println(count*2-3);

            }else{

                pw.println(count*2-((Math.min(n,m)+1)/2+2));

            }

        }

        pw.flush();//必须加

    }

    public static int nextInt() throws Exception {//int型

        st.nextToken();

        return (int) st.nval;

    }

    public static long nextLong() throws Exception {//long型

        st.nextToken();

        return (long) st.nval;

    }

}"
