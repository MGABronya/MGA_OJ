,index,languageName,submissionId,submitTime,userName,statusMessage,code
0,D,Java,61160725,2023-03-10 19:33:35,小小小巨人,答案正确,"import java.io.*;
import java.util.*;
import java.math.*;
import java.util.Map.*;
import java.util.*;
/**
 * 
 * @author TCchen
 */
public class Main {
	public static void main(String[]args) throws IOException {
		new Main().run();
	}
//	File input=new File(""D:\\test\\input.txt"");
//	File output=new File(""D:\\test\\output.txt"");
	void run() throws IOException{
//		new Solve().setIO(input, output).run();
		new Solve().setIO(System.in,System.out).run();
	}
	class Solve extends IOTask{
		int n,a,b,m,w,k,i,j,l,r,v,x,y;
		double exp=0.000001;
		double num;
		int[]ans=new int[400];
		int[]nxt= {100,-100,10,-10,1,-1};
		void solve() throws IOException{
			x=0;
			for(i=0;i<4;i++) {
				x+=ans[in.in()];
			}
			out.println(x);
		}
		void init() {
			Arrays.fill(ans, 500);
			ans[10]=0;
			ans[300]=1;
			Queue<Integer>q=new LinkedList<Integer>();
			q.add(10);
			q.add(300);
			while(!q.isEmpty()) {
				x=q.poll();
				v=ans[x]+1;
				for(int i=0;i<nxt.length;i++) {
					y=x+nxt[i];
					if(y>10&&y<300&&ans[y]>v) {
						ans[y]=v;
						q.add(y);
					}
				}
			}
		}
		int te=1;
		void run()throws IOException{
			init();
			int t=1;
			t=in.in();
			for(te=1;te<=t;te++) {
				solve();
//				out.flush();
			}
			out.close();
		}
//		long timeMillis;
//		void st() {
//			timeMillis=System.currentTimeMillis();
//		}
//		void ed() {
//			System.out.println((System.currentTimeMillis()-timeMillis)+""ms"");
//		}
	}
	class QIn{
		StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
		int in() throws IOException {
			st.nextToken();
			return (int)st.nval;
		}
		long inl() throws IOException {
			st.nextToken();
			return (long)st.nval;
		}
		double ind()throws IOException  {
			st.nextToken();
			return st.nval;
		}
		String ins() throws IOException {
			st.nextToken();
			return st.sval;
		}
	}
	class In{
		private StringTokenizer in=new StringTokenizer("""");
		private InputStream is;
		private BufferedReader bf;
		public In(File file) throws IOException {
			is=new FileInputStream(file);
			init();
		}
		public In(InputStream is) throws IOException{
			this.is=is;
			init();
		}
		private void init() throws IOException {
			bf=new BufferedReader(new InputStreamReader(is));
		}
		boolean hasNext() throws IOException {
			return in.hasMoreTokens()||bf.ready();
		}
		String ins() throws IOException {
			while(!in.hasMoreTokens()) {
				in=new StringTokenizer(bf.readLine());
			}
			return in.nextToken();
		}
		int in() throws IOException {
			return Integer.parseInt(ins());
		}
		long inl() throws IOException {
			return Long.parseLong(ins());
		}
		double ind() throws IOException {
			return Double.parseDouble(ins());
		}
		String line() throws IOException {
			return bf.readLine();
		}
	}
	class Out{
		PrintWriter out;
		private OutputStream os;
		private void init() {
			out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
		}
		public Out(File file) throws IOException {
			os=new FileOutputStream(file);
			init();
		}
		public Out(OutputStream os) throws IOException{
			this.os=os;
			init();
		}
	}
	abstract class IOTask{
		In in;
		PrintWriter out;
		public IOTask setIO(File in,File out) throws IOException{
			this.in=new In(in);
			this.out=new Out(out).out;
			return this;
		}
		public IOTask setIO(File in,OutputStream out) throws IOException{
			this.in=new In(in);
			this.out=new Out(out).out;
			return this;
		}
		public IOTask setIO(InputStream in,OutputStream out) throws IOException{
			this.in=new In(in);
			this.out=new Out(out).out;
			return this;
		}
		public IOTask setIO(InputStream in,File out) throws IOException{
			this.in=new In(in);
			this.out=new Out(out).out;
			return this;
		}
		void run()throws IOException{}
	}
}"
1,D,Java,61161027,2023-03-10 19:36:44,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

      //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                System.out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                q.offer(new good(head.x-1, head.step+1));
                q.offer(new good(head.x+1, head.step+1));
                q.offer(new good(head.x-10, head.step+1));
                q.offer(new good(head.x+10, head.step+1));
                q.offer(new good(head.x-100, head.step+1));
                q.offer(new good(head.x+100, head.step+1));
                q.offer(new good(10, head.step+1));
                q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
2,D,Java,61161168,2023-03-10 19:38:04,shitter,运行超时,"import java.io.*;
import java.util.HashMap;
import java.util.HashSet;

public class Main {

    static InputReader in;
    static OutputWriter out;

    public static void main(String[] args) throws Exception {
        in=new InputReader(System.in);
        out=new OutputWriter(System.out);

        int T=in.nextInt();
        while(T-->0) {
            int[] a=new int[5];
            for(int i=1;i<=4;i++)
                a[i]=in.nextInt();

            int ans=0;
            for(int i=1;i<=4;i++)
                ans+=Math.min(a[i]-10,bfs(10,a[i],a[i]-10));

            out.println(ans);
        }

        out.flush();
    }

    private static int bfs(int a,int b,int mx) {
        int res=0;
        HashSet<Integer> set=new HashSet<>();
        HashSet<Integer> vis=new HashSet<>();
        set.add(a);
        while(!set.contains(b) && res<mx) {
            for(int k:(HashSet<Integer>)set.clone()) {
                set.remove(k);
                vis.add(k);

                int k1=Math.min(k+1,300);
                if(!vis.contains(k1))
                    set.add(k1);

                int k2=Math.max(k-1,10);
                if(!vis.contains(k2))
                    set.add(k2);

                int k3=Math.min(k+10,300);
                if(!vis.contains(k3))
                    set.add(k3);

                int k4=Math.max(k-10,10);
                if(!vis.contains(k4))
                    set.add(k4);

                int k5=300;
                if(!vis.contains(k5))
                    set.add(k5);

                int k6=10;
                if(!vis.contains(k6))
                    set.add(k6);

                int k7=Math.min(k+100,300);
                if(!vis.contains(k7))
                    set.add(k7);

                int k8=Math.max(k-100,10);
                if(!vis.contains(k8))
                    set.add(k8);
            }
            res++;
        }
        return Math.min(res,mx);
    }

    static class InputReader  {
        private final BufferedReader br;

        public InputReader(InputStream stream) {
            br = new BufferedReader(new InputStreamReader(stream));
        }

        public int nextInt() throws IOException {
            int c = br.read();
            while (c <= 32) {
                c = br.read();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = br.read();
            }
            int x = 0;
            while (c > 32) {
                x = x * 10 + c - '0';
                c = br.read();
            }
            return negative (?) -x : x;
        }

        public long nextLong() throws IOException {
            int c = br.read();
            while (c <= 32) {
                c = br.read();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = br.read();
            }
            long x = 0;
            while (c > 32) {
                x = x * 10 + c - '0';
                c = br.read();
            }
            return negative (?) -x : x;
        }

        public String next() throws IOException {
            int c = br.read();
            while (c <= 32) {
                c = br.read();
            }
            StringBuilder sb = new StringBuilder();
            while (c > 32) {
                sb.append((char) c);
                c = br.read();
            }
            return sb.toString();
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }
    }

    static class OutputWriter {

        private final BufferedWriter writer;

        public OutputWriter(OutputStream out) {
            writer=new BufferedWriter(new OutputStreamWriter(out));
        }

        public void print(String str) {
            try {
                writer.write(str);
            }
            catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void print(Object obj) {
            print(String.valueOf(obj));
        }

        public void println(String str) {
            print(str+""\n"");
        }

        public void println() {
            print('\n');
        }

        public void println(Object obj) {
            println(String.valueOf(obj));
        }

        public void flush() {
            try {
                writer.flush();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

}"
3,D,Java,61161234,2023-03-10 19:38:45,KY.cj,运行超时,"import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    static Queue<Integer>queue=new LinkedList<>();
    static int r[]=new int[301];
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int T= sc.nextInt();
        while (T-->0){
            int a= sc.nextInt();
            int b= sc.nextInt();
            int c= sc.nextInt();
            int d= sc.nextInt();
            int cs=0;
            if(a!=10){
                queue.clear();
                Arrays.fill(r,0);
                queue.offer(10);
                r[10]=1;
                while (!queue.isEmpty()){
                    int z=queue.poll();
                    if(z+1<=300){
                        if(r[z+1]==0){
                            queue.offer(z+1);
                            r[z+1]=r[z]+1;
                            if(z+1==a)break;
                        }
                    }
                    if(z-1>=0){
                        if(r[z-1]==0){
                            queue.offer(z-1);
                            r[z-1]=r[z]+1;
                            if(z-1==a)break;
                        }
                    }
                    if(z+10<=300){
                        if(r[z+10]==0){
                            queue.offer(z+10);
                            r[z+10]=r[z]+1;
                            if(z+10==a)break;
                        }
                    }
                    if(z-10>=0){
                        if(r[z-10]==0){
                            queue.offer(z-10);
                            r[z-10]=r[z]+1;
                            if(z-10==a)break;
                        }
                    }
                    if(z+100<=300){
                        if(r[z+100]==0){
                            queue.offer(z+100);
                            r[z+100]=r[z]+1;
                            if(z+100==a)break;
                        }
                    }
                    if(z-100>=0){
                        if(r[z-100]==0){
                            queue.offer(z-100);
                            r[z-100]=r[z]+1;
                            if(z-100==a)break;
                        }
                    }
                    if(r[300]==0){
                        queue.offer(300);
                        r[300]=r[z]+1;
                        if(300==a)break;
                    }
                }
                cs+=r[a]-1;
            }
            if(b!=10){
                queue.clear();
                Arrays.fill(r,0);
                queue.offer(10);
                r[10]=1;
                while (!queue.isEmpty()){
                    int z=queue.poll();
                    if(z+1<=300){
                        if(r[z+1]==0){
                            queue.offer(z+1);
                            r[z+1]=r[z]+1;
                            if(z+1==b)break;
                        }
                    }
                    if(z-1>=0){
                        if(r[z-1]==0){
                            queue.offer(z-1);
                            r[z-1]=r[z]+1;
                            if(z-1==b)break;
                        }
                    }
                    if(z+10<=300){
                        if(r[z+10]==0){
                            queue.offer(z+10);
                            r[z+10]=r[z]+1;
                            if(z+10==b)break;
                        }
                    }
                    if(z-10>=0){
                        if(r[z-10]==0){
                            queue.offer(z-10);
                            r[z-10]=r[z]+1;
                            if(z-10==b)break;
                        }
                    }
                    if(z+100<=300){
                        if(r[z+100]==0){
                            queue.offer(z+100);
                            r[z+100]=r[z]+1;
                            if(z+100==b)break;
                        }
                    }
                    if(z-100>=0){
                        if(r[z-100]==0){
                            queue.offer(z-100);
                            r[z-100]=r[z]+1;
                            if(z-100==b)break;
                        }
                    }
                    if(r[300]==0){
                        queue.offer(300);
                        r[300]=r[z]+1;
                        if(300==b)break;
                    }
                }
                cs+=r[b]-1;
            }
            if(c!=10){
                queue.clear();
                Arrays.fill(r,0);
                queue.offer(10);
                r[10]=1;
                while (!queue.isEmpty()){
                    int z=queue.poll();
                    if(z+1<=300){
                        if(r[z+1]==0){
                            queue.offer(z+1);
                            r[z+1]=r[z]+1;
                            if(z+1==c)break;
                        }
                    }
                    if(z-1>=0){
                        if(r[z-1]==0){
                            queue.offer(z-1);
                            r[z-1]=r[z]+1;
                            if(z-1==c)break;
                        }
                    }
                    if(z+10<=300){
                        if(r[z+10]==0){
                            queue.offer(z+10);
                            r[z+10]=r[z]+1;
                            if(z+10==c)break;
                        }
                    }
                    if(z-10>=0){
                        if(r[z-10]==0){
                            queue.offer(z-10);
                            r[z-10]=r[z]+1;
                            if(z-10==c)break;
                        }
                    }
                    if(z+100<=300){
                        if(r[z+100]==0){
                            queue.offer(z+100);
                            r[z+100]=r[z]+1;
                            if(z+100==c)break;
                        }
                    }
                    if(z-100>=0){
                        if(r[z-100]==0){
                            queue.offer(z-100);
                            r[z-100]=r[z]+1;
                            if(z-100==c)break;
                        }
                    }
                    if(r[300]==0){
                        queue.offer(300);
                        r[300]=r[z]+1;
                        if(300==c)break;
                    }
                }
                cs+=r[c]-1;
            }
            if(d!=10){
                queue.clear();
                Arrays.fill(r,0);
                queue.offer(10);
                r[10]=1;
                while (!queue.isEmpty()){
                    int z=queue.poll();
                    if(z+1<=300){
                        if(r[z+1]==0){
                            queue.offer(z+1);
                            r[z+1]=r[z]+1;
                            if(z+1==d)break;
                        }
                    }
                    if(z-1>=0){
                        if(r[z-1]==0){
                            queue.offer(z-1);
                            r[z-1]=r[z]+1;
                            if(z-1==d)break;
                        }
                    }
                    if(z+10<=300){
                        if(r[z+10]==0){
                            queue.offer(z+10);
                            r[z+10]=r[z]+1;
                            if(z+10==d)break;
                        }
                    }
                    if(z-10>=0){
                        if(r[z-10]==0){
                            queue.offer(z-10);
                            r[z-10]=r[z]+1;
                            if(z-10==d)break;
                        }
                    }
                    if(z+100<=300){
                        if(r[z+100]==0){
                            queue.offer(z+100);
                            r[z+100]=r[z]+1;
                            if(z+100==d)break;
                        }
                    }
                    if(z-100>=0){
                        if(r[z-100]==0){
                            queue.offer(z-100);
                            r[z-100]=r[z]+1;
                            if(z-100==d)break;
                        }
                    }
                    if(r[300]==0){
                        queue.offer(300);
                        r[300]=r[z]+1;
                        if(300==d)break;
                    }
                }
                cs+=r[d]-1;
            }
            System.out.println(cs);
        }

    }
}
"
4,D,Java,61161456,2023-03-10 19:41:04,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

      //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                System.out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target) q.offer(new good(10, head.step+1));
                if (head.x<target) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
5,D,Java,61161471,2023-03-10 19:41:10,shitter,答案正确,"import java.io.*;
import java.util.HashMap;
import java.util.HashSet;

public class Main {

    static InputReader in;
    static OutputWriter out;

    public static void main(String[] args) throws Exception {
        in=new InputReader(System.in);
        out=new OutputWriter(System.out);

        int[] ans=new int[305];
        for(int i=10;i<=300;i++) {
            ans[i]=Math.min(i-10,bfs(10,i,i-10));
        }

        int T=in.nextInt();
        while(T-->0) {
            int[] a=new int[5];
            for(int i=1;i<=4;i++)
                a[i]=in.nextInt();

            int res=0;
            for(int i=1;i<=4;i++)
                res+=ans[a[i]];

            out.println(res);
        }

        out.flush();
    }

    private static int bfs(int a,int b,int mx) {
        int res=0;
        HashSet<Integer> set=new HashSet<>();
        HashSet<Integer> vis=new HashSet<>();
        set.add(a);
        while(!set.contains(b) && res<mx) {
            for(int k:(HashSet<Integer>)set.clone()) {
                set.remove(k);
                vis.add(k);

                int k1=Math.min(k+1,300);
                if(!vis.contains(k1))
                    set.add(k1);

                int k2=Math.max(k-1,10);
                if(!vis.contains(k2))
                    set.add(k2);

                int k3=Math.min(k+10,300);
                if(!vis.contains(k3))
                    set.add(k3);

                int k4=Math.max(k-10,10);
                if(!vis.contains(k4))
                    set.add(k4);

                int k5=300;
                if(!vis.contains(k5))
                    set.add(k5);

                int k6=10;
                if(!vis.contains(k6))
                    set.add(k6);

                int k7=Math.min(k+100,300);
                if(!vis.contains(k7))
                    set.add(k7);

                int k8=Math.max(k-100,10);
                if(!vis.contains(k8))
                    set.add(k8);
            }
            res++;
        }
        return Math.min(res,mx);
    }

    static class InputReader  {
        private final BufferedReader br;

        public InputReader(InputStream stream) {
            br = new BufferedReader(new InputStreamReader(stream));
        }

        public int nextInt() throws IOException {
            int c = br.read();
            while (c <= 32) {
                c = br.read();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = br.read();
            }
            int x = 0;
            while (c > 32) {
                x = x * 10 + c - '0';
                c = br.read();
            }
            return negative (?) -x : x;
        }

        public long nextLong() throws IOException {
            int c = br.read();
            while (c <= 32) {
                c = br.read();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = br.read();
            }
            long x = 0;
            while (c > 32) {
                x = x * 10 + c - '0';
                c = br.read();
            }
            return negative (?) -x : x;
        }

        public String next() throws IOException {
            int c = br.read();
            while (c <= 32) {
                c = br.read();
            }
            StringBuilder sb = new StringBuilder();
            while (c > 32) {
                sb.append((char) c);
                c = br.read();
            }
            return sb.toString();
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }
    }

    static class OutputWriter {

        private final BufferedWriter writer;

        public OutputWriter(OutputStream out) {
            writer=new BufferedWriter(new OutputStreamWriter(out));
        }

        public void print(String str) {
            try {
                writer.write(str);
            }
            catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void print(Object obj) {
            print(String.valueOf(obj));
        }

        public void println(String str) {
            print(str+""\n"");
        }

        public void println() {
            print('\n');
        }

        public void println(Object obj) {
            println(String.valueOf(obj));
        }

        public void flush() {
            try {
                writer.flush();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

}"
6,D,Java,61161679,2023-03-10 19:43:28,KY.cj,答案正确,"import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    static Queue<Integer>queue=new LinkedList<>();
    static int r[]={2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 11, 10, 9, 8, 7, 8, 9, 10, 11, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 11, 10, 9, 8, 7, 8, 9, 10, 11, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2};
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int T= sc.nextInt();
        while (T-->0){
            int a= sc.nextInt();
            int b= sc.nextInt();
            int c= sc.nextInt();
            int d= sc.nextInt();

            System.out.println(r[a]+r[b]+r[c]+r[d]-4);
        }
    }
}
"
7,D,Java,61161778,2023-03-10 19:44:30,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

      //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                System.out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target&&head.x-target<10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target&&target-head.x<10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target&&head.x-target<100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target&&target-head.x<100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target&&head.x-target<300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target&&target-head.x<300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target) q.offer(new good(10, head.step+1));
                if (head.x<target) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
8,D,Java,61161812,2023-03-10 19:44:51,可爱抱抱呀😥,运行超时,"//Java快读快写模板，不定时更新优化内容
//@可爱抱抱呀
import java.util.*;
import java.io.*;
import java.math.*;
import java.text.*;
public class Main{
    public static void main(String args[]) throws IOException{
        Read sc=new Read();
        int t=sc.nextInt();
        for(int i=0;i<t;i++){
            int a=sc.nextInt();
            int b=sc.nextInt();
            int c=sc.nextInt();
            int d=sc.nextInt();
            sc.println(mm(10,a)+mm(10,b)+mm(10,c)+mm(10,d));
        }
        //sc.print(0);
        sc.bw.flush();
        sc.bw.close();
    }
    static int mm(int a,int b){
        int m[]=new int[]{1,-1,10,-10,100,-100};
        int ans[]=new int[305];
        Arrays.fill(ans,2000000000);
        Queue<int[]> q=new PriorityQueue<>((aa,bb)->aa[1]-bb[1]);
        q.add(new int[]{a,0});
        ans[a]=0;
        if(a!=300){
            q.add(new int[]{300,1});
            ans[300]=1;
        }
        if(a!=10){
            q.add(new int[]{10,1});
            ans[10]=1;
        }
        while(q.size()>0){
            int aa[]=q.poll();
            if(ans[aa[0]]<aa[1]){
                continue;
            }
            for(int w:m){
                int d=aa[0]+w;
                if(d>=10&&d<=300&&ans[d]>aa[1]+1){
                    q.add(new int[]{d,aa[1]+1});
                    ans[d]=aa[1]+1;
                }
            }
        }
        return ans[b];
    }
}
//记住看数字范围，需要开long吗，需要用BigInteger吗，需要手动处理字符串吗，复杂度数量级控制在1e7或者以下了吗
//开数组的数据范围最高不能超过1e7，数据范围再大就要用哈希表离散化了
//基本数据类型不能自定义sort排序，二维数组就可以了，顺序排序的时候是小减大，注意返回值应该是int
class Read{
    BufferedReader bf;
    StringTokenizer st;
    BufferedWriter bw;
    public Read(){
        bf=new BufferedReader(new InputStreamReader(System.in));
        st=new StringTokenizer("""");
        bw=new BufferedWriter(new OutputStreamWriter(System.out));
        //什么时候才能持续稳定ak力扣、AcWing呢？
        //什么时候才能ak cf的div2，div1呢？才能打div2不计rating呢？
        //什么时候才能ak  abc  不计rating呢？
        //什么时候才能ak 牛客练习赛不计rating呢(?)
    }
    public String nextLine() throws IOException{
        return bf.readLine();
    }
    public String next() throws IOException{
        while(!st.hasMoreTokens()){
            st=new StringTokenizer(bf.readLine());
        }
        return st.nextToken();
    }
    public char nextChar() throws IOException{
        //确定下一个token只有一个字符的时候再用
        return next().charAt(0);
    }
    public int nextInt() throws IOException{
        return Integer.parseInt(next());
    }
    public long nextLong() throws IOException{
        return Long.parseLong(next());
    }
    public double nextDouble() throws IOException{
        return Double.parseDouble(next());
    }
    public float nextFloat() throws IOException{
        return Float.parseFloat(next());
    }
    public byte nextByte() throws IOException{
        return Byte.parseByte(next());
    }
    public short nextShort() throws IOException{
        return Short.parseShort(next());
    }
    public BigInteger nextBigInteger() throws IOException{
        return new BigInteger(next());
    }
    public void println(int a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(int a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(String a) throws IOException{
        bw.write(a);
        bw.newLine();
        return;
    }
    public void print(String a) throws IOException{
        bw.write(a);
        return;
    }
    public void println(long a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(long a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(double a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(double a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void print(BigInteger a) throws IOException{
        bw.write(a.toString());
        return;
    }
    public void print(char a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(char a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
}"
9,D,Java,61161824,2023-03-10 19:44:57,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

      //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target&&head.x-target<10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target&&target-head.x<10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target&&head.x-target<100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target&&target-head.x<100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target&&head.x-target<300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target&&target-head.x<300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target) q.offer(new good(10, head.step+1));
                if (head.x<target) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
10,D,Java,61162016,2023-03-10 19:47:03,悠然小白,答案正确,"import java.util.*;
import java.io.*;

public class Main {

    public static void main(String[] args) {

        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

        Map<Integer, Integer> map = new HashMap<>();
        fun(map, 10, 0);

        int t = in.nextInt();
        while(t-- > 0) {

            int a = in.nextInt();
            int b = in.nextInt();
            int c = in.nextInt();
            int d = in.nextInt();


            out.println(map.get(a) + map.get(b) + map.get(c) + map.get(d));
        }


        out.flush();
    }

    private static void fun(Map<Integer, Integer> map, int now, int step) {

        if (!map.containsKey(now) || map.get(now) > step) {
            map.put(now, step);

            fun(map, 300, step + 1);
            fun(map, 10, step + 1);
            fun(map, Math.min(300, now + 100), step + 1);
            fun(map, Math.max(10, now - 100), step + 1);
            fun(map, Math.min(300, now + 10), step + 1);
            fun(map, Math.max(10, now - 10), step + 1);
            fun(map, Math.min(300, now + 1), step + 1);
            fun(map, Math.max(10, now - 1), step + 1);
        }

    }

}
"
11,D,Java,61162084,2023-03-10 19:47:49,可爱抱抱呀😥,运行超时,"//Java快读快写模板，不定时更新优化内容
//@可爱抱抱呀
import java.util.*;
import java.io.*;
import java.math.*;
import java.text.*;
public class Main{
    public static void main(String args[]) throws IOException{
        Read sc=new Read();
        int t=sc.nextInt();
        for(int i=0;i<t;i++){
            int a=sc.nextInt();
            int b=sc.nextInt();
            int c=sc.nextInt();
            int d=sc.nextInt();
            sc.println(mm(10,a)+mm(10,b)+mm(10,c)+mm(10,d));
        }
        //sc.print(0);
        sc.bw.flush();
        sc.bw.close();
    }
    static int mm(int a,int b){
        int m[]=new int[]{1,-1,10,-10,100,-100};
        int ans[]=new int[305];
        Arrays.fill(ans,2000000000);
        Queue<int[]> q=new PriorityQueue<>((aa,bb)->aa[1]-bb[1]);
        q.add(new int[]{a,0});
        ans[a]=0;
        if(a!=300){
            q.add(new int[]{300,1});
            ans[300]=1;
        }
        if(a!=10){
            q.add(new int[]{10,1});
            ans[10]=1;
        }
        int count=400;
        while(q.size()>0&&count>0){
            int aa[]=q.poll();
            if(ans[aa[0]]<aa[1]){
                continue;
            }
            count--;
            for(int w:m){
                int d=aa[0]+w;
                if(d>=10&&d<=300&&ans[d]>aa[1]+1){
                    q.add(new int[]{d,aa[1]+1});
                    ans[d]=aa[1]+1;
                }
            }
        }
        return ans[b];
    }
}
//记住看数字范围，需要开long吗，需要用BigInteger吗，需要手动处理字符串吗，复杂度数量级控制在1e7或者以下了吗
//开数组的数据范围最高不能超过1e7，数据范围再大就要用哈希表离散化了
//基本数据类型不能自定义sort排序，二维数组就可以了，顺序排序的时候是小减大，注意返回值应该是int
class Read{
    BufferedReader bf;
    StringTokenizer st;
    BufferedWriter bw;
    public Read(){
        bf=new BufferedReader(new InputStreamReader(System.in));
        st=new StringTokenizer("""");
        bw=new BufferedWriter(new OutputStreamWriter(System.out));
        //什么时候才能持续稳定ak力扣、AcWing呢？
        //什么时候才能ak cf的div2，div1呢？才能打div2不计rating呢？
        //什么时候才能ak  abc  不计rating呢？
        //什么时候才能ak 牛客练习赛不计rating呢(?)
    }
    public String nextLine() throws IOException{
        return bf.readLine();
    }
    public String next() throws IOException{
        while(!st.hasMoreTokens()){
            st=new StringTokenizer(bf.readLine());
        }
        return st.nextToken();
    }
    public char nextChar() throws IOException{
        //确定下一个token只有一个字符的时候再用
        return next().charAt(0);
    }
    public int nextInt() throws IOException{
        return Integer.parseInt(next());
    }
    public long nextLong() throws IOException{
        return Long.parseLong(next());
    }
    public double nextDouble() throws IOException{
        return Double.parseDouble(next());
    }
    public float nextFloat() throws IOException{
        return Float.parseFloat(next());
    }
    public byte nextByte() throws IOException{
        return Byte.parseByte(next());
    }
    public short nextShort() throws IOException{
        return Short.parseShort(next());
    }
    public BigInteger nextBigInteger() throws IOException{
        return new BigInteger(next());
    }
    public void println(int a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(int a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(String a) throws IOException{
        bw.write(a);
        bw.newLine();
        return;
    }
    public void print(String a) throws IOException{
        bw.write(a);
        return;
    }
    public void println(long a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(long a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(double a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(double a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void print(BigInteger a) throws IOException{
        bw.write(a.toString());
        return;
    }
    public void print(char a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(char a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
}"
12,D,Java,61162358,2023-03-10 19:50:30,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

      //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target&&head.x-target<10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target&&target-head.x<10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target&&head.x-target<100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target&&target-head.x<100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target&&head.x-target<300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target&&target-head.x<300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target&&head.x-target<=50) q.offer(new good(10, head.step+1));
                if (head.x<target&&target-head.x>=50) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
13,D,Java,61163092,2023-03-10 19:57:52,孔老大,运行超时,"import java.io.*;
import java.util.*;

public class Main {

    static Scanner sc;
    static PrintWriter pw;

    public static void main(String[] args) throws IOException {
        sc = new Scanner(System.in);
        pw = new PrintWriter(System.out);
        solve();
        pw.close();
    }

    static int[] step = {1, -1, 10, -10, 100, -100};

    public static int cal(int target) {

        Queue<int[]> q = new ArrayDeque<>();
        Set<Integer> vis = new HashSet<>();
        q.offer(new int[]{10, 0});
        q.offer(new int[]{300, 1});
        vis.add(10);
        vis.add(300);
        while (!q.isEmpty()) {

            int[] now = q.poll();
            if (now[0] == target) {
                return now[1];
            }
            for (int i = 0; i < step.length; i++) {
                int next = now[0] + step[i];
                if(!vis.contains(next) && next >= 10 && next <= 300){
                    q.offer(new int[]{next,now[1] + 1});
                    vis.add(next);
                }
            }
        }
        return 0;
    }

    public static void solve() throws IOException {
        int T = sc.nextInt();
        while (T-- > 0) {
            int[] arr = sc.nextIntArr(4);
            int s = 0;
            for (int i = 0; i < 4; i++) {
                s += cal(arr[i]);
            }
            pw.println(s);
        }
    }


    static class Scanner {
        BufferedReader br;
        StringTokenizer st;

        public Scanner(InputStream s) {
            br = new BufferedReader(new InputStreamReader(s));
        }

        public Scanner(FileReader f) {
            br = new BufferedReader(f);
        }

        public String next() throws IOException {
            while (st == null || !st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            return st.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }

        public int[] nextIntArr(int n) throws IOException {
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(next());
            }
            return arr;
        }

    }
}"
14,D,Java,61163205,2023-03-10 19:59:18,可爱抱抱呀😥,答案正确,"//Java快读快写模板，不定时更新优化内容
//@可爱抱抱呀
import java.util.*;
import java.io.*;
import java.math.*;
import java.text.*;
public class Main{
    public static void main(String args[]) throws IOException{
        Read sc=new Read();
        int t=sc.nextInt();
        for(int i=0;i<t;i++){
            int a=sc.nextInt();
            int b=sc.nextInt();
            int c=sc.nextInt();
            int d=sc.nextInt();
            int aa[]=mm();
            sc.println(aa[a]+aa[b]+aa[c]+aa[d]);
        }
        //sc.print(0);
        sc.bw.flush();
        sc.bw.close();
    }
    static int[] mm(){
        int m[]=new int[]{1,-1,10,-10,100,-100};
        Queue<Integer> q=new LinkedList<>();
        int ans[]=new int[305];
        Arrays.fill(ans,1000);
        ans[10]=0;
        ans[300]=1;
        q.add(10);
        q.add(300);
        while(q.size()>0){
            int aa=q.poll();
            for(int w:m){
                int d=aa+w;
                if(d>=10&&d<=300&&ans[d]==1000){
                    ans[d]=ans[aa]+1;
                    q.add(d);
                }
            }
        }
        return ans;
    }
}
//记住看数字范围，需要开long吗，需要用BigInteger吗，需要手动处理字符串吗，复杂度数量级控制在1e7或者以下了吗
//开数组的数据范围最高不能超过1e7，数据范围再大就要用哈希表离散化了
//基本数据类型不能自定义sort排序，二维数组就可以了，顺序排序的时候是小减大，注意返回值应该是int
class Read{
    BufferedReader bf;
    StringTokenizer st;
    BufferedWriter bw;
    public Read(){
        bf=new BufferedReader(new InputStreamReader(System.in));
        st=new StringTokenizer("""");
        bw=new BufferedWriter(new OutputStreamWriter(System.out));
        //什么时候才能持续稳定ak力扣、AcWing呢？
        //什么时候才能ak cf的div2，div1呢？才能打div2不计rating呢？
        //什么时候才能ak  abc  不计rating呢？
        //什么时候才能ak 牛客练习赛不计rating呢(?)
    }
    public String nextLine() throws IOException{
        return bf.readLine();
    }
    public String next() throws IOException{
        while(!st.hasMoreTokens()){
            st=new StringTokenizer(bf.readLine());
        }
        return st.nextToken();
    }
    public char nextChar() throws IOException{
        //确定下一个token只有一个字符的时候再用
        return next().charAt(0);
    }
    public int nextInt() throws IOException{
        return Integer.parseInt(next());
    }
    public long nextLong() throws IOException{
        return Long.parseLong(next());
    }
    public double nextDouble() throws IOException{
        return Double.parseDouble(next());
    }
    public float nextFloat() throws IOException{
        return Float.parseFloat(next());
    }
    public byte nextByte() throws IOException{
        return Byte.parseByte(next());
    }
    public short nextShort() throws IOException{
        return Short.parseShort(next());
    }
    public BigInteger nextBigInteger() throws IOException{
        return new BigInteger(next());
    }
    public void println(int a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(int a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(String a) throws IOException{
        bw.write(a);
        bw.newLine();
        return;
    }
    public void print(String a) throws IOException{
        bw.write(a);
        return;
    }
    public void println(long a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(long a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(double a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(double a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void print(BigInteger a) throws IOException{
        bw.write(a.toString());
        return;
    }
    public void print(char a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(char a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
}"
15,D,Java,61163360,2023-03-10 20:00:51,孔老大,答案正确,"import java.io.*;
import java.util.*;

public class Main {

    static Scanner sc;
    static PrintWriter pw;

    public static void main(String[] args) throws IOException {
        sc = new Scanner(System.in);
        pw = new PrintWriter(System.out);
        solve();
        pw.close();
    }

    static int[] step = {1, -1, 10, -10, 100, -100};

    public static int cal(int target) {

        Queue<int[]> q = new ArrayDeque<>();
        Set<Integer> vis = new HashSet<>();
        q.offer(new int[]{10, 0});
        q.offer(new int[]{300, 1});
        vis.add(10);
        vis.add(300);
        while (!q.isEmpty()) {

            int[] now = q.poll();
            if (now[0] == target) {
                return now[1];
            }
            for (int i = 0; i < step.length; i++) {
                int next = now[0] + step[i];
                if(!vis.contains(next) && next >= 10 && next <= 300){
                    q.offer(new int[]{next,now[1] + 1});
                    vis.add(next);
                }
            }
        }
        return 0;
    }

    public static void solve() throws IOException {
        int T = sc.nextInt();

        int[] p = new int[301];
        for (int i = 10; i <= 300; i++) {
            p[i] = cal(i);
        }

        while (T-- > 0) {
            int[] arr = sc.nextIntArr(4);
            int s = 0;
            for (int i = 0; i < 4; i++) {
                s += p[arr[i]];
            }
            pw.println(s);
        }
    }


    static class Scanner {
        BufferedReader br;
        StringTokenizer st;

        public Scanner(InputStream s) {
            br = new BufferedReader(new InputStreamReader(s));
        }

        public Scanner(FileReader f) {
            br = new BufferedReader(f);
        }

        public String next() throws IOException {
            while (st == null || !st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            return st.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }

        public int[] nextIntArr(int n) throws IOException {
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(next());
            }
            return arr;
        }

    }
}"
16,D,Java,61163416,2023-03-10 20:01:26,给个AC吧,运行超时,"import java.io.*;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static int[] dx = {0, 1, -1, 10, -10, 100, -100};
    static Set<Integer> set = new HashSet<>();

    public static void main(String[] args) throws IOException {
        int t = sc.nextInt();
        while (t-- > 0) {
            int[] a = new int[5];
            int ans = 0;
            for (int i = 1; i < a.length; i++) {
                a[i] = sc.nextInt();
            }
            for (int i = 1; i <= 4; i++) {
                int p = a[i];
                int n = 10;
                if (a[i] == n) continue;
                Queue<Node> q = new LinkedList<>();
                q.offer(new Node(n, 0));
                t:
                while (!q.isEmpty()) {
                    Node tmp = q.poll();
                    int x = tmp.x;
                    int step = tmp.step;
                    if (x == a[i]) {
                        ans += step;
                        break;
                    }
                    for (int j = 1; j <= 6; j++) {
                        int xx = x + dx[j];
                        if (set.contains(xx)) continue;
                        if (xx == p) {
                            ans += step + 1;
                            break t;
                        }
                        if (xx < 300 && xx > 10) {
                            q.offer(new Node(xx, step + 1));
                            set.add(xx);
                        }
                    }
                    if (a[i] == 300) {
                        ans += step + 1;
                        break;
                    } else {
                        set.add(300);
                        q.offer(new Node(300, step + 1));
                    }
                    set.add(10);
                    q.offer(new Node(10, step + 1));
                }
            }
            out.println(ans);
        }
        out.flush();
        out.close();
    }

    static class Node {
        int x, step;

        public Node(int x, int step) {
            this.x = x;
            this.step = step;
        }
    }

    static class sc {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static long nextLong() throws IOException {
            input.nextToken();
            return (long) input.nval;
        }

    }
}
"
17,D,Java,61163646,2023-03-10 20:03:52,陈力明,答案错误,"
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.invoke.MethodHandles;
import java.util.*;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
 
public class Main{
 
private static final boolean String = false;
static int []f;
//static int []f2;
static int []size;
//static int []size2;
//static int []a=new int [500001];
static int max=Integer.MAX_VALUE;

static Set<Integer>set;
static int k;
static long mod= 998244353;

static int n,m;
static int x1,y1;
 static List<Integer>[]ans;
 static char [][]c;
static	int  res=0;
 private static int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};
	public static void main(String []args) {
		MyScanner s=new MyScanner();
		PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		
		int t=s.nextInt();
		while(t-->0)
		{
			
			int ans=0;
			int a=s.nextInt();
			int b=s.nextInt();
			int c=s.nextInt();
			int d=s.nextInt();
			
			res=Integer.MAX_VALUE;
			int cc=Integer.MAX_VALUE;
			kk(10,a,0);
			cc=Math.min(cc, res);
			res=Integer.MAX_VALUE;
			kk(300,a,1);
			cc=Math.min(cc, res);
			ans+=cc;
			res=Integer.MAX_VALUE;
			 cc=Integer.MAX_VALUE;
			kk(10,b,0);
			cc=Math.min(cc, res);
			res=Integer.MAX_VALUE;
			kk(300,b,1);
			cc=Math.min(cc, res);
			ans+=cc;
			res=Integer.MAX_VALUE;
			 cc=Integer.MAX_VALUE;
			kk(10,d,0);
			cc=Math.min(cc, res);
			res=Integer.MAX_VALUE;
			kk(300,d,1);
			cc=Math.min(cc, res);
			ans+=cc;
			res=Integer.MAX_VALUE;
			 cc=Integer.MAX_VALUE;
			kk(10,c,0);
			cc=Math.min(cc, res);
			res=Integer.MAX_VALUE;
			kk(300,c,1);
			cc=Math.min(cc, res);
			ans+=cc;
			out.println(ans);
			
		}
		
	

	out.close();
	}
	public static void kk(int a,int d,int sum)
	{
		if(a==d)
		{
			res=Math.min(sum, res);
			return ;
		}
		if(a<d)
		{
			int r=d-a;
			if(r>=100)
				kk(a+100*(r/100),d,sum+1);
			else if(r>=10)
				kk(a+10*(r/10),d,sum+r);
			else kk(a+r,d,sum+r);
			
			
		}
		else
		{
			int r=a-d;
			if(r>=100)
				kk(a-100*(r/100),d,sum+1);
			else if(r>=10)
				kk(a-10*(r/10),d,sum+r);
			else kk(a-r,d,sum+r);
		}
		
		
	}
	public static boolean is(char []c)
	{
		int l=0;
		int r=c.length-1;
		while(l<r)
		{
			if(c[l]!=c[r])return false;
			l++;r--;
		}
		return true;
	}
	public static void swap (int l,int r,int []f)
	{
		if(l>=f.length||r>=f.length)return;
		int tt=f[l];
		f[l]=f[r];
		f[r]=tt;
		
	}
	public static void dfs(int u,int ans,int r,int k)
	{
		if(u>r)return;
		if(ans==1)
		{
			res++;
			res%=mod;
			return;
		}
		if(k==0)
		{
			dfs(u*3,ans-1,r,1);
			
		}
		dfs(u*2,ans-1,r,0);
		
	}
public static void reverse(int []a)
{
	int l=0,r=a.length-1;
	while(l<r)
	{
		int t=a[l];
		a[l]=a[r];
		a[r]=t;
		l++;r--;
	}
}
	public static long sum (int x,long mod)
	{
		
	long sum=1;
		for(int i = 2; i * i <= x; ++i){
			long temp = 1;
			if(x % i == 0){
				long j = i;
				while(x % i == 0){
					temp += j;
					j *= i;
					x /= i;
				}
				sum = (sum * temp) % mod;
			}

	
	}
		if(x > 1) sum = (sum * (1 + x)) % mod;
		return sum;
	}
	  public  static long Mode(long a,  long b, long mode)
	  {
	  	 long sum = 1;
	  	a = a % mode;
	   
	  	while (b > 0) {
	  		if (b % 2 == 1)		//判断是否是奇数，是奇数的话将多出来的数事先乘如sum
	  			sum = (sum * a) % mode;
	   
	  		b /= 2;
	  		a = (a * a) % mode;// 不断的两两合并再取模，减小a和b的规模
	  	}
	  	return sum;
	  }
	public static long cc(int n,int m)
	{
		long sum = 1;
	for(int i=1;i<=n; i++) {
		sum=sum*(m-n+i)/i;
	}
	return sum;

		
	}
	public static long is(int mid,long []f,int d)
	{
		long ans=0;
		for(int i=0;i<d;i++)
		{
			
			int   k=i%mid;
			if(k>f.length-1)continue;
			ans+=f[f.length-k-1];
		}
		return ans;
	}
	 private static void bfs(int[][] st, int a, int b) {
	        Queue<int[]> q = new LinkedList<>();
	        q.add(new int[]{a, b});
	        st[a][b] = 0;
	        while (!q.isEmpty()) {
	            int[] t = q.poll();
	            int x = t[0], y = t[1];
	            for (int i = 0; i < 4; i++) {
	                int nx = x + dx[i];
	                int ny = y + dy[i];
	                if (nx <n && nx >= 0 && ny <m && ny >= 0 && c[nx][ny] != '*' && st[nx][ny] == -1) {
	                    q.add(new int[]{nx, ny});
	                    st[nx][ny] = st[x][y] + 1;
	                }
	            }
	        }
	    }
	public static boolean is(String a,String b)
	{
		for(int i=0;i<=b.length()-a.length();i++)
		{
			if(b.substring(i,i+a.length()).equals(a))
				return true;
		}
		return false;
		
	}
	public  static void dfs(int u,int k,List <Integer>[]list)
	{
		res=Math.max(res,k);
		for(int x:list [u])
		{
			boolean c=false;
			int kk=0;
			int min=Math.min(f[u], f[x]);
			for(int b:ans[min])
			{
				if(f[u]%b==0&&f[x]%b==0)
				{
					kk++;
					if(kk>=2) {
					c=true;break;
					}
					
				}
				
			}
			if(c)
				dfs(x,k+1,list);
			else dfs(x,1,list);
		}
				
			
		
		
	}
	
	
	  public static boolean is(int  n) {
		    if (n <= 3) {
		        return n > 1;
		    }
		    // 只有6x-1和6x+1的数才有可能是质数
		    if (n % 6 != 1 && n % 6 != 5) {
		        return false;
		    }
		    // 判断这些数能否被小于sqrt(n)的奇数整除
		    int sqrt = (int) Math.sqrt(n);
		    for (int i = 5; i <= sqrt; i += 6) {
		        if (n % i == 0 || n % (i + 2) == 0) {
		            return false;
		        }
		    }
		    return true;
		}


	
	
public static void dfs(int x,int y,char [][]c,int [][]v){
	if(v[x][y]!=0)
	{
		return ;
	}
	int []dx={1,-1,0,0};
	
	int []dy= {0,0,1,-1};
	
	v[x][y]=1;
	for(int i=0;i<4;i++)
	{
		int x1=x+dx[i];
		
		int y1=y+dy[i];
		if(x1<0||x1>=v.length||y1<0||y1>=v[0].length||v[x1][y1]==1||c[x1][y1]=='#')continue;
		dfs(x1,y1,c,v);
		
	}
		
		
}	


public static int find (int []father,int x) {
		if(x!=father[x])
			x=find(father,father[x]);
		return father[x];
	}
public static void union(int []father,int x,int y,int []size) {
	x=find(father,x);
	y=find(father,y);
	if(x==y)
		return ;
	if(size[x]<size[y]) {
		 int tem=x;
         x=y;
         y=tem;
	}
	father[y]=x;
	size[x]+=size[y];
return ;
}
		
					
public static void shufu(int []f) {
		for(int i=0;i<f.length;i++) {
			int k=(int)(Math.random()*(f.length));
			int t=f[k];
			
			f[k]=f[0];
			f[0]=t;
			
		}
	}
public static void shufu1(long []f) {
	for(int i=0;i<f.length;i++) {
		int k=(int)(Math.random()*(f.length));
		long t=f[k];
		f[k]=f[0];
		f[0]=t;
	}
}
public  static int  gcd(int x,int y) {
		return y==0(?)x:gcd(y,x%y);
	}
 
 
public  static int  lcm(int x,int y) {
		
		return x*y/gcd(x,y);
}
		
	
	
		
		
	
	
		
	
/*					
public static void buildertree(int k,int l,int r) {
		if(l==r)
		{
			f[k]=a[l];
			return ;
		}
		int m=l+r>>1;
		buildertree(k+k,l,m);
		buildertree(k+k+1,m+1,r);
		f[k]=	
	
	}
public static	void update(int u,int l,int r,int x,int c)
{
    if(l==x && r==x)
    {
        f[u]=c;
        return;
    }
    int mid=l+r>>1;
    if(x<=mid)update(u<<1,l,mid,x,c);
    else if(x>=mid+1)update(u<<1|1,mid+1,r,x,c);
   	f[u]=Math.max(f[u+u], f[u+u+1]);
}
	
public static int query(int k,int l,int r,int x,int y) {
		if(x==l&&y==r) {
			return f[k];
		}
		int m=l+r>>1;
		if(y<=m) {
			return query(k+k,l,m,x,y);
		}
		else if(x>m)return query(k+k+1,m+1,r,x,y);
		else  {
			int i=query(k+k,l,m,x,m),j=query(k+k+1,m+1,r,m+1,y);
		return Math.max(j, Math.max(i+j, i));
		
		}
	}
	
public static void calc(int k,int l,int r,int x,int z) {
 
			f[k]+=z;
			if(l==r) {
				return ;
			}
			int m=l+r>>1;
    		if(x<=m)
    			calc(k+k,l,m,x,z);
    		else calc(k+k+1,m+1,r,x,z);
			
			
		}
	
				
			
 
		*/
		
				
	
			
	
			
	
 
	public static class MyScanner {
	    BufferedReader br;
	    StringTokenizer st;
	 
	    public MyScanner() {
	      try {
	        final String USERDIR = System.getProperty(""user.dir"");
	        String cname = MethodHandles.lookup().lookupClass().getCanonicalName().replace("".MyScanner"", """");
	        cname = cname.lastIndexOf('.') > 0 (?) cname.substring(cname.lastIndexOf('.') + 1) : cname;
	        final File fin = new File(USERDIR + ""/io/c"" + cname.substring(1,5) + ""/"" + cname + "".in"");
	        br = new BufferedReader(new InputStreamReader(fin.exists()
	            (?) new FileInputStream(fin) : System.in));
	      } catch (Exception e) {
	        br = new BufferedReader(new InputStreamReader(System.in));
	      }
	    }
	 
	    public String next() {
	      try {
	        while (st == null || !st.hasMoreElements()) {
	          st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	      } catch (Exception e) {
	        throw new RuntimeException(e);
	      }
	    }
	 
	    public int nextInt() {
	      return Integer.parseInt(next());
	    }
	 
	    public long nextLong() {
	      return Long.parseLong(next());
	    }
	  }
	
		}"
18,D,Java,61164296,2023-03-10 20:10:09,牛客62263578号,运行超时,"import java.util.*;
import java.io.*;
import java.math.*;

//Queue<Node>q=new LinkedList<Node>();
//ArrayList<Integer>list=new ArrayList<Integer>();
//Map<Integer,Integer>map=new HashMap<Integer,Integer>();

public class Main {
	static long INF = 2000000000000000010l;
	static int fx[][] = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, -1 }, { 1, 1 }, { 1, -1 }, { -1, 1 } };
	static int[]fa=new int[100010];
	
	public static void main(String[] args) throws IOException {
		int t = 1;
		 t = cin.nextInt();
		while (t-- > 0) {
			// csh();
			solve();
			out.flush();
		}
		out.close();
	}
	static int a,b,c,d;
	public static void solve() {
		a=cin.nextInt();
		b=cin.nextInt();
		c=cin.nextInt();
		d=cin.nextInt();
		int as=0;
		as+=bfs(a);
		as+=bfs(b);
		as+=bfs(c);
		as+=bfs(d);
		out.println(as);
	}
	static int bfs(int n){
		Queue<Node>q=new LinkedList<Node>();
		boolean vis[]=new boolean [1100];
		q.add(new Node(10,0));
		while(!q.isEmpty()){
			Node h=q.poll();
			if(h.x==n){
				return h.y;
			}
			int x=h.x-1;
			if(x>=0&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=h.x-10;
			if(x>=0&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=h.x-100;
			if(x>=0&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			
			x=h.x+1;
			if(x<1000&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=h.x+10;
			if(x<1000&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=h.x+100;
			if(x<1000&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			
			x=300;
			if(!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=10;
			if(!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
		}
		return -1;
	}
	static class Node {
		int x, y;

		Node() {
		}

		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

	static void csh() {

	}

	static long cnm(int a, int b) {
		long sum = 1;
		int i = a, j = 1;
		while (j <= b) {
			sum = sum * i / j;
			i--;
			j++;
		}
		return sum;
	}

	public static long qmi(long a, long b, long p)
	{
		long sum = 1;
		while (b > 0)
		{
			if ((b & 1) == 1)
				sum = (sum % p) * (a % p) % p;
			a = (a % p) * (a % p) % p;
			b >>= 1;
		}
		return sum;
	}

	static int gcd(int a, int b) {
		return b == 0 (?) a : gcd(b, a % b);
	}

	static int lcm(int a, int b) {
		return (a * b) / gcd(a, b);
	}
	
	static int find(int x){
	    return fa[x]==x (?) x : (fa[x]=find(fa[x]));
	}
	static void build(int x,int y){
	    fa[find(y)]=find(x);
	}
	static void gbSort(int[] a, int l, int r) {
		if (l < r) {
			int m = (l + r) >> 1;
			gbSort(a, l, m);
			gbSort(a, m + 1, r);

			int[] t = new int[r - l + 1];
			int idx = 0, i = l, j = m + 1;

			while (i <= m && j <= r) {
				// cnt++;
				if (a[i] <= a[j])
					t[idx++] = a[i++];
				else {
					t[idx++] = a[j++];
					// cnt += m -i +1;//nx
				}
			}
			while (i <= m)
				t[idx++] = a[i++];
			while (j <= r)
				t[idx++] = a[j++];

			for (int z = 0; z < t.length; z++)
				a[l + z] = t[z];
		}
	}

	static FastScanner cin = new FastScanner(System.in);
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

	static class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(InputStream in) {
			br = new BufferedReader(new InputStreamReader(in), 16384);
			eat("""");
		}

		public void eat(String s) {
			st = new StringTokenizer(s);
		}

		public String nextLine() {
			try {
				return br.readLine();
			} catch (IOException e) {
				return null;
			}
		}

		public boolean hasNext() {
			while (!st.hasMoreTokens()) {
				String s = nextLine();
				if (s == null)
					return false;
				eat(s);
			}
			return true;
		}

		public String next() {
			hasNext();
			return st.nextToken();
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public Double nextDouble() {
			return Double.parseDouble(next());
		}

		public BigInteger nextBigInteger() {
			return new BigInteger(next());
		}

		public BigDecimal nextBigDecimal() {
			return new BigDecimal(next());
		}
	}
}
"
19,D,Java,61164415,2023-03-10 20:11:43,山东协和学院_张福旭,运行超时,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    public static void main(String[] args) {
       int t=sc.nextInt();
       //int[]
       while (t-->0){
           int ans=0;
           for (int i=1;i<=4;i++){
               Queue<int[]> q=new LinkedList<>();
               int x=sc.nextInt();
               q.offer(new int[]{10,0});
               while (!q.isEmpty()){
                   int[] index=q.poll();
                   if (index[0]==x){
                       ans+=index[1];
                       break;
                   }
                   int cnt=index[0];
                   if(cnt-1>=10) q.offer(new int[]{cnt-1,index[1]+1});
                   if(cnt+1<=300) q.offer(new int[]{cnt+1,index[1]+1});
                   if(cnt-10>=10) q.offer(new int[]{cnt-10,index[1]+1});
                   if(cnt+10<=300) q.offer(new int[]{cnt+10,index[1]+1});
                   if(cnt-100>=10) q.offer(new int[]{cnt-100,index[1]+1});
                   if(cnt+100<=300) q.offer(new int[]{cnt+100,index[1]+1});
                   q.offer(new int[]{10,index[1]+1});
                   q.offer(new int[]{300,index[1]+1});
               }
           }
           out.println(ans);
       }
        out.flush();
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }
        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
20,D,Java,61164736,2023-03-10 20:15:13,牛客62263578号,答案正确,"import java.util.*;
import java.io.*;
import java.math.*;

//Queue<Node>q=new LinkedList<Node>();
//ArrayList<Integer>list=new ArrayList<Integer>();
//Map<Integer,Integer>map=new HashMap<Integer,Integer>();

public class Main {
	static long INF = 2000000000000000010l;
	static int fx[][] = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, -1 }, { 1, 1 }, { 1, -1 }, { -1, 1 } };
	static int[]fa=new int[100010];
	
	public static void main(String[] args) throws IOException {
		int t = 1;
		 t = cin.nextInt();
		while (t-- > 0) {
			// csh();
			solve();
			out.flush();
		}
		out.close();
	}
	static int a,b,c,d;
	static int ans[]=new int[400];
	static int idx=0;
	public static void solve() {
		a=cin.nextInt();
		b=cin.nextInt();
		c=cin.nextInt();
		d=cin.nextInt();
		if(ans[a]==0)
		ans[a]=bfs(a);
		if(ans[b]==0)
			ans[b]=bfs(b);
		if(ans[c]==0)
			ans[c]=bfs(c);
		if(ans[d]==0)
			ans[d]=bfs(d);
		int as=0;
		as+=ans[a];
		as+=ans[b];
		as+=ans[c];
		as+=ans[d];
		out.println(as);
	}
	static int bfs(int n){
		Queue<Node>q=new LinkedList<Node>();
		boolean vis[]=new boolean [1100];
		q.add(new Node(10,0));
		while(!q.isEmpty()){
			Node h=q.poll();
			if(h.x==n){
				return h.y;
			}
			int x=h.x-1;
			if(x>=0&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=h.x-10;
			if(x>=0&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=h.x-100;
			if(x>=0&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			
			x=h.x+1;
			if(x<400&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=h.x+10;
			if(x<400&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=h.x+100;
			if(x<400&&!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			
			x=300;
			if(!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
			x=10;
			if(!vis[x]){
				q.add(new Node(x,h.y+1));
				vis[x]=true;
			}
		}
		return -1;
	}
	static class Node {
		int x, y;

		Node() {
		}

		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

	static void csh() {

	}

	static long cnm(int a, int b) {
		long sum = 1;
		int i = a, j = 1;
		while (j <= b) {
			sum = sum * i / j;
			i--;
			j++;
		}
		return sum;
	}

	public static long qmi(long a, long b, long p)
	{
		long sum = 1;
		while (b > 0)
		{
			if ((b & 1) == 1)
				sum = (sum % p) * (a % p) % p;
			a = (a % p) * (a % p) % p;
			b >>= 1;
		}
		return sum;
	}

	static int gcd(int a, int b) {
		return b == 0 (?) a : gcd(b, a % b);
	}

	static int lcm(int a, int b) {
		return (a * b) / gcd(a, b);
	}
	
	static int find(int x){
	    return fa[x]==x (?) x : (fa[x]=find(fa[x]));
	}
	static void build(int x,int y){
	    fa[find(y)]=find(x);
	}
	static void gbSort(int[] a, int l, int r) {
		if (l < r) {
			int m = (l + r) >> 1;
			gbSort(a, l, m);
			gbSort(a, m + 1, r);

			int[] t = new int[r - l + 1];
			int idx = 0, i = l, j = m + 1;

			while (i <= m && j <= r) {
				// cnt++;
				if (a[i] <= a[j])
					t[idx++] = a[i++];
				else {
					t[idx++] = a[j++];
					// cnt += m -i +1;//nx
				}
			}
			while (i <= m)
				t[idx++] = a[i++];
			while (j <= r)
				t[idx++] = a[j++];

			for (int z = 0; z < t.length; z++)
				a[l + z] = t[z];
		}
	}

	static FastScanner cin = new FastScanner(System.in);
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

	static class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(InputStream in) {
			br = new BufferedReader(new InputStreamReader(in), 16384);
			eat("""");
		}

		public void eat(String s) {
			st = new StringTokenizer(s);
		}

		public String nextLine() {
			try {
				return br.readLine();
			} catch (IOException e) {
				return null;
			}
		}

		public boolean hasNext() {
			while (!st.hasMoreTokens()) {
				String s = nextLine();
				if (s == null)
					return false;
				eat(s);
			}
			return true;
		}

		public String next() {
			hasNext();
			return st.nextToken();
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public Double nextDouble() {
			return Double.parseDouble(next());
		}

		public BigInteger nextBigInteger() {
			return new BigInteger(next());
		}

		public BigDecimal nextBigDecimal() {
			return new BigDecimal(next());
		}
	}
}
"
21,D,Java,61164780,2023-03-10 20:15:39,EGOIST9029,答案错误,"import java.io.*;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.*;

public class Main{
	public static PrintWriter out = new PrintWriter(System.out);
    public static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    public static void main(String[] args)throws Exception {
        int t = Integer.parseInt(reader.readLine());
        for(int i = 0;i<t;i++) {
        	String[] strings = reader.readLine().split("" "");
        	int ans = 0;
        	for(int j = 0;j<4;j++) {
        		int x = Integer.parseInt(strings[j]);
        		ans+= Math.min(f(10, x),1+f(300, x));
        	}
        	out.println(ans);
        }
        out.close();
    }
    
    public static int f(int t,int x) {
		int ans = 0;
    	while(t!=x) {
    		while(Math.abs(t+100-x)<Math.abs(t-x)) {
    			t+=100;
    			ans++;
    		}
    		while(Math.abs(t-100-x)<Math.abs(t-x)) {
    			t-=100;
    			ans++;
    		}
    		while(Math.abs(t+10-x)<Math.abs(t-x)) {
    			t+=10;
    			ans++;
    		}
    		while(Math.abs(t-10-x)<Math.abs(t-x)){
    			t-=10;
    			ans++;
    		}
    		while(Math.abs(t+1-x)<Math.abs(t-x)) {
    			t+=1;
    			ans++;
    		}
    		while(Math.abs(t-1-x)<Math.abs(t-x)) {
    			t-=1;
    			ans++;
    		}
    	}
		return ans;
	}
}"
22,D,Java,61165133,2023-03-10 20:19:20,给个AC吧,答案错误,"
import java.io.*;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static int[] dx = {0, 1, -10, -100};
    static int[] dy = {0, -1, 10, 100};
    static Set<Integer> set = new HashSet<>();

    public static void main(String[] args) throws IOException {
        int t = sc.nextInt();
        while (t-- > 0) {
            int[] a = new int[5];
            int ans = 0;
            for (int i = 1; i < a.length; i++) a[i] = sc.nextInt();
            for (int i = 1; i <= 4; i++) {
                int p = a[i];
                int n = 10;
                if (a[i] == n) continue;
                Queue<Node> q = new LinkedList<>();
                q.offer(new Node(n, 0));
                t:
                while (!q.isEmpty()) {
                    Node tmp = q.poll();
                    int x = tmp.x;
                    int step = tmp.step;
                    for (int j = 1; j <= 3; j++) {
                        if (!set.contains(x + dx[j]) || !set.contains(x + dy[j])) {
                            int xx = x + dx[j];
                            int yy = x + dy[j];
                            if (xx == p || yy == p) {
                                ans += step + 1;
                                break t;
                            }
                            if (xx < 300 && xx > 10) {
                                q.offer(new Node(xx, step + 1));
                                set.add(xx);
                            }
                            if (yy < 300 && yy > 10) {
                                q.offer(new Node(yy, step + 1));
                                set.add(yy);
                            }
                        }

                    }
                    if (a[i] == 300) {
                        ans += step;
                        break;
                    } else {
                        if (!set.contains(300)) {
                            set.add(300);
                            q.offer(new Node(300, step + 1));
                        }
                    }
                    if (!set.contains(10)) {
                        set.add(10);
                        q.offer(new Node(10, step + 1));
                    }
                }
            }
            out.println(ans);
        }
        out.flush();
        out.close();
    }

    static class Node {
        int x, step;

        public Node(int x, int step) {
            this.x = x;
            this.step = step;
        }
    }

    static class sc {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static long nextLong() throws IOException {
            input.nextToken();
            return (long) input.nval;
        }

    }
}
"
23,D,Java,61165139,2023-03-10 20:19:23,妄念、,答案错误,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        while (in.hasNext()) {
            int t=in.nextInt();
            for (int q=1;q<=t;q++) {
                int a=in.nextInt();
                int b=in.nextInt();
                int c=in.nextInt();
                int d=in.nextInt();
                int sum=0;
                sum+=jisuan(a);
                sum+=jisuan(b);
                sum+=jisuan(c);
                sum+=jisuan(d);
                System.out.println(sum);
            }
        }
    }

    private static int jisuan(int x) {
        int j=0;
        if(x>=250&&x<260){
            j+=6;
            x-=240;
        }else if(x>=260&&x<270){
            j+=5;
            x-=250;
        }else if(x>=270&&x<280){
            j+=4;
            x-=260;
        }else if(x>=280&&x<290){
            j+=3;
            x-=270;
        }else if(x>=290&&x<300){
            j+=2;
            x-=280;
        }
        if (x==300) j=1;
        else if (x==200)j=2;
        else if (x%100>=10&&x%100<=15)j+=x%100-10+x/100;
        else if (x%100>=16&&x%100<=19)j+=21-x%100+x/100;
        else if (x%100>=20&&x%100<=25)j+=x%100-19+x/100;
        else if (x%100>=26&&x%100<=29)j+=32-x%100+x/100;
        else if (x%100>=30&&x%100<=35)j+=x%100-28+x/100;
        else if (x%100>=36&&x%100<=39)j+=43-x%100+x/100;
        else if (x%100>=40&&x%100<=45)j+=x%100-37+x/100;
        else if (x%100>=46&&x%100<=49)j+=54-x%100+x/100;
        else if (x%100>=50&&x%100<=55)j+=x%100-46+x/100;
        else if (x%100>=56&&x%100<=59)j+=65-x%100+x/100;
        else if (x%100>=60&&x%100<=65)j+=x%100-55+x/100;
        else if (x%100>=66&&x%100<=69)j+=76-x%100+x/100;
        else if (x%100>=70&&x%100<=75)j+=5+x%10+x/100;
        else if (x%100>=76&&x%100<=79)j+=14-x%10+x/100;
        else if (x%100>=80&&x%100<=85)j+=4+x%10+x/100;
        else if (x%100>=86&&x%100<=89)j+=13-x%10+x/100;
        else if (x%100>=90&&x%100<=95)j+=3+x%10+x/100;
        else if (x%100>=96&&x%100<=99)j+=12-x%10+x/100;
        else if (x%100>=0&&x%100<=5)j+=1+x%10+x/100;
        else if (x%100>=6&&x%100<=9)j+=10-x%10+x/100;
        return j;
    }

}
"
24,D,Java,61165163,2023-03-10 20:19:35,EGOIST9029,答案错误,"import java.io.*;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.*;

public class Main{
	public static PrintWriter out = new PrintWriter(System.out);
    public static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    public static void main(String[] args)throws Exception {
        int t = Integer.parseInt(reader.readLine());
        for(int i = 0;i<t;i++) {
        	String[] strings = reader.readLine().split("" "");
        	int ans = 0;
        	for(int j = 0;j<4;j++) {
        		int x = Integer.parseInt(strings[j]);
        		ans+= Math.min(f(10, x),1+f(300, x));
        	}
        	out.println(ans);
        }
        out.close();
    }
    
    public static int f(int t,int x) {
		int ans = 0;
    	while(t!=x) {
    		while(t+100<301&&Math.abs(t+100-x)<Math.abs(t-x)) {
    			t+=100;
    			ans++;
    		}
    		while(t-100>9&&Math.abs(t-100-x)<Math.abs(t-x)) {
    			t-=100;
    			ans++;
    		}
    		while(t+10<301&&Math.abs(t+10-x)<Math.abs(t-x)) {
    			t+=10;
    			ans++;
    		}
    		while(t-10>9&&Math.abs(t-10-x)<Math.abs(t-x)){
    			t-=10;
    			ans++;
    		}
    		while(t+1<301&&Math.abs(t+1-x)<Math.abs(t-x)) {
    			t+=1;
    			ans++;
    		}
    		while(t-1>9&&Math.abs(t-1-x)<Math.abs(t-x)) {
    			t-=1;
    			ans++;
    		}
    	}
		return ans;
	}
}"
25,D,Java,61165583,2023-03-10 20:24:14,给个AC吧,运行超时,"

import java.io.*;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static int[] dx = {0, 1, -10, -100};
    static int[] dy = {0, -1, 10, 100};
    static Set<Integer> set = new HashSet<>();

    public static void main(String[] args) throws IOException {
        int t = sc.nextInt();
        while (t-- > 0) {
            int[] a = new int[5];
            int ans = 0;
            for (int i = 1; i < a.length; i++) a[i] = sc.nextInt();
            for (int i = 1; i <= 4; i++) {
                int p = a[i];
                int n = 10;
                if (a[i] == n) continue;
                Queue<Node> q = new LinkedList<>();
                q.offer(new Node(n, 0));
                set.clear();
                t:
                while (!q.isEmpty()) {
                    Node tmp = q.poll();
                    int x = tmp.x;
                    int step = tmp.step;
                    for (int j = 1; j <= 3; j++) {
                        if (!set.contains(x + dx[j]) || !set.contains(x + dy[j])) {
                            int xx = x + dx[j];
                            int yy = x + dy[j];
                            if (xx == p || yy == p) {
                                ans += step + 1;
                                break t;
                            }
                            if (xx < 300 && xx > 10) {
                                q.offer(new Node(xx, step + 1));
                                set.add(xx);
                            }
                            if (yy < 300 && yy > 10) {
                                q.offer(new Node(yy, step + 1));
                                set.add(yy);
                            }
                        }

                    }
                    if (a[i] == 300) {
                        ans += step + 1;
                        break;
                    } else {
                        if (!set.contains(300)) {
                            set.add(300);
                            q.offer(new Node(300, step + 1));
                        }
                    }
                    if (!set.contains(10)) {
                        set.add(10);
                        q.offer(new Node(10, step + 1));
                    }
                }

            }

            out.println(ans);
        }
        out.flush();
        out.close();
    }

    static class Node {
        int x, step;

        public Node(int x, int step) {
            this.x = x;
            this.step = step;
        }
    }

    static class sc {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static long nextLong() throws IOException {
            input.nextToken();
            return (long) input.nval;
        }

    }
}
"
26,D,Java,61165684,2023-03-10 20:25:15,anguin,答案错误,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target&&head.x-target<10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target&&target-head.x<10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target&&head.x-target<100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target&&target-head.x<100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target&&head.x-target<300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target&&target-head.x<300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target&&target<=20) q.offer(new good(10, head.step+1));
                if (head.x<target&&target>=200) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
27,D,Java,61165717,2023-03-10 20:25:35,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target&&head.x-target<10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target&&target-head.x<10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target&&head.x-target<100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target&&target-head.x<100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target&&head.x-target<300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target&&target-head.x<300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target&&target<=50) q.offer(new good(10, head.step+1));
                if (head.x<target&&target>=150) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
28,D,Java,61165751,2023-03-10 20:26:01,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target&&head.x-target<10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target&&target-head.x<10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target&&head.x-target<100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target&&target-head.x<100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target&&head.x-target<300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target&&target-head.x<300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target&&target<=40) q.offer(new good(10, head.step+1));
                if (head.x<target&&target>=160) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
29,D,Java,61165792,2023-03-10 20:26:25,anguin,答案错误,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target&&head.x-target<10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target&&target-head.x<10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target&&head.x-target<100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target&&target-head.x<100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target&&head.x-target<300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target&&target-head.x<300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target&&target<=30) q.offer(new good(10, head.step+1));
                if (head.x<target&&target>=170) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
30,D,Java,61165814,2023-03-10 20:26:41,陈力明,答案错误,"
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.invoke.MethodHandles;
import java.util.*;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
 
public class Main{
 
private static final boolean String = false;
static int []f;
//static int []f2;
static int []size;
//static int []size2;
//static int []a=new int [500001];
static int max=Integer.MAX_VALUE;

static Set<Integer>set;
static int k;
static long mod= 998244353;

static int n,m;
static int x1,y1;
 static List<Integer>[]ans;
 static char [][]c;
static	int  res=0;
 private static int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};
	public static void main(String []args) {
		MyScanner s=new MyScanner();
		PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		
		int t=s.nextInt();
		while(t-->0)
		{
			
			int ans=0;
			int a=s.nextInt();
			int b=s.nextInt();
			int c=s.nextInt();
			int d=s.nextInt();
		
            int kk=Math.abs(100-a);
            int k100=kk/100+(kk-(kk/100)*100)/10+kk%10;
            kk=Math.abs(200-a);
            int k200=kk/100+(kk-(kk/100)*100)/10+kk%10;
             kk=Math.abs(10-a);
            int k10=kk/100+(kk-(kk/100)*100)/10+kk%10;
               kk=Math.abs(300-a);
            int k300=kk/100+(kk-(kk/100)*100)/10+kk%10;
            int res=Integer.MAX_VALUE;
            ans+=kk(a);
            ans+=kk(a);
            ans+=kk(a);
			
		}
		
	

	out.close();
	}
	public static int kk(int a)
	{
		   int kk=Math.abs(100-a);
            int k100=kk/100+(kk-(kk/100)*100)/10+kk%10;
            kk=Math.abs(200-a);
            int k200=kk/100+(kk-(kk/100)*100)/10+kk%10;
             kk=Math.abs(10-a);
            int k10=kk/100+(kk-(kk/100)*100)/10+kk%10;
               kk=Math.abs(300-a);
            int k300=kk/100+(kk-(kk/100)*100)/10+kk%10;
          int res=Integer.MAX_VALUE;
            res=Math.min(k10,res);
        res=Math.min(k100+2,res);
        res=Math.min(k200+2,res);
        res=Math.min(k300+1,res);
        return res;
		
		
	}
	public static boolean is(char []c)
	{
		int l=0;
		int r=c.length-1;
		while(l<r)
		{
			if(c[l]!=c[r])return false;
			l++;r--;
		}
		return true;
	}
	public static void swap (int l,int r,int []f)
	{
		if(l>=f.length||r>=f.length)return;
		int tt=f[l];
		f[l]=f[r];
		f[r]=tt;
		
	}
	public static void dfs(int u,int ans,int r,int k)
	{
		if(u>r)return;
		if(ans==1)
		{
			res++;
			res%=mod;
			return;
		}
		if(k==0)
		{
			dfs(u*3,ans-1,r,1);
			
		}
		dfs(u*2,ans-1,r,0);
		
	}
public static void reverse(int []a)
{
	int l=0,r=a.length-1;
	while(l<r)
	{
		int t=a[l];
		a[l]=a[r];
		a[r]=t;
		l++;r--;
	}
}
	public static long sum (int x,long mod)
	{
		
	long sum=1;
		for(int i = 2; i * i <= x; ++i){
			long temp = 1;
			if(x % i == 0){
				long j = i;
				while(x % i == 0){
					temp += j;
					j *= i;
					x /= i;
				}
				sum = (sum * temp) % mod;
			}

	
	}
		if(x > 1) sum = (sum * (1 + x)) % mod;
		return sum;
	}
	  public  static long Mode(long a,  long b, long mode)
	  {
	  	 long sum = 1;
	  	a = a % mode;
	   
	  	while (b > 0) {
	  		if (b % 2 == 1)		//判断是否是奇数，是奇数的话将多出来的数事先乘如sum
	  			sum = (sum * a) % mode;
	   
	  		b /= 2;
	  		a = (a * a) % mode;// 不断的两两合并再取模，减小a和b的规模
	  	}
	  	return sum;
	  }
	public static long cc(int n,int m)
	{
		long sum = 1;
	for(int i=1;i<=n; i++) {
		sum=sum*(m-n+i)/i;
	}
	return sum;

		
	}
	public static long is(int mid,long []f,int d)
	{
		long ans=0;
		for(int i=0;i<d;i++)
		{
			
			int   k=i%mid;
			if(k>f.length-1)continue;
			ans+=f[f.length-k-1];
		}
		return ans;
	}
	 private static void bfs(int[][] st, int a, int b) {
	        Queue<int[]> q = new LinkedList<>();
	        q.add(new int[]{a, b});
	        st[a][b] = 0;
	        while (!q.isEmpty()) {
	            int[] t = q.poll();
	            int x = t[0], y = t[1];
	            for (int i = 0; i < 4; i++) {
	                int nx = x + dx[i];
	                int ny = y + dy[i];
	                if (nx <n && nx >= 0 && ny <m && ny >= 0 && c[nx][ny] != '*' && st[nx][ny] == -1) {
	                    q.add(new int[]{nx, ny});
	                    st[nx][ny] = st[x][y] + 1;
	                }
	            }
	        }
	    }
	public static boolean is(String a,String b)
	{
		for(int i=0;i<=b.length()-a.length();i++)
		{
			if(b.substring(i,i+a.length()).equals(a))
				return true;
		}
		return false;
		
	}
	public  static void dfs(int u,int k,List <Integer>[]list)
	{
		res=Math.max(res,k);
		for(int x:list [u])
		{
			boolean c=false;
			int kk=0;
			int min=Math.min(f[u], f[x]);
			for(int b:ans[min])
			{
				if(f[u]%b==0&&f[x]%b==0)
				{
					kk++;
					if(kk>=2) {
					c=true;break;
					}
					
				}
				
			}
			if(c)
				dfs(x,k+1,list);
			else dfs(x,1,list);
		}
				
			
		
		
	}
	
	
	  public static boolean is(int  n) {
		    if (n <= 3) {
		        return n > 1;
		    }
		    // 只有6x-1和6x+1的数才有可能是质数
		    if (n % 6 != 1 && n % 6 != 5) {
		        return false;
		    }
		    // 判断这些数能否被小于sqrt(n)的奇数整除
		    int sqrt = (int) Math.sqrt(n);
		    for (int i = 5; i <= sqrt; i += 6) {
		        if (n % i == 0 || n % (i + 2) == 0) {
		            return false;
		        }
		    }
		    return true;
		}


	
	
public static void dfs(int x,int y,char [][]c,int [][]v){
	if(v[x][y]!=0)
	{
		return ;
	}
	int []dx={1,-1,0,0};
	
	int []dy= {0,0,1,-1};
	
	v[x][y]=1;
	for(int i=0;i<4;i++)
	{
		int x1=x+dx[i];
		
		int y1=y+dy[i];
		if(x1<0||x1>=v.length||y1<0||y1>=v[0].length||v[x1][y1]==1||c[x1][y1]=='#')continue;
		dfs(x1,y1,c,v);
		
	}
		
		
}	


public static int find (int []father,int x) {
		if(x!=father[x])
			x=find(father,father[x]);
		return father[x];
	}
public static void union(int []father,int x,int y,int []size) {
	x=find(father,x);
	y=find(father,y);
	if(x==y)
		return ;
	if(size[x]<size[y]) {
		 int tem=x;
         x=y;
         y=tem;
	}
	father[y]=x;
	size[x]+=size[y];
return ;
}
		
					
public static void shufu(int []f) {
		for(int i=0;i<f.length;i++) {
			int k=(int)(Math.random()*(f.length));
			int t=f[k];
			
			f[k]=f[0];
			f[0]=t;
			
		}
	}
public static void shufu1(long []f) {
	for(int i=0;i<f.length;i++) {
		int k=(int)(Math.random()*(f.length));
		long t=f[k];
		f[k]=f[0];
		f[0]=t;
	}
}
public  static int  gcd(int x,int y) {
		return y==0(?)x:gcd(y,x%y);
	}
 
 
public  static int  lcm(int x,int y) {
		
		return x*y/gcd(x,y);
}
		
	
	
		
		
	
	
		
	
/*					
public static void buildertree(int k,int l,int r) {
		if(l==r)
		{
			f[k]=a[l];
			return ;
		}
		int m=l+r>>1;
		buildertree(k+k,l,m);
		buildertree(k+k+1,m+1,r);
		f[k]=	
	
	}
public static	void update(int u,int l,int r,int x,int c)
{
    if(l==x && r==x)
    {
        f[u]=c;
        return;
    }
    int mid=l+r>>1;
    if(x<=mid)update(u<<1,l,mid,x,c);
    else if(x>=mid+1)update(u<<1|1,mid+1,r,x,c);
   	f[u]=Math.max(f[u+u], f[u+u+1]);
}
	
public static int query(int k,int l,int r,int x,int y) {
		if(x==l&&y==r) {
			return f[k];
		}
		int m=l+r>>1;
		if(y<=m) {
			return query(k+k,l,m,x,y);
		}
		else if(x>m)return query(k+k+1,m+1,r,x,y);
		else  {
			int i=query(k+k,l,m,x,m),j=query(k+k+1,m+1,r,m+1,y);
		return Math.max(j, Math.max(i+j, i));
		
		}
	}
	
public static void calc(int k,int l,int r,int x,int z) {
 
			f[k]+=z;
			if(l==r) {
				return ;
			}
			int m=l+r>>1;
    		if(x<=m)
    			calc(k+k,l,m,x,z);
    		else calc(k+k+1,m+1,r,x,z);
			
			
		}
	
				
			
 
		*/
		
				
	
			
	
			
	
 
	public static class MyScanner {
	    BufferedReader br;
	    StringTokenizer st;
	 
	    public MyScanner() {
	      try {
	        final String USERDIR = System.getProperty(""user.dir"");
	        String cname = MethodHandles.lookup().lookupClass().getCanonicalName().replace("".MyScanner"", """");
	        cname = cname.lastIndexOf('.') > 0 (?) cname.substring(cname.lastIndexOf('.') + 1) : cname;
	        final File fin = new File(USERDIR + ""/io/c"" + cname.substring(1,5) + ""/"" + cname + "".in"");
	        br = new BufferedReader(new InputStreamReader(fin.exists()
	            (?) new FileInputStream(fin) : System.in));
	      } catch (Exception e) {
	        br = new BufferedReader(new InputStreamReader(System.in));
	      }
	    }
	 
	    public String next() {
	      try {
	        while (st == null || !st.hasMoreElements()) {
	          st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	      } catch (Exception e) {
	        throw new RuntimeException(e);
	      }
	    }
	 
	    public int nextInt() {
	      return Integer.parseInt(next());
	    }
	 
	    public long nextLong() {
	      return Long.parseLong(next());
	    }
	  }
	
		}"
31,D,Java,61165818,2023-03-10 20:26:42,anguin,答案错误,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>target&&head.x-target<=100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<target&&target-head.x<=100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>target&&head.x-target<=300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<target&&target-head.x<=300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>target&&target<=30) q.offer(new good(10, head.step+1));
                if (head.x<target&&target>=170) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
32,D,Java,61165838,2023-03-10 20:26:58,anguin,答案错误,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>=target&&head.x-target<=100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<=target&&target-head.x<=100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>=target&&head.x-target<=300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<=target&&target-head.x<=300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>=target&&target<=30) q.offer(new good(10, head.step+1));
                if (head.x<=target&&target>=170) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
33,D,Java,61165846,2023-03-10 20:27:05,陈力明,答案错误,"
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.invoke.MethodHandles;
import java.util.*;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
 
public class Main{
 
private static final boolean String = false;
static int []f;
//static int []f2;
static int []size;
//static int []size2;
//static int []a=new int [500001];
static int max=Integer.MAX_VALUE;

static Set<Integer>set;
static int k;
static long mod= 998244353;

static int n,m;
static int x1,y1;
 static List<Integer>[]ans;
 static char [][]c;
static	int  res=0;
 private static int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};
	public static void main(String []args) {
		MyScanner s=new MyScanner();
		PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		
		int t=s.nextInt();
		while(t-->0)
		{
			
			int ans=0;
			int a=s.nextInt();
			int b=s.nextInt();
			int c=s.nextInt();
			int d=s.nextInt();
		
            int kk=Math.abs(100-a);
            int k100=kk/100+(kk-(kk/100)*100)/10+kk%10;
            kk=Math.abs(200-a);
            int k200=kk/100+(kk-(kk/100)*100)/10+kk%10;
             kk=Math.abs(10-a);
            int k10=kk/100+(kk-(kk/100)*100)/10+kk%10;
               kk=Math.abs(300-a);
            int k300=kk/100+(kk-(kk/100)*100)/10+kk%10;
            int res=Integer.MAX_VALUE;
            ans+=kk(a);
            ans+=kk(b);
            ans+=kk(c);ans+=kk(d);
			out.println(ans);
		}
		
	

	out.close();
	}
	public static int kk(int a)
	{
		   int kk=Math.abs(100-a);
            int k100=kk/100+(kk-(kk/100)*100)/10+kk%10;
            kk=Math.abs(200-a);
            int k200=kk/100+(kk-(kk/100)*100)/10+kk%10;
             kk=Math.abs(10-a);
            int k10=kk/100+(kk-(kk/100)*100)/10+kk%10;
               kk=Math.abs(300-a);
            int k300=kk/100+(kk-(kk/100)*100)/10+kk%10;
          int res=Integer.MAX_VALUE;
            res=Math.min(k10,res);
        res=Math.min(k100+2,res);
        res=Math.min(k200+2,res);
        res=Math.min(k300+1,res);
        return res;
		
		
	}
	public static boolean is(char []c)
	{
		int l=0;
		int r=c.length-1;
		while(l<r)
		{
			if(c[l]!=c[r])return false;
			l++;r--;
		}
		return true;
	}
	public static void swap (int l,int r,int []f)
	{
		if(l>=f.length||r>=f.length)return;
		int tt=f[l];
		f[l]=f[r];
		f[r]=tt;
		
	}
	public static void dfs(int u,int ans,int r,int k)
	{
		if(u>r)return;
		if(ans==1)
		{
			res++;
			res%=mod;
			return;
		}
		if(k==0)
		{
			dfs(u*3,ans-1,r,1);
			
		}
		dfs(u*2,ans-1,r,0);
		
	}
public static void reverse(int []a)
{
	int l=0,r=a.length-1;
	while(l<r)
	{
		int t=a[l];
		a[l]=a[r];
		a[r]=t;
		l++;r--;
	}
}
	public static long sum (int x,long mod)
	{
		
	long sum=1;
		for(int i = 2; i * i <= x; ++i){
			long temp = 1;
			if(x % i == 0){
				long j = i;
				while(x % i == 0){
					temp += j;
					j *= i;
					x /= i;
				}
				sum = (sum * temp) % mod;
			}

	
	}
		if(x > 1) sum = (sum * (1 + x)) % mod;
		return sum;
	}
	  public  static long Mode(long a,  long b, long mode)
	  {
	  	 long sum = 1;
	  	a = a % mode;
	   
	  	while (b > 0) {
	  		if (b % 2 == 1)		//判断是否是奇数，是奇数的话将多出来的数事先乘如sum
	  			sum = (sum * a) % mode;
	   
	  		b /= 2;
	  		a = (a * a) % mode;// 不断的两两合并再取模，减小a和b的规模
	  	}
	  	return sum;
	  }
	public static long cc(int n,int m)
	{
		long sum = 1;
	for(int i=1;i<=n; i++) {
		sum=sum*(m-n+i)/i;
	}
	return sum;

		
	}
	public static long is(int mid,long []f,int d)
	{
		long ans=0;
		for(int i=0;i<d;i++)
		{
			
			int   k=i%mid;
			if(k>f.length-1)continue;
			ans+=f[f.length-k-1];
		}
		return ans;
	}
	 private static void bfs(int[][] st, int a, int b) {
	        Queue<int[]> q = new LinkedList<>();
	        q.add(new int[]{a, b});
	        st[a][b] = 0;
	        while (!q.isEmpty()) {
	            int[] t = q.poll();
	            int x = t[0], y = t[1];
	            for (int i = 0; i < 4; i++) {
	                int nx = x + dx[i];
	                int ny = y + dy[i];
	                if (nx <n && nx >= 0 && ny <m && ny >= 0 && c[nx][ny] != '*' && st[nx][ny] == -1) {
	                    q.add(new int[]{nx, ny});
	                    st[nx][ny] = st[x][y] + 1;
	                }
	            }
	        }
	    }
	public static boolean is(String a,String b)
	{
		for(int i=0;i<=b.length()-a.length();i++)
		{
			if(b.substring(i,i+a.length()).equals(a))
				return true;
		}
		return false;
		
	}
	public  static void dfs(int u,int k,List <Integer>[]list)
	{
		res=Math.max(res,k);
		for(int x:list [u])
		{
			boolean c=false;
			int kk=0;
			int min=Math.min(f[u], f[x]);
			for(int b:ans[min])
			{
				if(f[u]%b==0&&f[x]%b==0)
				{
					kk++;
					if(kk>=2) {
					c=true;break;
					}
					
				}
				
			}
			if(c)
				dfs(x,k+1,list);
			else dfs(x,1,list);
		}
				
			
		
		
	}
	
	
	  public static boolean is(int  n) {
		    if (n <= 3) {
		        return n > 1;
		    }
		    // 只有6x-1和6x+1的数才有可能是质数
		    if (n % 6 != 1 && n % 6 != 5) {
		        return false;
		    }
		    // 判断这些数能否被小于sqrt(n)的奇数整除
		    int sqrt = (int) Math.sqrt(n);
		    for (int i = 5; i <= sqrt; i += 6) {
		        if (n % i == 0 || n % (i + 2) == 0) {
		            return false;
		        }
		    }
		    return true;
		}


	
	
public static void dfs(int x,int y,char [][]c,int [][]v){
	if(v[x][y]!=0)
	{
		return ;
	}
	int []dx={1,-1,0,0};
	
	int []dy= {0,0,1,-1};
	
	v[x][y]=1;
	for(int i=0;i<4;i++)
	{
		int x1=x+dx[i];
		
		int y1=y+dy[i];
		if(x1<0||x1>=v.length||y1<0||y1>=v[0].length||v[x1][y1]==1||c[x1][y1]=='#')continue;
		dfs(x1,y1,c,v);
		
	}
		
		
}	


public static int find (int []father,int x) {
		if(x!=father[x])
			x=find(father,father[x]);
		return father[x];
	}
public static void union(int []father,int x,int y,int []size) {
	x=find(father,x);
	y=find(father,y);
	if(x==y)
		return ;
	if(size[x]<size[y]) {
		 int tem=x;
         x=y;
         y=tem;
	}
	father[y]=x;
	size[x]+=size[y];
return ;
}
		
					
public static void shufu(int []f) {
		for(int i=0;i<f.length;i++) {
			int k=(int)(Math.random()*(f.length));
			int t=f[k];
			
			f[k]=f[0];
			f[0]=t;
			
		}
	}
public static void shufu1(long []f) {
	for(int i=0;i<f.length;i++) {
		int k=(int)(Math.random()*(f.length));
		long t=f[k];
		f[k]=f[0];
		f[0]=t;
	}
}
public  static int  gcd(int x,int y) {
		return y==0(?)x:gcd(y,x%y);
	}
 
 
public  static int  lcm(int x,int y) {
		
		return x*y/gcd(x,y);
}
		
	
	
		
		
	
	
		
	
/*					
public static void buildertree(int k,int l,int r) {
		if(l==r)
		{
			f[k]=a[l];
			return ;
		}
		int m=l+r>>1;
		buildertree(k+k,l,m);
		buildertree(k+k+1,m+1,r);
		f[k]=	
	
	}
public static	void update(int u,int l,int r,int x,int c)
{
    if(l==x && r==x)
    {
        f[u]=c;
        return;
    }
    int mid=l+r>>1;
    if(x<=mid)update(u<<1,l,mid,x,c);
    else if(x>=mid+1)update(u<<1|1,mid+1,r,x,c);
   	f[u]=Math.max(f[u+u], f[u+u+1]);
}
	
public static int query(int k,int l,int r,int x,int y) {
		if(x==l&&y==r) {
			return f[k];
		}
		int m=l+r>>1;
		if(y<=m) {
			return query(k+k,l,m,x,y);
		}
		else if(x>m)return query(k+k+1,m+1,r,x,y);
		else  {
			int i=query(k+k,l,m,x,m),j=query(k+k+1,m+1,r,m+1,y);
		return Math.max(j, Math.max(i+j, i));
		
		}
	}
	
public static void calc(int k,int l,int r,int x,int z) {
 
			f[k]+=z;
			if(l==r) {
				return ;
			}
			int m=l+r>>1;
    		if(x<=m)
    			calc(k+k,l,m,x,z);
    		else calc(k+k+1,m+1,r,x,z);
			
			
		}
	
				
			
 
		*/
		
				
	
			
	
			
	
 
	public static class MyScanner {
	    BufferedReader br;
	    StringTokenizer st;
	 
	    public MyScanner() {
	      try {
	        final String USERDIR = System.getProperty(""user.dir"");
	        String cname = MethodHandles.lookup().lookupClass().getCanonicalName().replace("".MyScanner"", """");
	        cname = cname.lastIndexOf('.') > 0 (?) cname.substring(cname.lastIndexOf('.') + 1) : cname;
	        final File fin = new File(USERDIR + ""/io/c"" + cname.substring(1,5) + ""/"" + cname + "".in"");
	        br = new BufferedReader(new InputStreamReader(fin.exists()
	            (?) new FileInputStream(fin) : System.in));
	      } catch (Exception e) {
	        br = new BufferedReader(new InputStreamReader(System.in));
	      }
	    }
	 
	    public String next() {
	      try {
	        while (st == null || !st.hasMoreElements()) {
	          st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	      } catch (Exception e) {
	        throw new RuntimeException(e);
	      }
	    }
	 
	    public int nextInt() {
	      return Integer.parseInt(next());
	    }
	 
	    public long nextLong() {
	      return Long.parseLong(next());
	    }
	  }
	
		}"
34,D,Java,61165862,2023-03-10 20:27:11,人工智能3211江海洋,答案正确,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
//        out.flush();
        out.close();
    }

    static class TaskA {
        int[] a = {1,10,100};
        int[] f = new int[305];
        void bfs(int n,int step){
            if(step>f[n])
                return;
            f[n] = Math.min(f[n],step);
            for (int i = 0; i < 3; i++) {
                if(n-a[i]>=10){
                    bfs(n-a[i],step+1);
                }
                if(n+a[i]<=300){
                    bfs(n+a[i],step+1);
                }
            }
            bfs(300,step+1);
        }
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            for (int i = 0; i < 305; i++) {
                f[i] = 300;
            }
            f[10]=0;
            f[300]=1;
            bfs(10,0);
            int t = in.nextInt();
            while (t-->0){
                int sum = 0;
                for (int i = 0; i < 4; i++) {
                    int n = in.nextInt();
                    sum+=f[n];
//                    out.println(f[n]);
                }
                out.println(sum);
            }


        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e) {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }

    }
}
"
35,D,Java,61165870,2023-03-10 20:27:19,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>=target&&head.x-target<=100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<=target&&target-head.x<=100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>=target&&head.x-target<=300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<=target&&target-head.x<=300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>=target&&target<=40) q.offer(new good(10, head.step+1));
                if (head.x<=target&&target>=160) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
36,D,Java,61165899,2023-03-10 20:27:39,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>=target&&head.x-target<=100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<=target&&target-head.x<=100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>=target&&head.x-target<=300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<=target&&target-head.x<=300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>=target&&target<=45) q.offer(new good(10, head.step+1));
                if (head.x<=target&&target>=165) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
37,D,Java,61165933,2023-03-10 20:28:03,anguin,答案错误,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>=target&&head.x-target<=100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<=target&&target-head.x<=100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>=target&&head.x-target<=300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<=target&&target-head.x<=300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>=target&&target<=48) q.offer(new good(10, head.step+1));
                if (head.x<=target&&target>=168) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
38,D,Java,61165945,2023-03-10 20:28:12,anguin,答案错误,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>=target&&head.x-target<=100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<=target&&target-head.x<=100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>=target&&head.x-target<=300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<=target&&target-head.x<=300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>=target&&target<=48) q.offer(new good(10, head.step+1));
                if (head.x<=target&&target>=167) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
39,D,Java,61165960,2023-03-10 20:28:21,anguin,答案错误,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>=target&&head.x-target<=100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<=target&&target-head.x<=100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>=target&&head.x-target<=300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<=target&&target-head.x<=300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>=target&&target<=48) q.offer(new good(10, head.step+1));
                if (head.x<=target&&target>=166) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
40,D,Java,61165969,2023-03-10 20:28:30,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>=target&&head.x-target<=100) q.offer(new good(head.x-10, head.step+1));
                if (head.x<=target&&target-head.x<=100) q.offer(new good(head.x+10, head.step+1));
                if (head.x>=target&&head.x-target<=300) q.offer(new good(head.x-100, head.step+1));
                if (head.x<=target&&target-head.x<=300) q.offer(new good(head.x+100, head.step+1));
                if (head.x>=target&&target<=48) q.offer(new good(10, head.step+1));
                if (head.x<=target&&target>=165) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
41,D,Java,61165975,2023-03-10 20:28:34,陈力明,答案错误,"
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.invoke.MethodHandles;
import java.util.*;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
 
public class Main{
 
private static final boolean String = false;
static int []f;
//static int []f2;
static int []size;
//static int []size2;
//static int []a=new int [500001];
static int max=Integer.MAX_VALUE;

static Set<Integer>set;
static int k;
static long mod= 998244353;

static int n,m;
static int x1,y1;
 static List<Integer>[]ans;
 static char [][]c;
static	int  res=0;
 private static int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};
	public static void main(String []args) {
		MyScanner s=new MyScanner();
		PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		
		int t=s.nextInt();
		while(t-->0)
		{
			
			int ans=0;
			int a=s.nextInt();
			int b=s.nextInt();
			int c=s.nextInt();
			int d=s.nextInt();
		
         
            ans+=kk(a);
            ans+=kk(b);
            ans+=kk(c);ans+=kk(d);
			out.println(ans);
		}
		
	

	out.close();
	}
	public static int kk(int a)
	{
		   int kk=Math.abs(100-a);
            int k100=kk/100+(kk-(kk/100)*100)/10+(kk%10);
            kk=Math.abs(200-a);
            int k200=kk/100+(kk-(kk/100)*100)/10+(kk%10);
             kk=Math.abs(10-a);
            int k10=kk/100+(kk-(kk/100)*100)/10+(kk%10);
               kk=Math.abs(300-a);
            int k300=kk/100+(kk-(kk/100)*100)/10+(kk%10);
          int res=Integer.MAX_VALUE;
            res=Math.min(k10,res);
        res=Math.min(k100+2,res);
        res=Math.min(k200+2,res);
        res=Math.min(k300+1,res);
        return res;
		
		
	}
	public static boolean is(char []c)
	{
		int l=0;
		int r=c.length-1;
		while(l<r)
		{
			if(c[l]!=c[r])return false;
			l++;r--;
		}
		return true;
	}
	public static void swap (int l,int r,int []f)
	{
		if(l>=f.length||r>=f.length)return;
		int tt=f[l];
		f[l]=f[r];
		f[r]=tt;
		
	}
	public static void dfs(int u,int ans,int r,int k)
	{
		if(u>r)return;
		if(ans==1)
		{
			res++;
			res%=mod;
			return;
		}
		if(k==0)
		{
			dfs(u*3,ans-1,r,1);
			
		}
		dfs(u*2,ans-1,r,0);
		
	}
public static void reverse(int []a)
{
	int l=0,r=a.length-1;
	while(l<r)
	{
		int t=a[l];
		a[l]=a[r];
		a[r]=t;
		l++;r--;
	}
}
	public static long sum (int x,long mod)
	{
		
	long sum=1;
		for(int i = 2; i * i <= x; ++i){
			long temp = 1;
			if(x % i == 0){
				long j = i;
				while(x % i == 0){
					temp += j;
					j *= i;
					x /= i;
				}
				sum = (sum * temp) % mod;
			}

	
	}
		if(x > 1) sum = (sum * (1 + x)) % mod;
		return sum;
	}
	  public  static long Mode(long a,  long b, long mode)
	  {
	  	 long sum = 1;
	  	a = a % mode;
	   
	  	while (b > 0) {
	  		if (b % 2 == 1)		//判断是否是奇数，是奇数的话将多出来的数事先乘如sum
	  			sum = (sum * a) % mode;
	   
	  		b /= 2;
	  		a = (a * a) % mode;// 不断的两两合并再取模，减小a和b的规模
	  	}
	  	return sum;
	  }
	public static long cc(int n,int m)
	{
		long sum = 1;
	for(int i=1;i<=n; i++) {
		sum=sum*(m-n+i)/i;
	}
	return sum;

		
	}
	public static long is(int mid,long []f,int d)
	{
		long ans=0;
		for(int i=0;i<d;i++)
		{
			
			int   k=i%mid;
			if(k>f.length-1)continue;
			ans+=f[f.length-k-1];
		}
		return ans;
	}
	 private static void bfs(int[][] st, int a, int b) {
	        Queue<int[]> q = new LinkedList<>();
	        q.add(new int[]{a, b});
	        st[a][b] = 0;
	        while (!q.isEmpty()) {
	            int[] t = q.poll();
	            int x = t[0], y = t[1];
	            for (int i = 0; i < 4; i++) {
	                int nx = x + dx[i];
	                int ny = y + dy[i];
	                if (nx <n && nx >= 0 && ny <m && ny >= 0 && c[nx][ny] != '*' && st[nx][ny] == -1) {
	                    q.add(new int[]{nx, ny});
	                    st[nx][ny] = st[x][y] + 1;
	                }
	            }
	        }
	    }
	public static boolean is(String a,String b)
	{
		for(int i=0;i<=b.length()-a.length();i++)
		{
			if(b.substring(i,i+a.length()).equals(a))
				return true;
		}
		return false;
		
	}
	public  static void dfs(int u,int k,List <Integer>[]list)
	{
		res=Math.max(res,k);
		for(int x:list [u])
		{
			boolean c=false;
			int kk=0;
			int min=Math.min(f[u], f[x]);
			for(int b:ans[min])
			{
				if(f[u]%b==0&&f[x]%b==0)
				{
					kk++;
					if(kk>=2) {
					c=true;break;
					}
					
				}
				
			}
			if(c)
				dfs(x,k+1,list);
			else dfs(x,1,list);
		}
				
			
		
		
	}
	
	
	  public static boolean is(int  n) {
		    if (n <= 3) {
		        return n > 1;
		    }
		    // 只有6x-1和6x+1的数才有可能是质数
		    if (n % 6 != 1 && n % 6 != 5) {
		        return false;
		    }
		    // 判断这些数能否被小于sqrt(n)的奇数整除
		    int sqrt = (int) Math.sqrt(n);
		    for (int i = 5; i <= sqrt; i += 6) {
		        if (n % i == 0 || n % (i + 2) == 0) {
		            return false;
		        }
		    }
		    return true;
		}


	
	
public static void dfs(int x,int y,char [][]c,int [][]v){
	if(v[x][y]!=0)
	{
		return ;
	}
	int []dx={1,-1,0,0};
	
	int []dy= {0,0,1,-1};
	
	v[x][y]=1;
	for(int i=0;i<4;i++)
	{
		int x1=x+dx[i];
		
		int y1=y+dy[i];
		if(x1<0||x1>=v.length||y1<0||y1>=v[0].length||v[x1][y1]==1||c[x1][y1]=='#')continue;
		dfs(x1,y1,c,v);
		
	}
		
		
}	


public static int find (int []father,int x) {
		if(x!=father[x])
			x=find(father,father[x]);
		return father[x];
	}
public static void union(int []father,int x,int y,int []size) {
	x=find(father,x);
	y=find(father,y);
	if(x==y)
		return ;
	if(size[x]<size[y]) {
		 int tem=x;
         x=y;
         y=tem;
	}
	father[y]=x;
	size[x]+=size[y];
return ;
}
		
					
public static void shufu(int []f) {
		for(int i=0;i<f.length;i++) {
			int k=(int)(Math.random()*(f.length));
			int t=f[k];
			
			f[k]=f[0];
			f[0]=t;
			
		}
	}
public static void shufu1(long []f) {
	for(int i=0;i<f.length;i++) {
		int k=(int)(Math.random()*(f.length));
		long t=f[k];
		f[k]=f[0];
		f[0]=t;
	}
}
public  static int  gcd(int x,int y) {
		return y==0(?)x:gcd(y,x%y);
	}
 
 
public  static int  lcm(int x,int y) {
		
		return x*y/gcd(x,y);
}
		
	
	
		
		
	
	
		
	
/*					
public static void buildertree(int k,int l,int r) {
		if(l==r)
		{
			f[k]=a[l];
			return ;
		}
		int m=l+r>>1;
		buildertree(k+k,l,m);
		buildertree(k+k+1,m+1,r);
		f[k]=	
	
	}
public static	void update(int u,int l,int r,int x,int c)
{
    if(l==x && r==x)
    {
        f[u]=c;
        return;
    }
    int mid=l+r>>1;
    if(x<=mid)update(u<<1,l,mid,x,c);
    else if(x>=mid+1)update(u<<1|1,mid+1,r,x,c);
   	f[u]=Math.max(f[u+u], f[u+u+1]);
}
	
public static int query(int k,int l,int r,int x,int y) {
		if(x==l&&y==r) {
			return f[k];
		}
		int m=l+r>>1;
		if(y<=m) {
			return query(k+k,l,m,x,y);
		}
		else if(x>m)return query(k+k+1,m+1,r,x,y);
		else  {
			int i=query(k+k,l,m,x,m),j=query(k+k+1,m+1,r,m+1,y);
		return Math.max(j, Math.max(i+j, i));
		
		}
	}
	
public static void calc(int k,int l,int r,int x,int z) {
 
			f[k]+=z;
			if(l==r) {
				return ;
			}
			int m=l+r>>1;
    		if(x<=m)
    			calc(k+k,l,m,x,z);
    		else calc(k+k+1,m+1,r,x,z);
			
			
		}
	
				
			
 
		*/
		
				
	
			
	
			
	
 
	public static class MyScanner {
	    BufferedReader br;
	    StringTokenizer st;
	 
	    public MyScanner() {
	      try {
	        final String USERDIR = System.getProperty(""user.dir"");
	        String cname = MethodHandles.lookup().lookupClass().getCanonicalName().replace("".MyScanner"", """");
	        cname = cname.lastIndexOf('.') > 0 (?) cname.substring(cname.lastIndexOf('.') + 1) : cname;
	        final File fin = new File(USERDIR + ""/io/c"" + cname.substring(1,5) + ""/"" + cname + "".in"");
	        br = new BufferedReader(new InputStreamReader(fin.exists()
	            (?) new FileInputStream(fin) : System.in));
	      } catch (Exception e) {
	        br = new BufferedReader(new InputStreamReader(System.in));
	      }
	    }
	 
	    public String next() {
	      try {
	        while (st == null || !st.hasMoreElements()) {
	          st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	      } catch (Exception e) {
	        throw new RuntimeException(e);
	      }
	    }
	 
	    public int nextInt() {
	      return Integer.parseInt(next());
	    }
	 
	    public long nextLong() {
	      return Long.parseLong(next());
	    }
	  }
	
		}"
42,D,Java,61166075,2023-03-10 20:29:44,给个AC吧,运行超时,"import java.io.*;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class Main{
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static int[] dx = {0, 1, -10, -100};
    static int[] dy = {0, -1, 10, 100};
    static Set<Integer> set = new HashSet<>();

    public static void main(String[] args) throws IOException {
        int t = sc.nextInt();
        while (t-- > 0) {
            int[] a = new int[5];
            int ans = 0;

            for (int i = 1; i < a.length; i++) {
                a[i] = sc.nextInt();
                if (a[i] == 300) {
                    ans++;
                    a[i] = 10;
                }
            }
            for (int i = 1; i <= 4; i++) {
                int p = a[i];
                int n = 10;
                if (a[i] == n) continue;
                Queue<Node> q = new LinkedList<>();
                q.offer(new Node(n, 0));
                set.add(n);
                set.clear();
                t:
                while (!q.isEmpty()) {
                    Node tmp = q.poll();
                    int x = tmp.x;
                    int step = tmp.step;
                    for (int j = 1; j <= 3; j++) {
                        if (!set.contains(x + dx[j]) || !set.contains(x + dy[j])) {
                            int xx = x + dx[j];
                            int yy = x + dy[j];
                            if (xx == p || yy == p) {
                                ans += step + 1;
                                break t;
                            }
                            if (xx < 300 && xx > 10) {
                                q.offer(new Node(xx, step + 1));
                                set.add(xx);
                            }
                            if (yy < 300 && yy > 10) {
                                q.offer(new Node(yy, step + 1));
                                set.add(yy);
                            }
                        }

                    }
                    if (!set.contains(300)) {
                        set.add(300);
                        q.offer(new Node(300, step + 1));
                    }
                    if (!set.contains(10)) {
                        set.add(10);
                        q.offer(new Node(10, step + 1));
                    }
                }

            }
            out.println(ans);
        }
        out.flush();
        out.close();
    }

    static class Node {
        int x, step;

        public Node(int x, int step) {
            this.x = x;
            this.step = step;
        }
    }

    static class sc {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static long nextLong() throws IOException {
            input.nextToken();
            return (long) input.nval;
        }

    }
}
"
43,D,Java,61166290,2023-03-10 20:32:22,anguin,运行超时,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                    int y=sc.nextInt();
                    bfs(10,y);
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    public static void bfs(int n,int target)
    {
        Queue<good>q=new LinkedList<>();
        q.offer(new good(n,0));
        while (!q.isEmpty())
        {
            good head=q.poll();
            if (head.x==target)
            {
                ans+=head.step;
                return;
            }
            if (head.x<=300&&head.x>=10)
            {
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-1, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+1, head.step+1));
                if (head.x>=target&&head.x-target<=10) q.offer(new good(head.x-10, head.step+1));
                if (head.x<=target&&target-head.x<=10) q.offer(new good(head.x+10, head.step+1));
                if (head.x>=target&&head.x-target<=100) q.offer(new good(head.x-100, head.step+1));
                if (head.x<=target&&target-head.x<=100) q.offer(new good(head.x+100, head.step+1));
                if (head.x>=target&&target<=50) q.offer(new good(10, head.step+1));
                if (head.x<=target&&target>=200) q.offer(new good(300, head.step+1));
            }
        }
    }
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}
class good
{
    int x;
    int step;
    public good(int x,int step){this.step=step;this.x=x;}
}
"
44,D,Java,61166359,2023-03-10 20:33:05,给个AC吧,运行超时,"import java.io.*;
import java.math.BigInteger;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static int[] dx = {0, 1, -10, -100};
    static int[] dy = {0, -1, 10, 100};
    static Set<Integer> set = new HashSet<>();
    public static void main(String[] args) throws IOException {
        Input sc = new Input(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int[] a = new int[5];
            int ans = 0;
            for (int i = 1; i < a.length; i++) {
                a[i] = sc.nextInt();
                if (a[i] == 300) {
                    ans++;
                    a[i] = 10;
                }
            }
            for (int i = 1; i <= 4; i++) {
                int p = a[i];
                int n = 10;
                if (a[i] == n) continue;
                Queue<Node> q = new LinkedList<>();
                q.offer(new Node(n, 0));
                set.add(n);
                set.clear();
                t:
                while (!q.isEmpty()) {
                    Node tmp = q.poll();
                    int x = tmp.x;
                    int step = tmp.step;
                    for (int j = 1; j <= 3; j++) {
                        if (!set.contains(x + dx[j]) || !set.contains(x + dy[j])) {
                            int xx = x + dx[j];
                            int yy = x + dy[j];
                            if (xx == p || yy == p) {
                                ans += step + 1;
                                break t;
                            }
                            if (xx < 300 && xx > 10) {
                                q.offer(new Node(xx, step + 1));
                                set.add(xx);
                            }
                            if (yy < 300 && yy > 10) {
                                q.offer(new Node(yy, step + 1));
                                set.add(yy);
                            }
                        }
                    }
                    if (!set.contains(300)) {
                        set.add(300);
                        q.offer(new Node(300, step + 1));
                    }
                    if (!set.contains(10)) {
                        set.add(10);
                        q.offer(new Node(10, step + 1));
                    }
                }

            }
            out.println(ans);
        }
        out.flush();
        out.close();
    }

    static class Node {
        int x, step;

        public Node(int x, int step) {
            this.x = x;
            this.step = step;
        }
    }

    static class Input {

        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public Input(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                // TODO 自动生成的 catch 块
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }
    }
}
"
45,D,Java,61166429,2023-03-10 20:33:44,进不去校队的日子,答案正确,"import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner in=new Scanner(System.in);
		HashMap<Integer,Integer> az=new HashMap<Integer,Integer>();
		az.put(10,0);
		az.put(11,1);
		az.put(12,2);
		az.put(13,3);
		az.put(14,4);
		az.put(15,5);
		az.put(16,5);
		az.put(17,4);
		az.put(18,3);
		az.put(19,2);
		az.put(20,1);
		az.put(21,2);
		az.put(22,3);
		az.put(23,4);
		az.put(24,5);
		az.put(25,6);
		az.put(26,6);
		az.put(27,5);
		az.put(28,4);
		az.put(29,3);
		az.put(30,2);
		az.put(31,3);
		az.put(32,4);
		az.put(33,5);
		az.put(34,6);
		az.put(35,7);
		az.put(36,7);
		az.put(37,6);
		az.put(38,5);
		az.put(39,4);
		az.put(40,3);
		az.put(41,4);
		az.put(42,5);
		az.put(43,6);
		az.put(44,7);
		az.put(45,8);
		az.put(46,8);
		az.put(47,7);
		az.put(48,6);
		az.put(49,5);
		az.put(50,4);
		az.put(51,5);
		az.put(52,6);
		az.put(53,7);
		az.put(54,8);
		az.put(55,9);
		az.put(56,9);
		az.put(57,8);
		az.put(58,7);
		az.put(59,6);
		az.put(60,5);
		az.put(61,6);
		az.put(62,7);
		az.put(63,8);
		az.put(64,9);
		az.put(65,10);
		az.put(66,9);
		az.put(67,8);
		az.put(68,7);
		az.put(69,6);
		az.put(70,5);
		az.put(71,6);
		az.put(72,7);
		az.put(73,8);
		az.put(74,9);
		az.put(75,9);
		az.put(76,8);
		az.put(77,7);
		az.put(78,6);
		az.put(79,5);
		az.put(80,4);
		az.put(81,5);
		az.put(82,6);
		az.put(83,7);
		az.put(84,8);
		az.put(85,8);
		az.put(86,7);
		az.put(87,6);
		az.put(88,5);
		az.put(89,4);
		az.put(90,3);
		az.put(91,4);
		az.put(92,5);
		az.put(93,6);
		az.put(94,7);
		az.put(95,7);
		az.put(96,6);
		az.put(97,5);
		az.put(98,4);
		az.put(99,3);
		az.put(100,2);
		az.put(101,3);
		az.put(102,4);
		az.put(103,5);
		az.put(104,6);
		az.put(105,6);
		az.put(106,5);
		az.put(107,4);
		az.put(108,3);
		az.put(109,2);
		az.put(110,1);
		az.put(111,2);
		az.put(112,3);
		az.put(113,4);
		az.put(114,5);
		az.put(115,6);
		az.put(116,6);
		az.put(117,5);
		az.put(118,4);
		az.put(119,3);
		az.put(120,2);
		az.put(121,3);
		az.put(122,4);
		az.put(123,5);
		az.put(124,6);
		az.put(125,7);
		az.put(126,7);
		az.put(127,6);
		az.put(128,5);
		az.put(129,4);
		az.put(130,3);
		az.put(131,4);
		az.put(132,5);
		az.put(133,6);
		az.put(134,7);
		az.put(135,8);
		az.put(136,8);
		az.put(137,7);
		az.put(138,6);
		az.put(139,5);
		az.put(140,4);
		az.put(141,5);
		az.put(142,6);
		az.put(143,7);
		az.put(144,8);
		az.put(145,9);
		az.put(146,9);
		az.put(147,8);
		az.put(148,7);
		az.put(149,6);
		az.put(150,5);
		az.put(151,6);
		az.put(152,7);
		az.put(153,8);
		az.put(154,9);
		az.put(155,10);
		az.put(156,10);
		az.put(157,9);
		az.put(158,8);
		az.put(159,7);
		az.put(160,6);
		az.put(161,7);
		az.put(162,8);
		az.put(163,9);
		az.put(164,10);
		az.put(165,10);
		az.put(166,9);
		az.put(167,8);
		az.put(168,7);
		az.put(169,6);
		az.put(170,5);
		az.put(171,6);
		az.put(172,7);
		az.put(173,8);
		az.put(174,9);
		az.put(175,9);
		az.put(176,8);
		az.put(177,7);
		az.put(178,6);
		az.put(179,5);
		az.put(180,4);
		az.put(181,5);
		az.put(182,6);
		az.put(183,7);
		az.put(184,8);
		az.put(185,8);
		az.put(186,7);
		az.put(187,6);
		az.put(188,5);
		az.put(189,4);
		az.put(190,3);
		az.put(191,4);
		az.put(192,5);
		az.put(193,6);
		az.put(194,7);
		az.put(195,7);
		az.put(196,6);
		az.put(197,5);
		az.put(198,4);
		az.put(199,3);
		az.put(200,2);
		az.put(201,3);
		az.put(202,4);
		az.put(203,5);
		az.put(204,6);
		az.put(205,7);
		az.put(206,6);
		az.put(207,5);
		az.put(208,4);
		az.put(209,3);
		az.put(210,2);
		az.put(211,3);
		az.put(212,4);
		az.put(213,5);
		az.put(214,6);
		az.put(215,7);
		az.put(216,7);
		az.put(217,6);
		az.put(218,5);
		az.put(219,4);
		az.put(220,3);
		az.put(221,4);
		az.put(222,5);
		az.put(223,6);
		az.put(224,7);
		az.put(225,8);
		az.put(226,8);
		az.put(227,7);
		az.put(228,6);
		az.put(229,5);
		az.put(230,4);
		az.put(231,5);
		az.put(232,6);
		az.put(233,7);
		az.put(234,8);
		az.put(235,9);
		az.put(236,9);
		az.put(237,8);
		az.put(238,7);
		az.put(239,6);
		az.put(240,5);
		az.put(241,6);
		az.put(242,7);
		az.put(243,8);
		az.put(244,9);
		az.put(245,10);
		az.put(246,10);
		az.put(247,9);
		az.put(248,8);
		az.put(249,7);
		az.put(250,6);
		az.put(251,7);
		az.put(252,8);
		az.put(253,9);
		az.put(254,10);
		az.put(255,10);
		az.put(256,9);
		az.put(257,8);
		az.put(258,7);
		az.put(259,6);
		az.put(260,5);
		az.put(261,6);
		az.put(262,7);
		az.put(263,8);
		az.put(264,9);
		az.put(265,9);
		az.put(266,8);
		az.put(267,7);
		az.put(268,6);
		az.put(269,5);
		az.put(270,4);
		az.put(271,5);
		az.put(272,6);
		az.put(273,7);
		az.put(274,8);
		az.put(275,8);
		az.put(276,7);
		az.put(277,6);
		az.put(278,5);
		az.put(279,4);
		az.put(280,3);
		az.put(281,4);
		az.put(282,5);
		az.put(283,6);
		az.put(284,7);
		az.put(285,7);
		az.put(286,6);
		az.put(287,5);
		az.put(288,4);
		az.put(289,3);
		az.put(290,2);
		az.put(291,3);
		az.put(292,4);
		az.put(293,5);
		az.put(294,6);
		az.put(295,6);
		az.put(296,5);
		az.put(297,4);
		az.put(298,3);
		az.put(299,2);
		az.put(300,1);
		int n=in.nextInt();
		while(n-->0){
			int count=0;
		for(int x=0;x<4;x++){
			count+=az.get(in.nextInt());
		}
		System.out.println(count);
		}
	}
}
"
46,D,Java,61166598,2023-03-10 20:35:27,妄念、,答案错误,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        while (in.hasNext()) {
            int t=in.nextInt();
            for (int q=1;q<=t;q++) {
                int a=in.nextInt();
                int b=in.nextInt();
                int c=in.nextInt();
                int d=in.nextInt();
                int sum=0;
                sum+=jisuan(a);
                sum+=jisuan(b);
                sum+=jisuan(c);
                sum+=jisuan(d);
                System.out.println(sum);
            }
        }
    }

    private static int jisuan(int x) {
        int j=0;
        if(x>=250&&x<260){
            j+=6;
            x-=240;
        }else if(x>=260&&x<270){
            j+=5;
            x-=250;
        }else if(x>=270&&x<280){
            j+=4;
            x-=260;
        }else if(x>=280&&x<290){
            j+=3;
            x-=270;
        }else if(x>=290&&x<300){
            j+=2;
            x-=280;
        }
        if (x==300) j=1;
        else if (x==200)j=2;
        else if (x%100>=10&&x%100<=15)j+=x%100-10+x/100;
        else if (x%100>=16&&x%100<=19)j+=21-x%100+x/100;
        else if (x%100>=20&&x%100<=25)j+=x%100-19+x/100;
        else if (x%100>=26&&x%100<=29)j+=32-x%100+x/100;
        else if (x%100>=30&&x%100<=35)j+=x%100-28+x/100;
        else if (x%100>=36&&x%100<=39)j+=43-x%100+x/100;
        else if (x%100>=40&&x%100<=45)j+=x%100-37+x/100;
        else if (x%100>=46&&x%100<=49)j+=54-x%100+x/100;
        else if (x%100>=50&&x%100<=55)j+=x%100-46+x/100;
        else if (x%100>=56&&x%100<=59)j+=65-x%100+x/100;
        else if (x%100>=60&&x%100<=65)j+=x%100-55+x/100;
        else if (x%100>=66&&x%100<=69)j+=76-x%100+x/100;
        else if (x%100>=70&&x%100<=74)j+=5+x%10+x/100;
        else if (x%100>=75&&x%100<=79)j+=14-x%10+x/100;
        else if (x%100>=80&&x%100<=84)j+=4+x%10+x/100;
        else if (x%100>=85&&x%100<=89)j+=13-x%10+x/100;
        else if (x%100>=90&&x%100<=94)j+=3+x%10+x/100;
        else if (x%100>=95&&x%100<=99)j+=12-x%10+x/100;
        else if (x%100>=0&&x%100<=4)j+=1+x%10+x/100;
        else if (x%100>=5&&x%100<=9)j+=10-x%10+x/100;
        return j;
    }

}
"
47,D,Java,61167057,2023-03-10 20:40:12,给个AC吧,运行超时,"import java.io.*;
import java.math.BigInteger;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static int[] dx = {0, -1, -10, -100};
    static int[] dy = {0, 1, 10, 100};
    static Set<Integer> set = new HashSet<>();

    public static void main(String[] args) throws IOException {
        Input sc = new Input(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int[] a = new int[5];
            int ans = 0;
            for (int i = 1; i <= 4; i++) {
                a[i] = sc.nextInt();
                if (a[i] == 300) {
                    ans++;
                    a[i] = 10;
                }
            }
            for (int i = 1; i <= 4; i++) {
                int p = a[i];
                int n = 10;
                if (a[i] == n) continue;
                Queue<Node> q = new LinkedList<>();
                q.offer(new Node(n, 0));
                set.add(n);

                t:
                while (!q.isEmpty()) {
                    Node tmp = q.poll();
                    int x = tmp.x;
                    int step = tmp.step;
                    for (int j = 1; j <= 3; j++) {
                        if (!set.contains(x + dx[j]) || !set.contains(x + dy[j]) || (x + dx[j] < 10 && x + dy[j] > 300)) {
                            int xx = x + dx[j];
                            int yy = x + dy[j];
                            if (xx == p || yy == p) {
                                ans += step + 1;
                                break t;
                            }
                            q.offer(new Node(xx, step + 1));
                            set.add(xx);
                            q.offer(new Node(yy, step + 1));
                            set.add(yy);

                        }
                    }
                    if (!set.contains(300)) {
                        set.add(300);
                        q.offer(new Node(300, step + 1));
                    }
                    if (!set.contains(10)) {
                        set.add(10);
                        q.offer(new Node(10, step + 1));
                    }
                }
                set.clear();
            }
            out.println(ans);
        }
        out.flush();
        out.close();
    }

    static class Node {
        int x, step;

        public Node(int x, int step) {
            this.x = x;
            this.step = step;
        }
    }

    static class Input {

        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public Input(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                // TODO 自动生成的 catch 块
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }
    }
}
"
48,D,Java,61167608,2023-03-10 20:46:31,冬天的被窝,运行超时,"import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main
{
	static int sum = 0;

	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		int o = sc.nextInt();int w = 10;
		for (int p = 0; p < o; p++)
		{
			int a = sc.nextInt(), b = sc.nextInt(), c = sc.nextInt(), d = sc.nextInt();
			Queue<Integer> s = new LinkedList<>();
			HashSet<Integer> ss=new HashSet<>();
			sum = 0;
			s.offer(w);
			ss.add(w);
			pd(s,ss,a);
			s.clear();
			ss.clear();
			s.offer(w);
			ss.add(w);
			pd(s,ss,b);
			s.clear();
			ss.clear();
			s.offer(w);
			ss.add(w);
			pd(s,ss,c);
			s.clear();
			ss.clear();
			s.offer(w);
			ss.add(w);
			pd(s,ss,d);
			System.out.println(sum);
		}
	}

	private static void pd(Queue<Integer> s, HashSet<Integer> ss,int a)
	{
		loop:while (s.size() != 0)
		{
			int u = s.size();
			for (int e = 0; e < u; e++)
			{
				int t = s.poll();
				if(t==a)break loop;
				if (t < 300)
				{
					int r=ss.size();
					ss.add(t+1);
					if(ss.size()!=r)
					{
						r++;
						s.offer(t + 1);
					}
					ss.add(300);
					if(ss.size()!=r)
					{
						r++;
						s.offer(300);
					}
					if(t+10<300)
					{
						ss.add(t+10);
						if(ss.size()!=r)
						{
							r++;
							s.offer(t+10);
						}
					}
					if(t+100<300)
					{
						ss.add(t+100);
						if(ss.size()!=r)
						{
							r++;
							s.offer(t+100);
						}
					}
				}
				if (t >10)
				{
					int r=ss.size();
					ss.add(t-1);
					if(ss.size()!=r)
					{
						r++;
						s.offer(t - 1);
					}
					ss.add(10);
					if(ss.size()!=r)
					{
						r++;
						s.offer(10);
					}
					if(t-10>10)
					{
						ss.add(t-10);
						if(ss.size()!=r)
						{
							r++;
							s.offer(t-10);
						}
					}
					if(t-100>10)
					{
						ss.add(t-100);
						if(ss.size()!=r)
						{
							r++;
							s.offer(t-100);
						}
					}
				}
			}
			sum++;
		}
	}
}
"
49,D,Java,61167624,2023-03-10 20:46:38,anguin,答案正确,"import java.math.BigDecimal;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
public class Main
{
    public static void main(String[] args) throws IOException
    {
        int qwe = 1;
        while (qwe-- > 0)
        {
            solve();
        }
        out.flush();
        out.close();
    }
    //————————————————————————————————————————————————————————————————————————————
    public static int[]x={0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,5,4,3,2,1,2,3,4,5,6,6,5,4,3,2,3,4,5,6,7,7,6,5,4,3,4,5,6,7,8,8,7,6,5,4,5,6,7,8,9,9,8,7,6,5,6,7,8,9,10,9,8,7,6,5,6,7,8,9,9,8,7,6,5,4,5,6,7,8,8,7,6,5,4,3,4,5,6,7,7,6,5,4,3,2,3,4,5,6,6,5,4,3,2,1,2,3,4,5,6,6,5,4,3,2,3,4,5,6,7,7,6,5,4,3,4,5,6,7,8,8,7,6,5,4,5,6,7,8,9,9,8,7,6,5,6,7,8,9,10,10,9,8,7,6,7,8,9,10,10,9,8,7,6,5,6,7,8,9,9,8,7,6,5,4,5,6,7,8,8,7,6,5,4,3,4,5,6,7,7,6,5,4,3,2,3,4,5,6,7,6,5,4,3,2,3,4,5,6,7,7,6,5,4,3,4,5,6,7,8,8,7,6,5,4,5,6,7,8,9,9,8,7,6,5,6,7,8,9,10,10,9,8,7,6,7,8,9,10,10,9,8,7,6,5,6,7,8,9,9,8,7,6,5,4,5,6,7,8,8,7,6,5,4,3,4,5,6,7,7,6,5,4,3,2,3,4,5,6,6,5,4,3,2,1};
    public static void solve() throws IOException
    {

        //  while(sc.hasNext())
        {
            int t=sc.nextInt();
            while (t-->0)
            {
                ans=0;
                for (int i = 0; i < 4; i++)
                {
                   int y=sc.nextInt();
                   ans+=x[y];
                }
                out.println(ans);
            }
        }
    }
    public static int ans;
    static InputReader sc = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static class InputReader
    {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream)
        {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                }
                catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {return Integer.parseInt(next());}
        public long nextLong() {return Long.parseLong(next());}
        public Double nextDouble() {return Double.parseDouble(next());}
        public BigInteger nextBigInteger() {return new BigInteger(next());}
        public BigDecimal nextBigDecimal() {return new BigDecimal(next());}
    }
}"
50,D,Java,61167717,2023-03-10 20:47:37,HMETAO,答案错误,"
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1));

    }


    private static void solve(Reader sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        boolean[] visit = new boolean[301];
        visit[10] = true;
        Deque<Integer> que = new LinkedList<>();
        que.offer(10);
        int temp = 0;
        int ans = 0;
        int e = 0;
        while (!que.isEmpty()) {
            if (temp == 1) {
                que.offer(300);
            }
            int size = que.size();
            for (int i = 0; i < size; i++) {
                Integer poll = que.poll();
                if (poll == a) {
                    ans += temp;
                    e++;
                }
                if(poll == b){
                    e++;
                    ans += temp;
                }

                if(poll == c){
                    e++;
                    ans += temp;
                }

                if(poll == d){
                    e++;
                    ans += temp;
                }
                if (e == 4) {
                    println(ans);
                    return;
                }
                if (poll - 1 > 0 && !visit[poll - 1]) {
                    que.offer(poll - 1);
                }
                if (poll - 10 > 0 && !visit[poll - 10]) {
                    que.offer(poll - 10);
                }

                if (poll - 100 > 0 && !visit[poll - 100]) {
                    que.offer(poll - 100);
                }
                if (poll + 1 < 300 && !visit[poll + 1]) que.offer(poll + 1);
                if (poll + 10 < 300 && !visit[poll + 10]) que.offer(poll + 10);
                if (poll + 100 < 300 && !visit[poll + 10]) que.offer(poll + 100);
            }
            temp++;
        }
        println(ans);
    }


    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
51,D,Java,61167736,2023-03-10 20:47:50,怕黑的赖床专家在求职,运行超时,"import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main
{

	public static void main(String[] args)
	{
//System.out.println((((10L*1000L)+10L)*1000L+10L)*1000L+10L);
		Scanner s=new Scanner(System.in);
		int T=s.nextInt();
		while(T-->0)
		{
            HashMap<Long,Integer>map=new HashMap<>();

			Queue<Long>queue1=new LinkedList<Long>();
			Queue<Long>queue2=new LinkedList<Long>();
			Queue<Long>queue3=new LinkedList<Long>();
			Queue<Long>queue4=new LinkedList<Long>();
			long a=s.nextLong(),b=s.nextLong(),c=s.nextLong(),d=s.nextLong();
			map.put(10010010010L,0);
			queue1.offer(10L);
			queue2.offer(10L);
			queue3.offer(10L);
			queue4.offer(10L);

			while(!queue1.isEmpty())
			{
				long q=queue1.poll();
				long w=queue2.poll();
				long e=queue3.poll();
				long r=queue4.poll();
				if(q+1<=300&&map.get((((q+1)*1000+(w))*1000+(e))*1000+r)==null)
				{
					map.put((((q+1)*1000+(w))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q+1);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(w+1<=300&&map.get((((q)*1000+(w+1))*1000+(e))*1000+r)==null)
				{
					map.put((((q)*1000+(w+1))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w+1);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(e+1<=300&&map.get((((q)*1000+(w))*1000+(e+1))*1000+r)==null)
				{
					map.put((((q)*1000+(w))*1000+(e+1))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e+1);
					queue4.offer(r);
				}
				if(r+1<=300&&map.get((((q)*1000+(w))*1000+(e))*1000+r+1)==null)
				{
					map.put((((q)*1000+(w))*1000+(e))*1000+r+1, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r+1);
				}
//
				if(q-1>=10&&map.get((((q-1)*1000+(w))*1000+(e))*1000+r)==null)
				{
					map.put((((q-1)*1000+(w))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q-1);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(w-1>=10&&map.get((((q)*1000+(w-1))*1000+(e))*1000+r)==null)
				{
					map.put((((q)*1000+(w-1))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w-1);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(e-1>=10&&map.get((((q)*1000+(w))*1000+(e-1))*1000+r)==null)
				{
					map.put((((q)*1000+(w))*1000+(e-1))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e-1);
					queue4.offer(r);
				}
				if(r-1>=10&&map.get((((q+1)*1000+(w))*1000+(e))*1000+r+1)==null)
				{
					map.put((((q)*1000+(w))*1000+(e))*1000+r-1, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r-1);
				}
//				
				if(q+10<=300&&map.get((((q+10)*1000+(w))*1000+(e))*1000+r)==null)
				{
					map.put((((q+10)*1000+(w))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q+10);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(w+10<=300&&map.get((((q)*1000+(w+10))*1000+(e))*1000+r)==null)
				{
					map.put((((q)*1000+(w+10))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w+10);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(e+10<=300&&map.get((((q)*1000+(w))*1000+(e+10))*1000+r)==null)
				{
					map.put((((q)*1000+(w))*1000+(e+10))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e+10);
					queue4.offer(r);
				}
				if(r+10<=300&&map.get((((q)*1000+(w))*1000+(e))*1000+r+10)==null)
				{
					map.put((((q)*1000+(w))*1000+(e))*1000+r+10, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r+10);
				}

				if(q-10>=10&&map.get((((q-10)*1000+(w))*1000+(e))*1000+r)==null)
				{
					map.put((((q-10)*1000+(w))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q-10);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(w-10>=10&&map.get((((q)*1000+(w-10))*1000+(e))*1000+r)==null)
				{
					map.put((((q)*1000+(w-10))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w-10);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(e-10>=10&&map.get((((q)*1000+(w))*1000+(e-10))*1000+r)==null)
				{
					map.put((((q)*1000+(w))*1000+(e-10))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e-10);
					queue4.offer(r);
				}
				if(r-10>=10&&map.get((((q+1)*1000+(w))*1000+(e))*1000+r+10)==null)
				{
					map.put((((q)*1000+(w))*1000+(e))*1000+r-10, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r-10);
				}
//				
//				
				if(q+100<=300&&map.get((((q+100)*1000+(w))*1000+(e))*1000+r)==null)
				{
					map.put((((q+100)*1000+(w))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q+100);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(w+100<=300&&map.get((((q)*1000+(w+100))*1000+(e))*1000+r)==null)
				{
					map.put((((q)*1000+(w+100))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w+100);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(e+100<=300&&map.get((((q)*1000+(w))*1000+(e+100))*1000+r)==null)
				{
					map.put((((q)*1000+(w))*1000+(e+100))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e+100);
					queue4.offer(r);
				}
				if(r+100<=300&&map.get((((q)*1000+(w))*1000+(e))*1000+r+100)==null)
				{
					map.put((((q)*1000+(w))*1000+(e))*1000+r+100, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r+100);
				}

				if(q-100>=10&&map.get((((q-100)*1000+(w))*1000+(e))*1000+r)==null)
				{
					map.put((((q-100)*1000+(w))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q-100);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(w-100>=10&&map.get((((q)*1000+(w-100))*1000+(e))*1000+r)==null)
				{
					map.put((((q)*1000+(w-100))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w-100);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(e-100>=10&&map.get((((q)*1000+(w))*1000+(e-100))*1000+r)==null)
				{
					map.put((((q)*1000+(w))*1000+(e-100))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e-100);
					queue4.offer(r);
				}
				if(r-100>=10&&map.get((((q+1)*1000+(w))*1000+(e))*1000+r+100)==null)
				{
					map.put((((q)*1000+(w))*1000+(e))*1000+r-100, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r-100);
				}
//				
				if(q<300&&map.get((((300)*1000+(w))*1000+(e))*1000+r)==null)
				{
					map.put((((300)*1000+(w))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(300L);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(w<300&&map.get((((q)*1000+(300))*1000+(e))*1000+r)==null)
				{
					map.put((((q)*1000+(300))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(300L);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(e<300&&map.get((((q)*1000+(w))*1000+(300))*1000+r)==null)
				{
					map.put((((q)*1000+(w))*1000+(300))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(300L);
					queue4.offer(r);
				}
				if(r<300&&map.get((((q)*1000+(w))*1000+(e))*1000+300)==null)
				{
					map.put((((q)*1000+(w))*1000+(e))*1000+300, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(300L);
				}
//

				if(q>10&&map.get((((10)*1000+(w))*1000+(e))*1000+r)==null)
				{
					map.put((((10)*1000+(w))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(10l);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(w>10&&map.get((((q)*1000+(10))*1000+(e))*1000+r)==null)
				{
					map.put((((q)*1000+(10))*1000+(e))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(10l);
					queue3.offer(e);
					queue4.offer(r);
				}
				if(e>10&&map.get((((q)*1000+(w))*1000+(10))*1000+r)==null)
				{
					map.put((((q)*1000+(w))*1000+(10))*1000+r, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(10l);
					queue4.offer(r);
				}
				if(r>10&&map.get((((q+1)*1000+(w))*1000+(e))*1000+10)==null)
				{
					map.put((((q)*1000+(w))*1000+(e))*1000+10, map.get((((q)*1000+(w))*1000+(e))*1000+r)+1);
					queue1.offer(q);
					queue2.offer(w);
					queue3.offer(e);
					queue4.offer(10l);
				}
				if(map.get(((a*1000+b)*1000+c)*1000+d)!=null)break;
			}
			System.out.println(map.get(((a*1000+b)*1000+c)*1000+d));
	    }
        
		
	}

}
"
52,D,Java,61167752,2023-03-10 20:47:58,rookie1号,答案错误,"
import java.io.*;
import java.math.*;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        int T=in.nextInt();
        //int T=1;
        while(T>0){
            //String[] strs1 = re.readLine().split("" "");
            //int n=Integer.parseInt(strs1[0]);
            //String s=re.readLine();
            //char arr[]=s.toCharArray();

            //long[][] p = new long[n][2];//对 long 二维数组排序
            //Arrays.sort(p, (a, b) -> a[0] <= b[0] (?) -1 : 1);
            //Set<Integer>set=new HashSet<>();
            //Map<Long,Integer>map=new HashMap<>();
            //Map<Integer,List<Integer>>map=new HashMap<>();
            //TreeSet<Integer> set = new TreeSet<>();
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            int aa=a%10;
            int bb=b%10;
            int cc=c%10;
            int dd=d%10;
            a-=aa;
            b-=bb;
            c-=cc;
            d-=dd;
            int res=0;
            int ans=10;
            if(a>=160){
                
                if(a>=250){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            //out.println(res);

            ans=10;
            a=c;aa=cc;
            if(a>=160){
                
                if(a>=250){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }



            ans=10;
            a=d;aa=dd;
            if(a>=160){
                
                if(a>=250){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }


            ans=10;
            a=b;aa=bb;
            if(a>=160){
                
                if(a>=250){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            
            out.println(res);
            
            T--;
        }
        out.flush();
        out.close();

    }

    static class in {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static String next() throws IOException {
            input.nextToken();
            return input.sval;
        }

        public static double nextDouble() throws IOException {
            input.nextToken();
            return input.nval;
        }
    }
}"
53,D,Java,61167806,2023-03-10 20:48:30,轩辕龙儿,答案正确,"import java.io.*;
import java.util.*;

public class Main {

    static Scanner sc;
    static PrintWriter pw;

    public static void main(String[] args) throws IOException {
        sc = new Scanner(System.in);
        pw = new PrintWriter(System.out);
        solve();
        pw.close();
    }

    public static void solve() throws IOException {
        Map<Integer, Integer> map = init();
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int cnt = 0;
            for (int j = 0; j < 4; j++) {
                cnt += map.get(sc.nextInt());
            }
            pw.println(cnt);
        }
    }

    private static Map<Integer, Integer> init() {
        Map<Integer, Integer> map = new HashMap<>();
        boolean[] use = new boolean[301];
        use[10] = true;
        map.put(10, 0);
        Queue<Integer> queue = new LinkedList<>();
        queue.add(10);
        int cnt = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int num = queue.poll();
                List<Integer> list = new ArrayList<>(Arrays.asList(num - 1, num + 1, num - 10, num + 10, num - 100, num + 100, num + 300));
                for (int n : list) {
                    n = Math.min(300, n);
                    n = Math.max(n, 10);
                    if (!use[n]) {
                        map.put(n, cnt);
                        use[n] = true;
                        queue.add(n);
                    }
                }
            }
            cnt++;
        }
        return map;
    }


    static class Scanner {
        BufferedReader br;
        StringTokenizer st;

        public Scanner(InputStream s) {
            br = new BufferedReader(new InputStreamReader(s));
        }

        public Scanner(FileReader f) {
            br = new BufferedReader(f);
        }

        public String next() throws IOException {
            while (st == null || !st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            return st.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }

        public int[] nextIntArr(int n) throws IOException {
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(next());
            }
            return arr;
        }

    }
}

"
54,D,Java,61167990,2023-03-10 20:50:15,HMETAO,运行超时,"
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1));

    }


    private static void solve(Reader sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        boolean[] visit = new boolean[301];
        visit[10] = true;
        Deque<Integer> que = new LinkedList<>();
        que.offer(10);
        int temp = 0;
        int ans = 0;
        int e = 0;
        while (!que.isEmpty()) {
            if (temp == 1) {
                que.offer(300);
            }
            int size = que.size();
            for (int i = 0; i < size; i++) {
                Integer poll = que.poll();
                if (poll == a) {
                    ans += temp;
                    e++;
                }
                if (poll == b) {
                    e++;
                    ans += temp;
                }
                if (poll == c) {
                    e++;
                    ans += temp;
                }
                if (poll == d) {
                    e++;
                    ans += temp;
                }
                if (e == 4) {
                    println(ans);
                    return;
                }
                if (poll - 1 > 0 && !visit[poll - 1]) {
                    que.offer(poll - 1);
                    visit[poll - 1] = true;
                }
                if (poll - 10 > 0 && !visit[poll - 10]) {
                    que.offer(poll - 10);
                    visit[poll - 10] = true;

                }
                if (poll - 100 > 0 && !visit[poll - 100]) {
                    que.offer(poll - 100);
                    visit[poll - 100] = true;

                }
                if (poll + 1 < 300 && !visit[poll + 1]) {
                    que.offer(poll + 1);
                    visit[poll + 1] = true;

                }
                if (poll + 10 < 300 && !visit[poll + 10]) {
                    que.offer(poll + 10);
                    visit[poll + 10] = true;

                }
                if (poll + 100 < 300 && !visit[poll + 100]) {
                    que.offer(poll + 100);
                    visit[poll + 100] = true;
                }
            }
            temp++;
        }
        println(ans);
    }


    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
55,D,Java,61168066,2023-03-10 20:51:04,牛客马小飞,答案错误,"

import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner sca = new Scanner(System.in);
		int t = sca.nextInt();
		int a,b,c,d,sum=0;
		jisuan j=new jisuan();
		while(t!=0) {
			sum=0;
			a=sca.nextInt();
			b=sca.nextInt();
			c=sca.nextInt();
			d=sca.nextInt();
			sum+=j.jisuan1(a);
			sum+=j.jisuan1(b);
			sum+=j.jisuan1(c);
			sum+=j.jisuan1(d);
			System.out.println(sum);
			t--;
		}
		sca.close();
	}
	
}

class jisuan{
	public int jisuan1(int x) {
		int s=0;
		if(x>=256) {
			x=300-x;
			s=1;
			s+=((x/10)+(x%10));
		return s;
		}
		
		if(x>10&&x<=65) {
			x-=10;
			s+=((x/10)+(x%10));
			return s;
		}
		
		if(x>=66&&x<=155) {
			x=110-x;
			s=1;
			if(x<0) {
				x=-x;
			}
			if(x<=9) {
				s+=x;
				return s;
			}else {
				s+=((x/10)+(x%10));
				return s;
			}
							
			
		}
		
		if(x>=156&&x<=255) {
			x=200-x;
			s=2;
				
			if(x<=9) {
				s+=x;
				return s;
			}else {
				s+=((x/10)+(x%10));
				return s;
			}
		
		
		}
		return 0;
	}
}

"
56,D,Java,61168088,2023-03-10 20:51:15,EGOIST9029,答案错误,"import java.io.*;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.*;

public class Main{
	public static PrintWriter out = new PrintWriter(System.out);
    public static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    public static void main(String[] args)throws Exception {
        int t = Integer.parseInt(reader.readLine());
        for(int i = 0;i<t;i++) {
        	String[] strings = reader.readLine().split("" "");
        	int ans = 0;
        	for(int j = 0;j<4;j++) {
        		int x = Integer.parseInt(strings[j]);
        		ans+= Math.min(f(10, x),1+f(300, x));
        	}
        	out.println(ans);
        }
        out.close();
    }
    
    public static int f(int t,int x) {
		int ans = 0;
    	while(t!=x) {
    		while(Math.abs(t+100-x)<Math.abs(t-x)) {
    			t+=100;
    			ans++;
    		}
    		while(Math.abs(t-100-x)<Math.abs(t-x)) {
    			t-=100;
    			ans++;
    		}
    		while(Math.abs(t+10-x)<Math.abs(t-x)) {
    			t+=10;
    			ans++;
    		}
    		while(Math.abs(t-10-x)<Math.abs(t-x)){
    			t-=10;
    			ans++;
    		}
    		while(Math.abs(t+1-x)<Math.abs(t-x)) {
    			t+=1;
    			ans++;
    		}
    		while(Math.abs(t-1-x)<Math.abs(t-x)) {
    			t-=1;
    			ans++;
    		}
        }
		return ans;
	}
}"
57,D,Java,61168109,2023-03-10 20:51:30,牛客马小飞,答案错误,"

import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner sca = new Scanner(System.in);
		int t = sca.nextInt();
		int a,b,c,d,sum=0;
		jisuan j=new jisuan();
		while(t!=0) {
			sum=0;
			a=sca.nextInt();
			b=sca.nextInt();
			c=sca.nextInt();
			d=sca.nextInt();
			sum+=j.jisuan1(a);
			sum+=j.jisuan1(b);
			sum+=j.jisuan1(c);
			sum+=j.jisuan1(d);
			System.out.println(sum);
			t--;
		}
		sca.close();
	}
	
}

class jisuan{
	public int jisuan1(int x) {
		int s=0;
		if(x>=256) {
			x=300-x;
			s=1;
			s+=((x/10)+(x%10));
		return s;
		}
		
		if(x>10&&x<=65) {
			x-=10;
			s+=((x/10)+(x%10));
			return s;
		}
		
		if(x>=66&&x<=155) {
			x=110-x;
			s=1;
			if(x<0) {
				x=-x;
			}
			if(x<=9) {
				s+=x;
				return s;
			}else {
				s+=((x/10)+(x%10));
				return s;
			}
							
			
		}
		
		if(x>=156&&x<=255) {
			x=200-x;
			s=2;
			if(x<0) {
				x=-x;
			}	
			if(x<=9) {
				s+=x;
				return s;
			}else {
				s+=((x/10)+(x%10));
				return s;
			}
		
		
		}
		return 0;
	}
}

"
58,D,Java,61168119,2023-03-10 20:51:34,HMETAO,运行超时,"
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1));

    }


    private static void solve(Reader sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        boolean[] visit = new boolean[301];
        visit[10] = true;
        Deque<Integer> que = new LinkedList<>();
        que.offer(10);
        int temp = 0;
        int ans = 0;
        int e = 0;
        while (!que.isEmpty()) {
            if (temp == 1) {
                que.offer(300);
            }
            int size = que.size();
            for (int i = 0; i < size; i++) {
                Integer poll = que.poll();
                if (poll == a) {
                    ans += temp;
                    e++;
                }
                if (poll == b) {
                    e++;
                    ans += temp;
                }
                if (poll == c) {
                    e++;
                    ans += temp;
                }
                if (poll == d) {
                    e++;
                    ans += temp;
                }
                if (e == 4) {
                    println(ans);
                    return;
                }
                if (poll - 1 > 0 && !visit[poll - 1]) {
                    que.offer(poll - 1);
                    visit[poll - 1] = true;
                }
                if (poll - 10 > 0 && !visit[poll - 10]) {
                    que.offer(poll - 10);
                    visit[poll - 10] = true;

                }
                if (poll - 100 > 0 && !visit[poll - 100]) {
                    que.offer(poll - 100);
                    visit[poll - 100] = true;

                }
                if (poll + 1 < 300 && !visit[poll + 1]) {
                    que.offer(poll + 1);
                    visit[poll + 1] = true;

                }
                if (poll + 10 < 300 && !visit[poll + 10]) {
                    que.offer(poll + 10);
                    visit[poll + 10] = true;

                }
                if (poll + 100 < 300 && !visit[poll + 100]) {
                    que.offer(poll + 100);
                    visit[poll + 100] = true;
                }
            }
            temp++;
        }
        println(ans);
    }


    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
59,D,Java,61168183,2023-03-10 20:52:06,HMETAO,运行超时,"
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1));

    }


    private static void solve(Reader sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        boolean[] visit = new boolean[301];
        visit[10] = true;
        Deque<Integer> que = new LinkedList<>();
        que.offer(10);
        int temp = 0;
        int ans = 0;
        int e = 0;
        while (!que.isEmpty()) {
            if (temp == 1) {
                que.offer(300);
            }
            int size = que.size();
            for (int i = 0; i < size; i++) {
                Integer poll = que.poll();
                if (poll == a) {
                    ans += temp;
                    e++;
                }
                if (poll == b) {
                    e++;
                    ans += temp;
                }
                if (poll == c) {
                    e++;
                    ans += temp;
                }
                if (poll == d) {
                    e++;
                    ans += temp;
                }
                if (e == 4) {
                    println(ans);
                    return;
                }
                if (poll - 1 > 0 && !visit[poll - 1]) {
                    que.offer(poll - 1);
                    visit[poll - 1] = true;
                }
                if (poll - 10 > 0 && !visit[poll - 10]) {
                    que.offer(poll - 10);
                    visit[poll - 10] = true;

                }
                if (poll - 100 > 0 && !visit[poll - 100]) {
                    que.offer(poll - 100);
                    visit[poll - 100] = true;

                }
                if (poll + 1 < 300 && !visit[poll + 1]) {
                    que.offer(poll + 1);
                    visit[poll + 1] = true;

                }
                if (poll + 10 < 300 && !visit[poll + 10]) {
                    que.offer(poll + 10);
                    visit[poll + 10] = true;

                }
                if (poll + 100 < 300 && !visit[poll + 100]) {
                    que.offer(poll + 100);
                    visit[poll + 100] = true;
                }
            }
            temp++;
        }
        println(ans);
    }


    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
60,D,Java,61168248,2023-03-10 20:52:48,HMETAO,运行超时,"
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1));

    }


    private static void solve(Reader sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        boolean[] visit = new boolean[301];
        visit[10] = true;
        Deque<Integer> que = new LinkedList<>();
        que.offer(10);
        int temp = 0;
        int ans = 0;
        int e = 0;
        while (!que.isEmpty()) {
            if (temp == 1) {
                que.offer(300);
            }
            int size = que.size();
            for (int i = 0; i < size; i++) {
                Integer poll = que.poll();
                if (poll == a) {
                    ans += temp;
                    e++;
                }
                if (poll == b) {
                    e++;
                    ans += temp;
                }
                if (poll == c) {
                    e++;
                    ans += temp;
                }
                if (poll == d) {
                    e++;
                    ans += temp;
                }
                if (e == 4) {
                    println(ans);
                    return;
                }
                if (poll - 1 > 0 && !visit[poll - 1]) {
                    que.offer(poll - 1);
                    visit[poll - 1] = true;
                }
                if (poll - 10 > 0 && !visit[poll - 10]) {
                    que.offer(poll - 10);
                    visit[poll - 10] = true;

                }
                if (poll - 100 > 0 && !visit[poll - 100]) {
                    que.offer(poll - 100);
                    visit[poll - 100] = true;

                }
                if (poll + 1 < 300 && !visit[poll + 1]) {
                    que.offer(poll + 1);
                    visit[poll + 1] = true;

                }
                if (poll + 10 < 300 && !visit[poll + 10]) {
                    que.offer(poll + 10);
                    visit[poll + 10] = true;

                }
                if (poll + 100 < 300 && !visit[poll + 100]) {
                    que.offer(poll + 100);
                    visit[poll + 100] = true;
                }
            }
            temp++;
        }
        println(ans);
    }


    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
61,D,Java,61168320,2023-03-10 20:53:29,HMETAO,运行超时,"
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();
    static boolean[] visit = new boolean[301];

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1));

    }


    private static void solve(Reader sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        Arrays.fill(visit, false);
        visit[10] = true;
        Deque<Integer> que = new LinkedList<>();
        que.offer(10);
        int temp = 0;
        int ans = 0;
        int e = 0;
        while (!que.isEmpty()) {
            if (temp == 1) {
                que.offer(300);
            }
            int size = que.size();
            for (int i = 0; i < size; i++) {
                Integer poll = que.poll();
                if (poll == a) {
                    ans += temp;
                    e++;
                }
                if (poll == b) {
                    e++;
                    ans += temp;
                }
                if (poll == c) {
                    e++;
                    ans += temp;
                }
                if (poll == d) {
                    e++;
                    ans += temp;
                }
                if (e == 4) {
                    println(ans);
                    return;
                }
                if (poll - 1 > 0 && !visit[poll - 1]) {
                    que.offer(poll - 1);
                    visit[poll - 1] = true;
                }
                if (poll - 10 > 0 && !visit[poll - 10]) {
                    que.offer(poll - 10);
                    visit[poll - 10] = true;

                }
                if (poll - 100 > 0 && !visit[poll - 100]) {
                    que.offer(poll - 100);
                    visit[poll - 100] = true;

                }
                if (poll + 1 < 300 && !visit[poll + 1]) {
                    que.offer(poll + 1);
                    visit[poll + 1] = true;
                }
                if (poll + 10 < 300 && !visit[poll + 10]) {
                    que.offer(poll + 10);
                    visit[poll + 10] = true;
                }
                if (poll + 100 < 300 && !visit[poll + 100]) {
                    que.offer(poll + 100);
                    visit[poll + 100] = true;
                }
            }
            temp++;
        }
        println(ans);
    }


    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
62,D,Java,61168346,2023-03-10 20:53:48,rookie1号,答案错误,"
import java.io.*;
import java.math.*;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        int T=in.nextInt();
        //int T=1;
        while(T>0){
            //String[] strs1 = re.readLine().split("" "");
            //int n=Integer.parseInt(strs1[0]);
            //String s=re.readLine();
            //char arr[]=s.toCharArray();

            //long[][] p = new long[n][2];//对 long 二维数组排序
            //Arrays.sort(p, (a, b) -> a[0] <= b[0] (?) -1 : 1);
            //Set<Integer>set=new HashSet<>();
            //Map<Long,Integer>map=new HashMap<>();
            //Map<Integer,List<Integer>>map=new HashMap<>();
            //TreeSet<Integer> set = new TreeSet<>();
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            int aa=a%10;
            int bb=b%10;
            int cc=c%10;
            int dd=d%10;
            a-=aa;
            b-=bb;
            c-=cc;
            d-=dd;
            int res=0;
            int ans=10;
            if(a>=160){
                
                if(a>=250){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            //out.println(res);

            ans=10;
            a=c;aa=cc;
            if(a>=160){
                
                if(a>=250){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }



            ans=10;
            a=d;aa=dd;
            if(a>=160){
                
                if(a>=250){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }


            ans=10;
            a=b;aa=bb;
            if(a>=160){
                
                if(a>=250){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            
            out.println(res);
            
            T--;
        }
        out.flush();
        out.close();

    }

    static class in {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static String next() throws IOException {
            input.nextToken();
            return input.sval;
        }

        public static double nextDouble() throws IOException {
            input.nextToken();
            return input.nval;
        }
    }
}"
63,D,Java,61168369,2023-03-10 20:53:59,M1ss1n9h,答案错误,"import java.util.*;
import java.io.*;
public class Main {
    static int T,a,b,c,d;
    static boolean[]use1,use2,use3,use4;
    static StreamTokenizer st=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static PrintWriter pw=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    static Scanner sc=new Scanner(System.in);
    public static void main(String[] args) throws IOException {
        System.out.println(""草拟吗的傻逼 我把你妈妈挂在你妈妈的臭B里 13点出题人"");
    }
}
"
64,D,Java,61168381,2023-03-10 20:54:05,HMETAO,运行超时,"
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();
    static boolean[] visit = new boolean[301];

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1));

    }


    private static void solve(Reader sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        Arrays.fill(visit, false);
        visit[10] = true;
        Deque<Integer> que = new LinkedList<>();
        que.offer(10);
        int temp = 0;
        int ans = 0;
        int e = 0;
        while (!que.isEmpty()) {
            if (temp == 1) {
                que.offer(300);
            }
            int size = que.size();
            for (int i = 0; i < size; i++) {
                Integer poll = que.poll();
                if (poll == a) {
                    ans += temp;
                    e++;
                }
                if (poll == b) {
                    e++;
                    ans += temp;
                }
                if (poll == c) {
                    e++;
                    ans += temp;
                }
                if (poll == d) {
                    e++;
                    ans += temp;
                }
                if (e == 4) {
                    println(ans);
                    return;
                }
                if (poll - 1 > 0 && !visit[poll - 1]) {
                    que.offer(poll - 1);
                    visit[poll - 1] = true;
                }
                if (poll - 10 > 0 && !visit[poll - 10]) {
                    que.offer(poll - 10);
                    visit[poll - 10] = true;

                }
                if (poll - 100 > 0 && !visit[poll - 100]) {
                    que.offer(poll - 100);
                    visit[poll - 100] = true;

                }
                if (poll + 1 < 300 && !visit[poll + 1]) {
                    que.offer(poll + 1);
                    visit[poll + 1] = true;
                }
                if (poll + 10 < 300 && !visit[poll + 10]) {
                    que.offer(poll + 10);
                    visit[poll + 10] = true;
                }
                if (poll + 100 < 300 && !visit[poll + 100]) {
                    que.offer(poll + 100);
                    visit[poll + 100] = true;
                }
            }
            temp++;
        }
        println(ans);
    }


    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
65,D,Java,61168454,2023-03-10 20:54:37,HMETAO,答案正确,"
import java.io.*;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();
    static boolean[] visit = new boolean[301];

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        System.out.println(sb.deleteCharAt(sb.length() - 1));

    }


    private static void solve(Reader sc) {
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        Arrays.fill(visit, false);
        visit[10] = true;
        Deque<Integer> que = new LinkedList<>();
        que.offer(10);
        int temp = 0;
        int ans = 0;
        int e = 0;
        while (!que.isEmpty()) {
            if (temp == 1) {
                que.offer(300);
            }
            int size = que.size();
            for (int i = 0; i < size; i++) {
                int poll = que.poll();
                if (poll == a) {
                    ans += temp;
                    e++;
                }
                if (poll == b) {
                    e++;
                    ans += temp;
                }
                if (poll == c) {
                    e++;
                    ans += temp;
                }
                if (poll == d) {
                    e++;
                    ans += temp;
                }
                if (e == 4) {
                    println(ans);
                    return;
                }
                if (poll - 1 > 0 && !visit[poll - 1]) {
                    que.offer(poll - 1);
                    visit[poll - 1] = true;
                }
                if (poll - 10 > 0 && !visit[poll - 10]) {
                    que.offer(poll - 10);
                    visit[poll - 10] = true;

                }
                if (poll - 100 > 0 && !visit[poll - 100]) {
                    que.offer(poll - 100);
                    visit[poll - 100] = true;

                }
                if (poll + 1 < 300 && !visit[poll + 1]) {
                    que.offer(poll + 1);
                    visit[poll + 1] = true;
                }
                if (poll + 10 < 300 && !visit[poll + 10]) {
                    que.offer(poll + 10);
                    visit[poll + 10] = true;
                }
                if (poll + 100 < 300 && !visit[poll + 100]) {
                    que.offer(poll + 100);
                    visit[poll + 100] = true;
                }
            }
            temp++;
        }
        println(ans);
    }


    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
66,D,Java,61168496,2023-03-10 20:54:59,妄念、,答案错误,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        while (in.hasNext()) {
            int t=in.nextInt();
            for (int q=1;q<=t;q++) {
                int a=in.nextInt();
                int b=in.nextInt();
                int c=in.nextInt();
                int d=in.nextInt();
                int sum=0;
                sum+=jisuan(a);
                System.out.println(jisuan(a));
                sum+=jisuan(b);
                System.out.println(jisuan(b));
                sum+=jisuan(c);
                System.out.println(jisuan(c));
                sum+=jisuan(d);
                System.out.println(jisuan(d));
                System.out.println(sum);
            }
        }
    }

    private static int jisuan(int x) {
        int j=0;
        if(x>=250&&x<260){
            j+=4;
            x-=150;
        }else if(x>=260&&x<270){
            j+=3;
            x-=160;
        }else if(x>=270&&x<280){
            j+=2;
            x-=170;
        }else if(x>=280&&x<290){
            j+=1;
            x-=180;
        }else if(x>=290&&x<300){
            x-=190;
        }
        if (x==300) j=1;
        else if (x==200)j=2;
        else if (x%100>=10&&x%100<=15)j+=x%100-10+x/100;
        else if (x%100>=16&&x%100<=19)j+=21-x%100+x/100;
        else if (x%100>=20&&x%100<=25)j+=x%100-19+x/100;
        else if (x%100>=26&&x%100<=29)j+=32-x%100+x/100;
        else if (x%100>=30&&x%100<=35)j+=x%100-28+x/100;
        else if (x%100>=36&&x%100<=39)j+=43-x%100+x/100;
        else if (x%100>=40&&x%100<=45)j+=x%100-37+x/100;
        else if (x%100>=46&&x%100<=49)j+=54-x%100+x/100;
        else if (x%100>=50&&x%100<=55)j+=x%100-46+x/100;
        else if (x%100>=56&&x%100<=59)j+=65-x%100+x/100;
        else if (x%100>=60&&x%100<=65)j+=x%100-55+x/100;
        else if (x%100>=66&&x%100<=69)j+=76-x%100+x/100;
        else if (x%100>=70&&x%100<=74)j+=5+x%10+x/100;
        else if (x%100>=75&&x%100<=79)j+=14-x%10+x/100;
        else if (x%100>=80&&x%100<=84)j+=4+x%10+x/100;
        else if (x%100>=85&&x%100<=89)j+=13-x%10+x/100;
        else if (x%100>=90&&x%100<=94)j+=3+x%10+x/100;
        else if (x%100>=95&&x%100<=99)j+=12-x%10+x/100;
        else if (x%100>=0&&x%100<=4)j+=1+x%10+x/100;
        else if (x%100>=5&&x%100<=9)j+=10-x%10+x/100;
        return j;
    }

}

"
67,D,Java,61168657,2023-03-10 20:56:15,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    public static void main(String[] args) {
       int t=sc.nextInt();
       //int[]
       while (t-->0){
           int ans=0;
           for (int i=1;i<=4;i++){
               int x= sc.nextInt();
               if (x==10) continue;
               int cnt=Math.min(300-x,Math.min(Math.abs(210-x),Math.abs(110-x)));
               if (cnt>Math.abs(10-x)) cnt=Math.abs(10-x);
               else ans++;
               ans+=(cnt/10);
               cnt%=10;
               ans+=(cnt<=5(?)cnt:10-cnt+1);
           }
           out.println(ans);
       }
        out.flush();
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }
        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
68,D,Java,61168684,2023-03-10 20:56:28,牛客马小飞,答案错误,"
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner sca = new Scanner(System.in);
		int t = sca.nextInt();
		int a,b,c,d,sum=0;
		jisuan j=new jisuan();
		while(t!=0) {
			sum=0;
			a=sca.nextInt();
			b=sca.nextInt();
			c=sca.nextInt();
			d=sca.nextInt();
			sum+=j.jisuan1(a);
			sum+=j.jisuan1(b);
			sum+=j.jisuan1(c);
			sum+=j.jisuan1(d);
			System.out.println(sum);
			t--;
		}
		sca.close();
	}
	
}

class jisuan{
	public int jisuan1(int x) {
		int s=0;
		if(x>=255) {
			x=300-x;
			s=1;
			s+=((x/10)+(x%10));
		return s;
		}
		
		if(x>10&&x<=64) {
			x-=10;
			s+=((x/10)+(x%10));
			return s;
		}
		
		if(x>=65&&x<=154) {
			x=110-x;
			s=1;
			if(x<0) {
				x=-x;
			}
			if(x<=9) {
				s+=x;
				return s;
			}else {
				s+=((x/10)+(x%10));
				return s;
			}
							
			
		}
		
		if(x>=155&&x<=205) {
			x=200-x;
			s=2;
			if(x<0) {
				x=-x;
			}
			if(x<=9) {
				s+=x;
				return s;
			}else {
				s+=((x/10)+(x%10));
				return s;
			}
		
		
		}
		
		if(x>=206&&x<=254) {
			x=210-x;
			s=2;
			if(x<0) {
				x=-x;
			}
			if(x<=9) {
				s+=x;
				return s;
			}else {
				s+=((x/10)+(x%10));
				return s;
			}
			
		}
		return 0;
	}
}

"
69,D,Java,61168802,2023-03-10 20:57:26,EGOIST9029,答案错误,"import java.io.*;

public class Main{
	public static PrintWriter out = new PrintWriter(System.out);
    public static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    public static void main(String[] args)throws Exception {
        int t = Integer.parseInt(reader.readLine());
        int[] ans = new int[301];
        for(int i = 10;i<301;i++) {
        	ans[i] = Math.min(f(10, i),1+f(300, i));
        }
        for(int i = 0;i<t;i++) {
        	String[] strings = reader.readLine().split("" "");
        	int sum = 0;
        	for(int j = 0;j<4;j++) {
        		int x = Integer.parseInt(strings[j]);
        		sum+=ans[x];
        	}
        	out.println(sum);
        }
        out.close();
    }
    
    public static int f(int t,int x) {
		int ans = 0;
    	while(t!=x) {
    		while(Math.abs(t+100-x)<Math.abs(t-x)) {
    			t+=100;
    			ans++;
    		}
    		while(Math.abs(t-100-x)<Math.abs(t-x)) {
    			t-=100;
    			ans++;
    		}
    		while(Math.abs(t+10-x)<Math.abs(t-x)) {
    			t+=10;
    			ans++;
    		}
    		while(Math.abs(t-10-x)<Math.abs(t-x)){
    			t-=10;
    			ans++;
    		}
    		while(Math.abs(t+1-x)<Math.abs(t-x)) {
    			t+=1;
    			ans++;
    		}
    		while(Math.abs(t-1-x)<Math.abs(t-x)) {
    			t-=1;
    			ans++;
    		}
        }
		return ans;
	}
}"
70,D,Java,61168918,2023-03-10 20:58:21,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    public static void main(String[] args) {
       int t=sc.nextInt();
       //int[]
       while (t-->0){
           int ans=0;
           for (int i=1;i<=4;i++){
               int x= sc.nextInt();
               if (x==10) continue;
               int cnt=Math.min(300-x,Math.min(Math.abs(210-x),Math.abs(110-x)));
               if (cnt>Math.abs(10-x)) cnt=Math.abs(10-x);
               else ans++;
               ans+=(cnt/10);
               cnt%=10;
               ans+=(cnt<=5(?)cnt:10-cnt);
           }
           out.println(ans);
       }
        out.flush();
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }
        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
71,D,Java,61169114,2023-03-10 20:59:39,rookie1号,答案错误,"
import java.io.*;
import java.math.*;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        int T=in.nextInt();
        //int T=1;
        while(T>0){
            //String[] strs1 = re.readLine().split("" "");
            //int n=Integer.parseInt(strs1[0]);
            //String s=re.readLine();
            //char arr[]=s.toCharArray();

            //long[][] p = new long[n][2];//对 long 二维数组排序
            //Arrays.sort(p, (a, b) -> a[0] <= b[0] (?) -1 : 1);
            //Set<Integer>set=new HashSet<>();
            //Map<Long,Integer>map=new HashMap<>();
            //Map<Integer,List<Integer>>map=new HashMap<>();
            //TreeSet<Integer> set = new TreeSet<>();
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            int aa=a%10;
            int bb=b%10;
            int cc=c%10;
            int dd=d%10;
            a-=aa;
            b-=bb;
            c-=cc;
            d-=dd;
            int res=0;
            int ans=10;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            //out.println(res);

            ans=10;
            a=c;aa=cc;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }



            ans=10;
            a=d;aa=dd;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }


            ans=10;
            a=b;aa=bb;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            
            out.println(res);
            
            T--;
        }
        out.flush();
        out.close();

    }

    static class in {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static String next() throws IOException {
            input.nextToken();
            return input.sval;
        }

        public static double nextDouble() throws IOException {
            input.nextToken();
            return input.nval;
        }
    }
}"
72,D,Java,61169130,2023-03-10 20:59:45,求你了教我剪枝,答案错误,"import java.io.*;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    static class Task{
        int a;
        int b;
        int c;
        int d;
        int step;
        public Task(){}
        public  Task(int a,int b,int c,int d,int step){
            this.a=a;
            this.b=b;
            this.c=c;
            this.d=d;
            this.step=step;
        }
    }
    static boolean w[],e[],r[],t[];
    static int a,b,c,d;
    static StreamTokenizer st=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static PrintWriter out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    public static void main(String[] args) throws IOException {
        int n=nextInt();
        for (int i = 0; i < n; i++) {
             a=nextInt();
             b=nextInt();
             c=nextInt();
             d=nextInt();
            w=new boolean[301];
            e=new boolean[301];
            r=new boolean[301];
            t=new boolean[301];
            int arr[]=new int[4];
            arr[0]=bfs(a);
            arr[1]=bfs(b);
            arr[2]=bfs(c);
            arr[3]=bfs(d);
            Arrays.sort(arr);
            System.out.println(arr[3]+arr[2]+arr[1]+arr[0]);
        }

    }

    private static int bfs(int n) {
        Queue<Task> q=new LinkedList<>();
        q.offer(new Task(10,10,10,10,0));
        while (!q.isEmpty()){
            int aa=q.peek().a;
            int bb=q.peek().b;
            int cc=q.peek().c;
            int dd=q.peek().d;
            int step=q.peek().step;
            q.poll();
            if(n==a&&w[aa]){
                q.poll();
            }
            if(n==b&&e[bb]){
                q.poll();
            }
            if(n==c&&r[cc]){
                q.poll();
            }
            if(n==d&&t[dd]){
                q.poll();
            }
            if (n==a&&aa==n){
                return step;
            }
            w[aa]=true;e[bb]=true;r[cc]=true;
            t[dd]=true;
            if (n==b&&bb==n){
                return step;
            }
            if (n==c&&cc==n){
                return step;
            }
            if (n==d&&dd==n){
                return step;
            }
            if (n==a) {
                q.offer(new Task(Math.max(aa - 1, 10), bb, cc, dd, step + 1));
                q.offer(new Task(Math.min(aa + 1, 300), bb, cc, dd, step + 1));
                q.offer(new Task(Math.min(aa + 10, 300), bb, cc, dd, step + 1));
                q.offer(new Task(Math.max(aa - 10, 10), bb, cc, dd, step + 1));
                q.offer(new Task(Math.max(aa - 100, 10), bb, cc, dd, step + 1));
                q.offer(new Task(Math.min(aa + 100, 300), bb, cc, dd, step + 1));
                q.offer(new Task(300, bb, cc, dd, step + 1));
                q.offer(new Task(10, bb, cc, dd, step + 1));
            }
            if (n==b) {
                q.offer(new Task(aa, Math.max(bb - 1, 10), cc, dd, step + 1));
                q.offer(new Task(aa, Math.min(bb + 1, 300), cc, dd, step + 1));
                q.offer(new Task(aa, Math.min(bb + 10, 300), cc, dd, step + 1));
                q.offer(new Task(aa, Math.max(bb - 10, 10), cc, dd, step + 1));
                q.offer(new Task(aa, Math.max(bb - 100, 10), cc, dd, step + 1));
                q.offer(new Task(aa, Math.min(bb + 100, 300), cc, dd, step + 1));
                q.offer(new Task(aa, 300, cc, dd, step + 1));
                q.offer(new Task(aa, 10, cc, dd, step + 1));
            }
            if (n==c) {
                q.offer(new Task(aa, bb, Math.max(cc - 1, 10), dd, step + 1));
                q.offer(new Task(aa, bb, Math.min(cc + 1, 300), dd, step + 1));
                q.offer(new Task(aa, bb, Math.min(cc + 10, 300), dd, step + 1));
                q.offer(new Task(aa, bb, Math.max(cc - 10, 10), dd, step + 1));
                q.offer(new Task(aa, bb, Math.max(cc - 100, 10), dd, step + 1));
                q.offer(new Task(aa, bb, Math.min(cc + 100, 300), dd, step + 1));
                q.offer(new Task(aa, bb, 300, dd, step + 1));
                q.offer(new Task(aa, bb, 10, dd, step + 1));
            }
            if (n==d) {
                q.offer(new Task(aa, bb, cc, Math.max(dd - 1, 10), step + 1));
                q.offer(new Task(aa, bb, cc, Math.min(dd + 1, 300), step + 1));
                q.offer(new Task(aa, bb, cc, Math.min(dd + 10, 300), step + 1));
                q.offer(new Task(aa, bb, cc, Math.max(dd - 10, 10), step + 1));
                q.offer(new Task(aa, bb, cc, Math.max(dd - 100, 10), step + 1));
                q.offer(new Task(aa, bb, cc, Math.min(dd + 100, 300), step + 1));
                q.offer(new Task(aa, bb, cc, 300, step + 1));
                q.offer(new Task(aa, bb, cc, 10, step + 1));
            }
        }return 0;
    }

    private static int nextInt() throws IOException {
        st.nextToken();
        return (int) st.nval;
    }
}
"
73,D,Java,61169205,2023-03-10 21:00:07,求你了教我剪枝,答案错误,"import java.io.*;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    static class Task{
        int a;
        int b;
        int c;
        int d;
        int step;
        public Task(){}
        public  Task(int a,int b,int c,int d,int step){
            this.a=a;
            this.b=b;
            this.c=c;
            this.d=d;
            this.step=step;
        }
    }
    static boolean w[],e[],r[],t[];
    static int a,b,c,d;
    static StreamTokenizer st=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static PrintWriter out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    public static void main(String[] args) throws IOException {
        int n=nextInt();
        for (int i = 0; i < n; i++) {
             a=nextInt();
             b=nextInt();
             c=nextInt();
             d=nextInt();
            w=new boolean[301];
            e=new boolean[301];
            r=new boolean[301];
            t=new boolean[301];
            int arr[]=new int[4];
            arr[0]=bfs(a);
            arr[1]=bfs(b);
            arr[2]=bfs(c);
            arr[3]=bfs(d);
            Arrays.sort(arr);
            System.out.println(arr[3]+arr[2]+arr[1]+arr[0]);
        }

    }

    private static int bfs(int n) {
        Queue<Task> q=new LinkedList<>();
        q.offer(new Task(10,10,10,10,0));
        while (!q.isEmpty()){
            int aa=q.peek().a;
            int bb=q.peek().b;
            int cc=q.peek().c;
            int dd=q.peek().d;
            int step=q.peek().step;
            q.poll();
            if(n==a&&w[aa]){
                q.poll();
            }
            if(n==b&&e[bb]){
                q.poll();
            }
            if(n==c&&r[cc]){
                q.poll();
            }
            if(n==d&&t[dd]){
                q.poll();
            }w[aa]=true;e[bb]=true;r[cc]=true;
            t[dd]=true;
            if (n==a&&aa==n){
                return step;
            }
            
            if (n==b&&bb==n){
                return step;
            }
            if (n==c&&cc==n){
                return step;
            }
            if (n==d&&dd==n){
                return step;
            }
            if (n==a) {
                q.offer(new Task(Math.max(aa - 1, 10), bb, cc, dd, step + 1));
                q.offer(new Task(Math.min(aa + 1, 300), bb, cc, dd, step + 1));
                q.offer(new Task(Math.min(aa + 10, 300), bb, cc, dd, step + 1));
                q.offer(new Task(Math.max(aa - 10, 10), bb, cc, dd, step + 1));
                q.offer(new Task(Math.max(aa - 100, 10), bb, cc, dd, step + 1));
                q.offer(new Task(Math.min(aa + 100, 300), bb, cc, dd, step + 1));
                q.offer(new Task(300, bb, cc, dd, step + 1));
                q.offer(new Task(10, bb, cc, dd, step + 1));
            }
            if (n==b) {
                q.offer(new Task(aa, Math.max(bb - 1, 10), cc, dd, step + 1));
                q.offer(new Task(aa, Math.min(bb + 1, 300), cc, dd, step + 1));
                q.offer(new Task(aa, Math.min(bb + 10, 300), cc, dd, step + 1));
                q.offer(new Task(aa, Math.max(bb - 10, 10), cc, dd, step + 1));
                q.offer(new Task(aa, Math.max(bb - 100, 10), cc, dd, step + 1));
                q.offer(new Task(aa, Math.min(bb + 100, 300), cc, dd, step + 1));
                q.offer(new Task(aa, 300, cc, dd, step + 1));
                q.offer(new Task(aa, 10, cc, dd, step + 1));
            }
            if (n==c) {
                q.offer(new Task(aa, bb, Math.max(cc - 1, 10), dd, step + 1));
                q.offer(new Task(aa, bb, Math.min(cc + 1, 300), dd, step + 1));
                q.offer(new Task(aa, bb, Math.min(cc + 10, 300), dd, step + 1));
                q.offer(new Task(aa, bb, Math.max(cc - 10, 10), dd, step + 1));
                q.offer(new Task(aa, bb, Math.max(cc - 100, 10), dd, step + 1));
                q.offer(new Task(aa, bb, Math.min(cc + 100, 300), dd, step + 1));
                q.offer(new Task(aa, bb, 300, dd, step + 1));
                q.offer(new Task(aa, bb, 10, dd, step + 1));
            }
            if (n==d) {
                q.offer(new Task(aa, bb, cc, Math.max(dd - 1, 10), step + 1));
                q.offer(new Task(aa, bb, cc, Math.min(dd + 1, 300), step + 1));
                q.offer(new Task(aa, bb, cc, Math.min(dd + 10, 300), step + 1));
                q.offer(new Task(aa, bb, cc, Math.max(dd - 10, 10), step + 1));
                q.offer(new Task(aa, bb, cc, Math.max(dd - 100, 10), step + 1));
                q.offer(new Task(aa, bb, cc, Math.min(dd + 100, 300), step + 1));
                q.offer(new Task(aa, bb, cc, 300, step + 1));
                q.offer(new Task(aa, bb, cc, 10, step + 1));
            }
        }return 0;
    }

    private static int nextInt() throws IOException {
        st.nextToken();
        return (int) st.nval;
    }
}
"
74,D,Java,61169240,2023-03-10 21:00:28,EGOIST9029,答案错误,"import java.io.*;

public class Main{
	public static PrintWriter out = new PrintWriter(System.out);
    public static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    public static void main(String[] args)throws Exception {
        int t = Integer.parseInt(reader.readLine());
        int[] ans = new int[301];
        for(int i = 10;i<301;i++) {
        	ans[i] = Math.min(f(10, i),1+f(300, i));
        }
        for(int i = 0;i<t;i++) {
        	String[] strings = reader.readLine().split("" "");
        	int sum = 0;
        	for(int j = 0;j<4;j++) {
        		int x = Integer.parseInt(strings[j]);
        		sum+=ans[x];
        	}
        	out.println(sum);
        }
        out.close();
    }
    
    public static int f(int t,int x) {
		int ans = 0;
    	while(t!=x) {
    		while(Math.abs(t+100-x)<Math.abs(t-x)) {
    			t+=100;
    			ans++;
    		}
    		while(Math.abs(t-100-x)<Math.abs(t-x)) {
    			t-=100;
    			ans++;
    		}
    		while(Math.abs(t+10-x)<Math.abs(t-x)) {
    			t+=10;
    			ans++;
    		}
    		while(Math.abs(t-10-x)<Math.abs(t-x)){
    			t-=10;
    			ans++;
    		}
    		while(Math.abs(t+1-x)<Math.abs(t-x)) {
    			t+=1;
    			ans++;
    		}
    		while(Math.abs(t-1-x)<Math.abs(t-x)) {
    			t-=1;
    			ans++;
    		}
        }
		return ans;
	}
}"
75,D,Java,61169715,2023-03-10 21:07:09,kk129,答案错误,"import java.io.*;
import java.util.*;
import java.math.*;
import java.util.Set;
public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            //代码写这里
            int t = in.nextInt();
            for (int round = 0; round < t; round++) {
                int a = in.nextInt();
                int b = in.nextInt();
                int c = in.nextInt();
                int d = in.nextInt();
                if(a==10&&b==10&&c==10&&d==10)
                    out.println(0);
                else {
                    long sum = 0;
                    int bai = 0,shi=0,ge=0;
//                    a
                    bai = a/100%10;
                    shi = a/10%10;
                    ge = a%10;
//                    out.println(bai+"" ""+shi+"" ""+ge);
                    if(ge<=5)
                        sum+=ge;
                    else
                        sum+=(10-ge);
                    if(shi!=0) {
                        if (shi <= 6)
                            sum += shi - 1;
                        else
                            sum += (10 - shi - 1);
                    }
                    if(bai==3)
                        sum+=1;
                    else if(bai==2){
                        sum+=2;
                    }
                    else if(bai==1){
                        if(a%100==0)
                            sum+=2;
                        else
                            sum+=1;
                    }
//                    b
                    bai = b/100%10;
                    shi = b/10%10;
                    ge = b%10;
//                    out.println(bai+"" ""+shi+"" ""+ge);
                    if(ge<=5)
                        sum+=ge;
                    else
                        sum+=(10-ge);

                    if(shi!=0) {
                        if (shi <= 6)
                            sum += shi - 1;
                        else
                            sum += (10 - shi - 1);
                    }

                    if(bai==3)
                        sum+=1;
                    else if(bai==2){
                        sum+=2;
                    }
                    else if(bai==1) {
                        if(b%100==0)
                            sum+=2;
                        else
                            sum+=1;
                    }
//                    c
                    bai = c/100%10;
                    shi = c/10%10;
                    ge = c%10;
//                    out.println(bai+"" ""+shi+"" ""+ge);
                    if(ge<=5)
                        sum+=ge;
                    else
                        sum+=(10-ge);

                    if(shi!=0) {
                        if (shi <= 6)
                            sum += shi - 1;
                        else
                            sum += (10 - shi - 1);
                    }

                    if(bai==3)
                        sum+=1;
                    else if(bai==2){
                        sum+=2;
                    }
                    else if(bai==1) {
                        if(c%100==0)
                            sum+=2;
                        else
                            sum+=1;
                    }
//                    d
                    bai = d/100%10;
                    shi = d/10%10;
                    ge = d%10;
//                    out.println(bai+"" ""+shi+"" ""+ge);
                    if(ge<=5)
                        sum+=ge;
                    else
                        sum+=(10-ge);

                    if(shi!=0) {
                        if (shi <= 6)
                            sum += shi - 1;
                        else
                            sum += (10 - shi - 1);
                    }

                    if(bai==3)
                        sum+=1;
                    else if(bai==2){
                        sum+=2;
                    }
                    else if(bai==1) {
                        if(d%100==0)
                            sum+=2;
                        else
                            sum+=1;
                    }
                    out.println(sum);
                }
            }
        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            } catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            return Integer.parseInt(next());
        }
        public double nextDouble(){
            return Double.parseDouble(next());
        }
        public long nextLong(){
            return Long.parseLong(next());
        }
        public BigInteger nextBigInteger()
        {
            return new BigInteger(next());
        }
        public BigDecimal nextBigDecimal()
        {
            return new BigDecimal(next());
        }

    }
}"
76,D,Java,61170291,2023-03-10 21:17:08,牛客935801330号（人工智能3211吴华聪）,答案错误,"






import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
           int t=in.nextInt();
           while (t-->0){
              int sum=0;
              int a[]=new int[4];
               for (int i = 0; i < 4; i++) {
                   a[i]=in.nextInt();
                   if(a[i]==10){
                       continue;
                   }
                   else {
                       if(a[i]>=200){
                           int s1=210,sum1=2,s2=300,sum2=1,x1=0,x2=0;
                           int x=a[i]%10;
                           if(x==0){
                               x2=(s2-a[i])/10;
                               x1=Math.abs(s1-a[i])/10;
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           else {
                               x2=(s2-a[i])/10;
                               if(x>=5){
                                   sum2+=10-x;
                                   if(a[i]<s1){
                                       sum1+=10-x;
                                   }
                                   else {
                                       x1=(a[i]-s1)/10;
                                       sum1+=1+10-x;
                                   }
                               }
                               else {
                                   sum2+=1+x;
                                   if(a[i]<s1){
                                       sum1+=1+x;
                                   }
                                   else {
                                       x1=(a[i]-s1)/10;
                                       sum1+=x;
                                   }
                               }
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           sum1=Math.min(sum1,sum2);
                           sum+=sum1;
                       }
                       else if(a[i]>=100){
                           int s1=200,sum1=2,s2=110,sum2=1,x=a[i]%10,x1=0,x2=0;
                           if(x==0){
                               x1=(s1-a[i])/10;
                              x2=Math.abs(s2-a[i])/10;
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           else {
                               x1=(s1-a[i])/10;
                               if(x>=5){
                                   sum1+=10-x;
                                   if(a[i]<s2){
                                       sum2+=10-x;
                                   }
                                   else {
                                       x2=(a[i]-s2)/10;
                                       sum2+=1+10-x;
                                   }
                               }
                               else {
                                   sum1+=1+x;
                                   if(a[i]<s2){
                                       sum2+=1+x;
                                   }
                                   else {
                                       x2=(a[i]-s2)/10;
                                       sum2+=x;
                                   }
                               }
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           sum1=Math.min(sum1,sum2);
                           sum+=sum1;
                       }
                       else {
                           int s1=110,sum1=1,s2=10,sum2=0,x=a[i]%10,x1=0,x2=0;
                           if(x==0){
                               x1=(s1-a[i])/10;
                               x2=Math.abs(s2-a[i])/10;
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           else {
                               x1=(s1-a[i])/10;
                               x2=(a[i]-s2)/10;
                               if(x>=5){
                                   sum1+=10-x;
                                   sum2+=1+10-x;
                               }
                               else {
                                   sum1+=1+x;
                                  sum2+=x;
                               }
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           sum1=Math.min(sum1,sum2);
                           sum+=sum1;
                       }
                   }
//                   out.println(sum);
               }
               out.println(sum);
           }
        }
    }
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            } catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            return Integer.parseInt(next());
        }
        public double nextDouble(){
            return Double.parseDouble(next());
        }
        public long nextLong(){
            return Long.parseLong(next());
        }
        public BigInteger nextBigInteger()
        {
            return new BigInteger(next());
        }
        public BigDecimal nextBigDecimal()
        {
            return new BigDecimal(next());
        }

    }
}"
77,D,Java,61170308,2023-03-10 21:17:30,kk129,答案错误,"import java.io.*;
import java.util.*;
import java.math.*;
import java.util.Set;
public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            //代码写这里
            int t = in.nextInt();
            for (int round = 0; round < t; round++) {
                int a = in.nextInt();
                int b = in.nextInt();
                int c = in.nextInt();
                int d = in.nextInt();
                if(a==10&&b==10&&c==10&&d==10)
                    out.println(0);
                else {
                    long sum = 0;
                    int bai = 0,shi=0,ge=0;
//                    a
                    bai = a/100%10;
                    shi = a/10%10;
                    ge = a%10;
//                    out.println(bai+"" ""+shi+"" ""+ge);
                    if(ge<=5) {
                        sum += ge;
//                        out.println(""a ""+a+"" ""+ge);
                    }
                    else
                        sum+=(10-ge);
                    if(shi!=0) {
                        if (shi <= 6)
                            sum += shi - 1;
                        else
                            sum += (10 - shi - 1);
                    }
                    if(bai==3)
                        sum+=1;
                    else if(bai==2){
                        sum+=2;
                    }
                    else if(bai==1){
                        if(shi==0)
                            sum+=2;
                        else
                            sum+=1;
                    }
//                    out.println(sum);
//                    b
                    bai = b/100%10;
                    shi = b/10%10;
                    ge = b%10;
//                    out.println(bai+"" ""+shi+"" ""+ge);
                    if(ge<=5) {
                        sum += ge;
//                        out.println(""b ""+b+"" ""+ge);
                    }
                    else
                        sum+=(10-ge);

                    if(shi!=0) {
                        if (shi <= 6)
                            sum += shi - 1;
                        else
                            sum += (10 - shi - 1);
                    }

                    if(bai==3)
                        sum+=1;
                    else if(bai==2){
                        sum+=2;
                    }
                    else if(bai==1) {
                        if(shi==0)
                            sum+=2;
                        else
                            sum+=1;
                    }
//                    out.println(sum);
//                    c
                    bai = c/100%10;
                    shi = c/10%10;
                    ge = c%10;
//                    out.println(bai+"" ""+shi+"" ""+ge);
                    if(ge<=5) {
                        sum += ge;
//                        out.println(""c ""+c+"" ""+ge);
                    }
                    else
                        sum+=(10-ge);

                    if(shi!=0) {
                        if (shi <= 6)
                            sum += shi - 1;
                        else
                            sum += (10 - shi - 1);
                    }

                    if(bai==3)
                        sum+=1;
                    else if(bai==2){
                        sum+=2;
                    }
                    else if(bai==1) {
                        if(shi==0)
                            sum+=2;
                        else
                            sum+=1;
                    }
//                    out.println(sum);
//                    d
                    bai = d/100%10;
                    shi = d/10%10;
                    ge = d%10;
//                    out.println(bai+"" ""+shi+"" ""+ge);
                    if(ge<=5) {
                        sum += ge;
//                        out.println(""d ""+d+"" ""+ge);
                    }
                    else
                        sum+=(10-ge);

                    if(shi!=0) {
                        if (shi <= 6)
                            sum += shi - 1;
                        else
                            sum += (10 - shi - 1);
                    }

                    if(bai==3)
                        sum+=1;
                    else if(bai==2){
                        sum+=2;
                    }
                    else if(bai==1) {
                        if(shi==0)
                            sum+=2;
                        else
                            sum+=1;
                    }
                    out.println(sum);
                }
            }
        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            } catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            return Integer.parseInt(next());
        }
        public double nextDouble(){
            return Double.parseDouble(next());
        }
        public long nextLong(){
            return Long.parseLong(next());
        }
        public BigInteger nextBigInteger()
        {
            return new BigInteger(next());
        }
        public BigDecimal nextBigDecimal()
        {
            return new BigDecimal(next());
        }

    }
}"
78,D,Java,61171201,2023-03-10 21:33:24,Zwanan,答案正确,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
	static IO io = new IO();
	
	static StringBuilder res = new StringBuilder();
	
	static final int N = 330, INF = 0x3f3f3f3f;
	
	static ArrayList<int[]>[] g = new ArrayList[N];
	static int[] dist = new int[N];
	static boolean[] st = new boolean[N];
	
	static int S = 10;
	
	static void add(int a, int b, int c) {
		g[a].add(new int[] {b,c});
	}
	
	static void SPFA() {
		Arrays.fill(dist, INF);
		dist[S] = 0;
		st[S] = true;
		Queue<Integer> q = new ArrayDeque<>();
		q.offer(S);
		while(!q.isEmpty()) {
			int p = q.poll();
			st[p] = false;
			for (int[] i : g[p]) {
				int a = i[0], w = i[1];
				if (dist[a] > dist[p] + w) {
					dist[a] = dist[p] + w;
					if (!st[a]) {
						q.offer(a);
						st[a] = true;
					}
				}
			}
		}
	}
	
	
	public static void main(String[] args) throws Exception {
		int T = io.NI();
		Arrays.fill(dist, INF);
		for (int i = 1; i <= 300; ++i) g[i] = new ArrayList<>();
		for (int i = 10; i <= 300; ++i) {
			if (i + 1 <= 300) {
				add(i, i + 1, 1);add(i + 1, i, 1);
			}
			if (i - 1 >= 10) {
				add(i - 1, i, 1);add(i, i - 1, 1);
			}
			if (i + 10 <= 300) {
				add(i, i + 10, 1);add(i + 10, i, 1);
			}
			if (i - 10 >= 10) {
				add(i - 10, i, 1);
				add(i, i - 1, 1);
			}
			if (i + 100 <= 300) {
				add(i, i + 100, 1);add(i + 100, i, 1);
			}
			if (i - 100 >= 100) {
				add(i - 100, i, 1);
				add(i, i - 100, 1);
			}
			add(i, 10, 1);
			add(i, 300, 1);
		}
		SPFA();
		while (T-- > 0) {
			int a = io.NI(), b = io.NI(), c = io.NI(), d = io.NI();
			int sum = 0;
			sum = dist[a] + dist[b] + dist[c] + dist[d];
			//io.print(dist[a] + "" "" + dist[b] + "" "" + dist[c] + "" "" + dist[d]);
			res.append(sum).append(""\n"");
		}
		io.print(res);
	}
}

class IO {
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	StreamTokenizer st = new StreamTokenizer(br);
	PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

	int NI() throws Exception {
		st.nextToken();
		return (int) st.nval;
	}

	String N() throws Exception {
		st.ordinaryChars('0', '9');
		st.wordChars('0', '9');
		st.nextToken();
		return st.sval;
	}

	void print(Object o) {
		pw.print(o);
		pw.flush();
	}
}"
79,D,Java,61171286,2023-03-10 21:35:18,迷你滨,答案正确,"import java.util.*;
import java.io.*;
import java.math.*;
//An apple a day

public class Main{
	static int maxn = 100005,n,m;
	static long INF = (long)1e18,ans = 0,mod = (int)1e9+7;
	static Scanner sc = new Scanner (System.in);
	static BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
    static StreamTokenizer st  =new StreamTokenizer(bf);
    static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
    public static void main(String[]args) throws IOException{
    	int T = 1;
    	T = Integer.parseInt(S());
    	bfs();
        while(T-->0) solve();
        pw.flush();
    }
    static final int I() throws IOException {
    	st.nextToken();
    	return (int)st.nval;
    }
    
    static String S() throws IOException{
    	String res = bf.readLine();
    	while(res.equals("""")) res = bf.readLine();
    	return res;
    }
    
    static int p[] = {1,-1,10,-10,100,-100};
    static int d[] = new int [301];
    
    
    static void bfs() {
    	Arrays.fill(d, (int)1e9);
    	d[10] = 0;d[300]=1;
    	Queue<Integer> q=  new LinkedList<>();
    	q.add(10);q.add(300);
    	while(!q.isEmpty()) {
    		int x = q.poll();
    		for (int y:p) {
    			int nx = y+x;
                if(nx<10) nx=10;
                if(nx >300) nx = 300;
    			if(d[nx] > d[x] + 1) {
    				d[nx] = d[x]+1;
    				q.add(nx);
    			}
    		}
    	}
    }
    
    static void solve() throws IOException{
    	pw.println(d[I()]+d[I()]+d[I()]+d[I()]);
    }
}
"
80,D,Java,61171474,2023-03-10 21:40:08,giao1,答案错误,"





import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
           int t=in.nextInt();
           while (t-->0){
              int sum=0;
              int a[]=new int[4];
               for (int i = 0; i < 4; i++) {
                   a[i]=in.nextInt();
                   if(a[i]==10){
                       continue;
                   }
                   else {
                       if(a[i]>=200){
                           int s1=210,sum1=2,s2=300,sum2=1,x1=0,x2=0;
                           int x=a[i]%10;
                           if(x==0){
                               x2=(s2-a[i])/10;
                               x1=Math.abs(s1-a[i])/10;
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           else {
                               x2=(s2-a[i])/10;
                               if(x>=5){
                                   sum2+=10-x;
                                   if(a[i]<s1){
                                       sum1+=10-x;
                                   }
                                   else {
                                       x1=(a[i]-s1)/10;
                                       sum1+=1+10-x;
                                   }
                               }
                               else {
                                   sum2+=1+x;
                                   if(a[i]<s1){
                                       sum1+=1+x;
                                   }
                                   else {
                                       x1=(a[i]-s1)/10;
                                       sum1+=x;
                                   }
                               }
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           sum1=Math.min(sum1,sum2);
                           sum+=sum1;
                       }
                       else if(a[i]>=100){
                           int s1=200,sum1=2,s2=110,sum2=1,x=a[i]%10,x1=0,x2=0;
                           if(x==0){
                               x1=(s1-a[i])/10;
                              x2=Math.abs(s2-a[i])/10;
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           else {
                               x1=(s1-a[i])/10;
                               if(x>=5){
                                   sum1+=10-x;
                                   if(a[i]<s2){
                                       sum2+=10-x;
                                   }
                                   else {
                                       x2=(a[i]-s2)/10;
                                       sum2+=1+10-x;
                                   }
                               }
                               else {
                                   sum1+=1+x;
                                   if(a[i]<s2){
                                       sum2+=1+x;
                                   }
                                   else {
                                       x2=(a[i]-s2)/10;
                                       sum2+=x;
                                   }
                               }
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           sum1=Math.min(sum1,sum2);
                           sum+=sum1;
                       }
                       else {
                           int s1=110,sum1=1,s2=10,sum2=0,x=a[i]%10,x1=0,x2=0;
                           if(x==0){
                               x1=(s1-a[i])/10;
                               x2=Math.abs(s2-a[i])/10;
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           else {
                               x1=(s1-a[i])/10;
                               x2=(a[i]-s2)/10;
                               if(x>=5){
                                   sum1+=10-x;
                                   sum2+=1+10-x;
                               }
                               else {
                                   sum1+=1+x;
                                  sum2+=x;
                               }
                               sum2+=(x2/10)+(x2%10);
                               sum1+=(x1/10)+(x1%10);
                           }
                           sum1=Math.min(sum1,sum2);
                           sum+=sum1;
                       }
                   }
//                   out.println(sum);
               }
               out.println(sum);
           }
        }
    }
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            } catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            return Integer.parseInt(next());
        }
        public double nextDouble(){
            return Double.parseDouble(next());
        }
        public long nextLong(){
            return Long.parseLong(next());
        }
        public BigInteger nextBigInteger()
        {
            return new BigInteger(next());
        }
        public BigDecimal nextBigDecimal()
        {
            return new BigDecimal(next());
        }

    }
}"
81,D,Java,61172341,2023-03-10 22:02:53,求你了教我剪枝,运行超时,"import java.io.*;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    static StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    private static int nextInt() throws IOException {
        st.nextToken();
        return (int) st.nval;
    }
    static class Task{
        int a;
        int step;
        public Task(){}
        public Task(int a,int step){
            this.a=a;
            this.step=step;
        }
    }
    static boolean f[];
    public static void main(String[] args) throws IOException {
        int n=nextInt();
        for (int i = 0; i < n; i++) {
            int a=nextInt();
            int b=nextInt();
            int c=nextInt();
            int d=nextInt();
            int ans=0;
            f=new boolean[500];
            ans+=bfs(a);
            f=new boolean[500];
            ans+=bfs(b);
            f=new boolean[500];
            ans+=bfs(c);
            f=new boolean[500];
            ans+=bfs(d);
            out.println(ans);
            out.flush();
        }
    }

    private static int bfs(int a) {
        Queue<Task> q=new LinkedList<>();
        q.offer(new Task(10,0));
        while (!q.isEmpty()){
            int aa=q.peek().a;
            int step=q.peek().step;
            if (f[aa]){
                q.poll();continue;
            }
            f[aa]=true;
            if (aa==a){
                return step;
            }
            q.offer(new Task(Math.min(300,aa+1),step+1));
            q.offer(new Task(Math.max(10,aa-1),step+1));
            q.offer(new Task(Math.min(300,aa+100),step+1));
            q.offer(new Task(Math.max(10,aa-100),step+1));
            q.offer(new Task(Math.min(300,aa+10),step+1));
            q.offer(new Task(Math.max(10,aa-10),step+1));
            q.offer(new Task(300,step+1));
            q.offer(new Task(10,step+1));
        }
        return -1;
    }
}
"
82,D,Java,61172511,2023-03-10 22:09:13,求你了教我剪枝,运行超时,"import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Arrays;

public class Main {
    static StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    private static int nextInt() throws IOException {
        st.nextToken();
        return (int) st.nval;
    }
    static class Task{
        int a;
        int step;
        public Task(){}
        public Task(int a,int step){
            this.a=a;
            this.step=step;
        }
    }
    static boolean f[];
    public static void main(String[] args) throws IOException {
        int n=nextInt();
        for (int i = 0; i < n; i++) {
            int a=nextInt();
            int b=nextInt();
            int c=nextInt();
            int d=nextInt();
            int ans=0;
            f=new boolean[500];
            ans+=bfs(a);
          
            ans+=bfs(b);
           
            ans+=bfs(c);
           
            ans+=bfs(d);
            out.println(ans);
            out.flush();
        }
    }

    private static int bfs(int a) {
        Queue<Task> q=new LinkedList<>();
        q.offer(new Task(10,0));
        Arrays.fill(f,false);
        while (!q.isEmpty()){
            int aa=q.peek().a;
            int step=q.peek().step;
            if (f[aa]){
                q.poll();continue;
            }
            f[aa]=true;
            if (aa==a){
                return step;
            }
            q.offer(new Task(Math.min(300,aa+1),step+1));
            q.offer(new Task(Math.max(10,aa-1),step+1));
            q.offer(new Task(Math.min(300,aa+100),step+1));
            q.offer(new Task(Math.max(10,aa-100),step+1));
            q.offer(new Task(Math.min(300,aa+10),step+1));
            q.offer(new Task(Math.max(10,aa-10),step+1));
            q.offer(new Task(300,step+1));
            q.offer(new Task(10,step+1));
        }
        return -1;
    }
}
"
83,D,Java,61172568,2023-03-10 22:11:23,哒哒哒76,运行超时,"import java.util.*;
public class Main {
    static  String s;
    static long mm=0;

    static Queue<Node>q=new LinkedList<>();

    public static void main(String[] args) {

        Scanner in = new Scanner(System.in);
        while (in.hasNext()) {
            int a = in.nextInt();
            for (int p = 0; p < a; p++) {

                    mm=0;
                for (int i=0;i<4;i++){
                    int b = in.nextInt();
                  mm+=bfs(b);
                }
            System.out.println(mm);

            }
        }
    }

    private static int bfs(int b) {

        int jkkk[]=new int[350];
        q.clear();
        q.add(new Node(10,0));
        int asd=0;
       while (!q.isEmpty()){
           Node qw=q.poll();
           if (qw.x==b){
               return qw.qqw;
           }

           for (int i=0;i<8;i++){
               if (i==0)asd= qw.x+1;
               if (i==1)asd= qw.x-1;
               if (i==2)asd= qw.x+10;
               if (i==3)asd= qw.x-10;
               if (i==4)asd= qw.x+100;
               if (i==5)asd= qw.x-100;
               if (i==6)asd= 300;
               if (i==7)asd= 10;

               if (asd>=0&&asd<=300&&jkkk[asd]!=1){
                   jkkk[asd]=1;
//                   System.out.println(asd+"" ""+(qw.qqw+1));
                   q.add(new Node(asd,qw.qqw+1));

               }

           }

       }
            return -1;
    }
    static class Node{
        int x;int qqw;
        public Node(int x,int qqw){
            this.x=x;
            this.qqw=qqw;
        }
    }
}
"
84,D,Java,61172615,2023-03-10 22:14:11,哒哒哒76,运行超时,"import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
public class Main {
    static  String s;
    static long mm=0;

    static Queue<Node>q=new LinkedList<>();

    public static void main(String[] args) {

     //   Scanner in = new Scanner(System.in);
        while (cin.hasNext()) {
            int a = cin.nextInt();
            for (int p = 0; p < a; p++) {

                    mm=0;
                for (int i=0;i<4;i++){
                    int b = cin.nextInt();
                  mm+=bfs(b);
                }
                out.println(mm);
                out.flush();

            }
        }
    }

    private static int bfs(int b) {

        int jkkk[]=new int[350];
        q.clear();
        q.add(new Node(10,0));
        int asd=0;
       while (!q.isEmpty()){
           Node qw=q.poll();
           if (qw.x==b){
               return qw.qqw;
           }

           for (int i=0;i<8;i++){
               if (i==0)asd= qw.x+1;
               if (i==1)asd= qw.x-1;
               if (i==2)asd= qw.x+10;
               if (i==3)asd= qw.x-10;
               if (i==4)asd= qw.x+100;
               if (i==5)asd= qw.x-100;
               if (i==6)asd= 300;
               if (i==7)asd= 10;

               if (asd>=0&&asd<=300&&jkkk[asd]!=1){
                   jkkk[asd]=1;
//                   System.out.println(asd+"" ""+(qw.qqw+1));
                   q.add(new Node(asd,qw.qqw+1));

               }

           }

       }
            return -1;
    }
    static class Node{
        int x;int qqw;
        public Node(int x,int qqw){
            this.x=x;
            this.qqw=qqw;
        }
    }
    static FastScanner cin = new FastScanner(System.in);
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }

}
"
85,D,Java,61172718,2023-03-10 22:18:17,哒哒哒76,答案正确,"import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
public class Main {
    static  String s;
    static long mm=0;
    static int jk[]=new int[310];
    static Queue<Node>q=new LinkedList<>();

    public static void main(String[] args) {

     //   Scanner in = new Scanner(System.in);
        while (cin.hasNext()) {
            int a = cin.nextInt();
            for (int p = 0; p < a; p++) {

                    mm=0;
                for (int i=0;i<4;i++){ 
                    int b = cin.nextInt();
                    if (jk[b]==0){
                        jk[b]=bfs(b);
                    }
                  mm+=jk[b]; 
                 
                }
                out.println(mm);
                out.flush();

            }
        }
    }

    private static int bfs(int b) {

        int jkkk[]=new int[350];
        q.clear();
        q.add(new Node(10,0));
        int asd=0;
       while (!q.isEmpty()){
           Node qw=q.poll();
           if (qw.x==b){
               return qw.qqw;
           }

           for (int i=0;i<8;i++){
               if (i==0)asd= qw.x+1;
               if (i==1)asd= qw.x-1;
               if (i==2)asd= qw.x+10;
               if (i==3)asd= qw.x-10;
               if (i==4)asd= qw.x+100;
               if (i==5)asd= qw.x-100;
               if (i==6)asd= 300;
               if (i==7)asd= 10;

               if (asd>=0&&asd<=300&&jkkk[asd]!=1){
                   jkkk[asd]=1;
//                   System.out.println(asd+"" ""+(qw.qqw+1));
                   q.add(new Node(asd,qw.qqw+1));

               }

           }

       }
            return -1;
    }
    static class Node{
        int x;int qqw;
        public Node(int x,int qqw){
            this.x=x;
            this.qqw=qqw;
        }
    }
    static FastScanner cin = new FastScanner(System.in);
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }

}
"
86,D,Java,61172745,2023-03-10 22:19:21,哒哒哒76,运行超时,"import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
public class Main {
    static  String s;
    static long mm=0;

    static Queue<Node>q=new LinkedList<>();

    public static void main(String[] args) {

     //   Scanner in = new Scanner(System.in);
        while (cin.hasNext()) {
            int a = cin.nextInt();
            for (int p = 0; p < a; p++) {

                    mm=0;
                for (int i=0;i<4;i++){
                    int b = cin.nextInt();
                  mm+=bfs(b);
                }
                out.println(mm);
                out.flush();

            }
        }
    }

    private static int bfs(int b) {

        int jkkk[]=new int[350];
        q.clear();
        q.add(new Node(10,0));
        int asd=0;
       while (!q.isEmpty()){
           Node qw=q.poll();
           if (qw.x==b){
               return qw.qqw;
           }

           for (int i=0;i<8;i++){
               if (i==0)asd= qw.x+1;
               if (i==1)asd= qw.x-1;
               if (i==2)asd= qw.x+10;
               if (i==3)asd= qw.x-10;
               if (i==4)asd= qw.x+100;
               if (i==5)asd= qw.x-100;
               if (i==6)asd= 300;
               if (i==7)asd= 10;

               if (asd>=10&&asd<=300&&jkkk[asd]!=1){
                   jkkk[asd]=1;
//                   System.out.println(asd+"" ""+(qw.qqw+1));
                   q.add(new Node(asd,qw.qqw+1));

               }

           }

       }
            return -1;
    }
    static class Node{
        int x;int qqw;
        public Node(int x,int qqw){
            this.x=x;
            this.qqw=qqw;
        }
    }
    static FastScanner cin = new FastScanner(System.in);
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }

}
"
87,D,Java,61172751,2023-03-10 22:19:44,求你了教我剪枝,运行超时,"import java.io.*;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    static StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    private static int nextInt() throws IOException {
        st.nextToken();
        return (int) st.nval;
    }
    static class Task{
        int a;
        int step;
        public Task(){}
        public Task(int a,int step){
            this.a=a;
            this.step=step;
        }
    }
    static boolean f[];
    public static void main(String[] args) throws IOException {
        int n=nextInt();
        for (int i = 0; i < n; i++) {
            int a=nextInt();
            int b=nextInt();
            int c=nextInt();
            int d=nextInt();
            int ans=0;
            f=new boolean[500];
            ans+=bfs(a);
            ans+=bfs(b);
            ans+=bfs(c);
            ans+=bfs(d);
            out.println(ans);
            out.flush();
        }
    }

    private static int bfs(int a) {
        Queue<Task> q=new LinkedList<>();
        q.offer(new Task(10,0));
        int arr[]= {-1,1,10,-10,100,-100};
        Arrays.fill(f,false);
        while (!q.isEmpty()){
            int aa=q.peek().a;
            int step=q.peek().step;
            if (f[aa]){
                q.poll();continue;
            }
            f[aa]=true;
            if (aa==a){
                return step;
            }
            for (int i = 0; i < 6; i++) {
                int s=aa+arr[i];
                if (s<10)s=10;
                if (s>300)s=300;
                q.offer(new Task(s,step+1));
            }
            q.offer(new Task(10,step+1));
            q.offer(new Task(300,step+1));
        }
        return -1;
    }
}
"
88,D,Java,61172754,2023-03-10 22:19:47,哒哒哒76,答案正确,"import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
public class Main {
    static  String s;
    static long mm=0;
    static int jk[]=new int[310];
    static Queue<Node>q=new LinkedList<>();

    public static void main(String[] args) {

     //   Scanner in = new Scanner(System.in);
        while (cin.hasNext()) {
            int a = cin.nextInt();
            for (int p = 0; p < a; p++) {

                    mm=0;
                for (int i=0;i<4;i++){ 
                    int b = cin.nextInt();
                    if (jk[b]==0){
                        jk[b]=bfs(b);
                    }
                  mm+=jk[b]; 
                 
                }
                out.println(mm);
                out.flush();

            }
        }
    }

    private static int bfs(int b) {

        int jkkk[]=new int[350];
        q.clear();
        q.add(new Node(10,0));
        int asd=0;
       while (!q.isEmpty()){
           Node qw=q.poll();
           if (qw.x==b){
               return qw.qqw;
           }

           for (int i=0;i<8;i++){
               if (i==0)asd= qw.x+1;
               if (i==1)asd= qw.x-1;
               if (i==2)asd= qw.x+10;
               if (i==3)asd= qw.x-10;
               if (i==4)asd= qw.x+100;
               if (i==5)asd= qw.x-100;
               if (i==6)asd= 300;
               if (i==7)asd= 10;

               if (asd>=0&&asd<=300&&jkkk[asd]!=1){
                   jkkk[asd]=1;
//                   System.out.println(asd+"" ""+(qw.qqw+1));
                   q.add(new Node(asd,qw.qqw+1));

               }

           }

       }
            return -1;
    }
    static class Node{
        int x;int qqw;
        public Node(int x,int qqw){
            this.x=x;
            this.qqw=qqw;
        }
    }
    static FastScanner cin = new FastScanner(System.in);
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }

}
"
89,D,Java,61174698,2023-03-11 00:35:29,zime-www,答案正确,"import java.io.*;
import java.sql.Array;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    static StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static int[] f = new int[305];

    public static void main(String[] args) throws IOException {
        int tt = next();
        Arrays.fill(f, 305);
        dfs(10, 0);
        while (tt-- > 0) System.out.println(f[next()] + f[next()] + f[next()] + f[next()]);
    }

    private static void dfs(int a, int w) {
        if (a < 10 || a > 300) return;
        if (f[a] <= w) return;
        f[a] = w;
        dfs(a - 1, w + 1);
        dfs(a + 1, w + 1);
        dfs(a - 10, w + 1);
        dfs(a + 10, w + 1);
        dfs(a + 100, w + 1);
        dfs(a - 100, w + 1);
        dfs(300, w + 1);
        dfs(10, w + 1);
    }

    private static int next() throws IOException {
        st.nextToken();
        return (int) st.nval;
    }
}"
90,D,Java,61175111,2023-03-11 08:25:05,李雯钦,答案正确,"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Main {
    static int N = 310;
    static int[] res = new int[N];
    static int[] q = new int[N];
    static int[] dt = new int[]{1,-1,10,-10,100,-100};
    static void bfs(){
        Arrays.fill(res, 0x3f3f3f3f);
        res[10] = 0;
        int hh =  0,tt = -1;
        q[++tt] = 10;
        while(hh<=tt){
            int t = q[hh++];
            for(int i =0;i<6;i++){
                int now = t+dt[i];
                now = Math.max(10,now);
                now = Math.min(300,now);
                if(res[now]>res[t]+1) {
                    res[now] = res[t] + 1;
                    q[++tt] = now;
                }
                if(res[300]>res[t]+1){
                    res[300] = res[t]+1;
                    q[++tt] = 300;
                }
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        bfs();
        while(t-->0){
            String[] s1 = br.readLine().split("" "");
            int a = Integer.parseInt(s1[0]), b = Integer.parseInt(s1[1]),c = Integer.parseInt(s1[2]),d = Integer.parseInt(s1[3]);
            System.out.println(res[a]+res[b]+res[c]+res[d]);
        }
    }
}
"
91,D,Java,61175123,2023-03-11 08:30:23,何妨吟啸且徐行1,答案正确,"import java.io.*;
import java.util.*;


public class Main {
	
    public static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in), 32768));
    public static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    public static int nextInt() throws IOException {in.nextToken();return (int) in.nval;}
    public static double nextDouble() throws IOException {in.nextToken();return in.nval;}
    
    static int[] f = new int[310];
    
    public static void main(String[] args) throws IOException {
    	 int t=nextInt();
    	 Arrays.fill(f, 310);
         dfs(10, 0);
         while (t-- > 0) {
        	 int a=nextInt();int b=nextInt();int c=nextInt();int d=nextInt();
        	 out.println(f[a] + f[b] + f[c] + f[d]);
         }
         out.close();
    }
    //直接把10-300所有的最小可能搜出来
    static void dfs(int a, int w) {
        if (a < 10 || a > 300) return;
        if (f[a] <= w) return;
        f[a] = w;
        dfs(a - 1, w + 1);
        dfs(a + 1, w + 1);
        dfs(a - 10, w + 1);
        dfs(a + 10, w + 1);
        dfs(a + 100, w + 1);
        dfs(a - 100, w + 1);
        dfs(300, w + 1);
        dfs(10, w + 1);
    }
}"
92,D,Java,61175643,2023-03-11 09:26:16,giao1,答案正确,"import java.io.*;
import java.util.*;


public class Main {
	
    public static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in), 32768));
    public static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    public static int nextInt() throws IOException {in.nextToken();return (int) in.nval;}
    public static double nextDouble() throws IOException {in.nextToken();return in.nval;}
    
    static int[] f = new int[310];
    
    public static void main(String[] args) throws IOException {
    	 int t=nextInt();
    	 Arrays.fill(f, 310);
         dfs(10, 0);
         while (t-- > 0) {
        	 int a=nextInt();int b=nextInt();int c=nextInt();int d=nextInt();
        	 out.println(f[a] + f[b] + f[c] + f[d]);
         }
         out.close();
    }
    //直接把10-300所有的最小可能搜出来
    static void dfs(int a, int w) {
        if (a < 10 || a > 300) return;
        if (f[a] <= w) return;
        f[a] = w;
        dfs(a - 1, w + 1);
        dfs(a + 1, w + 1);
        dfs(a - 10, w + 1);
        dfs(a + 10, w + 1);
        dfs(a + 100, w + 1);
        dfs(a - 100, w + 1);
        dfs(300, w + 1);
        dfs(10, w + 1);
    }
}"
93,D,Java,61176098,2023-03-11 09:56:22,giao1,答案正确,"import java.util.*;


public class Main{
    
    static int[] p = new int[310];
    static Scanner cin = new Scanner(System.in);
    public static void main(String[] args){
        int t = cin.nextInt();
            bfs();
        while(t-->0)save();
    }
    
    static void save(){     
        String[] li = cin.nextLine().split("" "");
        int a = cin.nextInt();
        int b = cin.nextInt();
        int c = cin.nextInt();
        int d = cin.nextInt();
        System.out.println(p[a]+p[b]+p[c]+p[d]);   
    }
    static int[] dir = {1,-1,10,-10,100,-100};
   static void bfs() {
        Arrays.fill(p, (int)1e9);
        p[10] = 0;p[300]=1;
        Queue<Integer> q=  new LinkedList<>();
        q.add(10);q.add(300);
        while(!q.isEmpty()) {
            int x = q.poll();
            for (int y:dir) {
                int nx = y+x;
                if(nx<10) nx=10;
                if(nx >300) nx = 300;
                if(p[nx] > p[x] + 1) {
                    p[nx] = p[x]+1;
                    q.add(nx);
                }
            }
        }
    }
    
}"
94,D,Java,61176314,2023-03-11 10:10:01,天天天丶,答案正确,"
import java.util.Scanner;

import java.util.*;
import java.io.*;
public class Main {

    public static void main(String[] args) {

        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        Map<Integer, Integer> map = new HashMap<>();
        fun(map, 10, 0);

        int t = in.nextInt();
        while(t-- > 0) {
            int a = in.nextInt();
            int b = in.nextInt();
            int c = in.nextInt();
            int d = in.nextInt();
            out.println(map.get(a) + map.get(b) + map.get(c) + map.get(d));
        }

        out.flush();
    }

    private static void fun(Map<Integer, Integer> map, int now, int step) {
        if (!map.containsKey(now) || map.get(now) > step) {
            map.put(now, step);
            fun(map, 300, step + 1);
            fun(map, 10, step + 1);
            fun(map, Math.min(300, now + 100), step + 1);
            fun(map, Math.max(10, now - 100), step + 1);
            fun(map, Math.min(300, now + 10), step + 1);
            fun(map, Math.max(10, now - 10), step + 1);
            fun(map, Math.min(300, now + 1), step + 1);
            fun(map, Math.max(10, now - 1), step + 1);
        }

    }

}
"
95,D,Java,61178765,2023-03-11 12:29:46,山东协和学院_张福旭,答案正确,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    public static void main(String[] args) {
        Queue<Integer> q=new LinkedList<>();
        q.offer(10);
        q.offer(300);
        int[] d={1,-1,10,-10,100,-100};
        int[] ans=new int[305];
        Arrays.fill(ans,0x3f3f3f3f);
        ans[10]=0;
        ans[300]=1;
        while (!q.isEmpty()){
            int index=q.poll();
            for (int i=0;i<6;i++){
                int cnt=index+d[i];
                if (cnt<10) cnt=10;
                if (cnt>300) cnt=300;
                if (ans[cnt]>ans[index]+1){
                    ans[cnt]=ans[index]+1;
                    q.offer(cnt);
                }
            }
        }
        int t=sc.nextInt();
        while (t-->0){
            int x=0;
            for (int i=1;i<=4;i++){
                x+=ans[sc.nextInt()];
            }
            out.println(x);
        }
        out.flush();
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }
        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
96,D,Java,61202286,2023-03-11 14:26:12,huvz,运行超时,"import java.io.*;
import java.util.*;

public class Main {
    //static Read in = new Read();

    //static AWriter out = new AWriter();
    static Scanner in = new Scanner(System.in);
    static int [] ans = new int[400];
    public static void solve() throws IOException {
        //int n=in.nextInt();
       // String str =in.next();
        //double ans = 0;
        int [] doi = {-1,1,-10,10,-100,100};
        Queue<Integer> q= new LinkedList<>();
        q.add(10);
        Arrays.fill(ans,400);
        ans[10]=0;
        while(!q.isEmpty())
        {
            int t = q.peek();
            q.poll();
            for(int i=0;i<6;i++)
            {
                int aa= t+doi[i];
                aa = Math.max(10,aa);
                aa = Math.min(300,aa);
                if(ans[aa]<=ans[t]+1) continue;
                ans[aa] = ans[t]+1;
                q.add(aa);
            }
            if(ans[300]>ans[t]+1)
            {
                ans[300]=ans[t]+1;
                q.add(300);
            }
        }
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            System.out.println(ans[a]+ans[b]+ans[c]+ans[d]);

    }
    public static void num (){

        return ;
    }
    public static void main(String[] arg) throws Exception {
        int t=1;

        //Scanner in = new Scanner(System.in);
        t = in.nextInt();
        while(t-->0)
        {
            solve();
        }

    }

    static class Read{
        static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        static StreamTokenizer st = new StreamTokenizer(br);
        static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
        public int nextInt() throws IOException {
            st.nextToken();
            return (int) st.nval;
        }
        public Long nextLong() throws IOException {
            st.nextToken();
            return (long) st.nval;
        }
        public String next() throws IOException{
            st.nextToken();
            return st.sval;
        }
        // 若需要nextDouble等方法，请自行调用Double.parseDouble包装
    }
    static class AWriter implements Closeable {
        private BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
        public void print(Object object) throws IOException {
            writer.write(object.toString());
        }
        public void println(Object object) throws IOException {
            writer.write(object.toString());
            writer.write(System.lineSeparator());
        }
        @Override
        public void close() throws IOException {
            writer.close();
        }
    }

}"
97,D,Java,61202540,2023-03-11 14:27:12,huvz,答案正确,"import java.io.*;
import java.util.*;

public class Main {
    static Read in = new Read();

    //static AWriter out = new AWriter();
    //static Scanner in = new Scanner(System.in);
    static int [] ans = new int[400];
    public static void solve() throws IOException {
        //int n=in.nextInt();
       // String str =in.next();
        //double ans = 0;
        int [] doi = {-1,1,-10,10,-100,100};
        Queue<Integer> q= new LinkedList<>();
        q.add(10);
        Arrays.fill(ans,400);
        ans[10]=0;
        while(!q.isEmpty())
        {
            int t = q.peek();
            q.poll();
            for(int i=0;i<6;i++)
            {
                int aa= t+doi[i];
                aa = Math.max(10,aa);
                aa = Math.min(300,aa);
                if(ans[aa]<=ans[t]+1) continue;
                ans[aa] = ans[t]+1;
                q.add(aa);
            }
            if(ans[300]>ans[t]+1)
            {
                ans[300]=ans[t]+1;
                q.add(300);
            }
        }
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            System.out.println(ans[a]+ans[b]+ans[c]+ans[d]);

    }
    public static void num (){

        return ;
    }
    public static void main(String[] arg) throws Exception {
        int t=1;

        //Scanner in = new Scanner(System.in);
        t = in.nextInt();
        while(t-->0)
        {
            solve();
        }

    }

    static class Read{
        static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        static StreamTokenizer st = new StreamTokenizer(br);
        static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
        public int nextInt() throws IOException {
            st.nextToken();
            return (int) st.nval;
        }
        public Long nextLong() throws IOException {
            st.nextToken();
            return (long) st.nval;
        }
        public String next() throws IOException{
            st.nextToken();
            return st.sval;
        }
        // 若需要nextDouble等方法，请自行调用Double.parseDouble包装
    }
    static class AWriter implements Closeable {
        private BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
        public void print(Object object) throws IOException {
            writer.write(object.toString());
        }
        public void println(Object object) throws IOException {
            writer.write(object.toString());
            writer.write(System.lineSeparator());
        }
        @Override
        public void close() throws IOException {
            writer.close();
        }
    }

}"
98,D,Java,61205455,2023-03-11 14:38:16,huvz,运行超时,"import java.io.*;
import java.util.*;

public class Main {
    //static Read in = new Read();

    //static AWriter out = new AWriter();
    static Scanner in = new Scanner(System.in);
    static int [] ans = new int[400];
    public static void solve() throws IOException {
        //int n=in.nextInt();
       // String str =in.next();
        //double ans = 0;
        int [] doi = {-1,1,-10,10,-100,100};
        Queue<Integer> q= new LinkedList<>();
        q.add(10);
        Arrays.fill(ans,400);
        ans[10]=0;
        while(!q.isEmpty())
        {
            int t = q.peek();
            q.poll();
            for(int i=0;i<6;i++)
            {
                int aa= t+doi[i];
                aa = Math.max(10,aa);
                aa = Math.min(300,aa);
                if(ans[aa]<=ans[t]+1) continue;
                ans[aa] = ans[t]+1;
                q.add(aa);
            }
            if(ans[300]>ans[t]+1)
            {
                ans[300]=ans[t]+1;
                q.add(300);
            }
        }
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            System.out.println(ans[a]+ans[b]+ans[c]+ans[d]);

    }
    public static void num (){

        return ;
    }
    public static void main(String[] arg) throws Exception {
        int t=1;

        //Scanner in = new Scanner(System.in);
        t = in.nextInt();
        while(t-->0)
        {
            solve();
        }

    }

    static class Read{
        static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        static StreamTokenizer st = new StreamTokenizer(br);
        static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
        public int nextInt() throws IOException {
            st.nextToken();
            return (int) st.nval;
        }
        public Long nextLong() throws IOException {
            st.nextToken();
            return (long) st.nval;
        }
        public String next() throws IOException{
            st.nextToken();
            return st.sval;
        }
        // 若需要nextDouble等方法，请自行调用Double.parseDouble包装
    }
    static class AWriter implements Closeable {
        private BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
        public void print(Object object) throws IOException {
            writer.write(object.toString());
        }
        public void println(Object object) throws IOException {
            writer.write(object.toString());
            writer.write(System.lineSeparator());
        }
        @Override
        public void close() throws IOException {
            writer.close();
        }
    }

}"
99,D,Java,61205708,2023-03-11 14:39:16,huvz,答案正确,"import java.io.*;
import java.util.*;

public class Main {
    static Read in = new Read();

    //static AWriter out = new AWriter();
    //static Scanner in = new Scanner(System.in);
    static int [] ans = new int[400];
    public static void solve() throws IOException {
        //int n=in.nextInt();
       // String str =in.next();
        //double ans = 0;
        int [] doi = {-1,1,-10,10,-100,100};
        Queue<Integer> q= new LinkedList<>();
        q.add(10);
        Arrays.fill(ans,400);
        ans[10]=0;
        while(!q.isEmpty())
        {
            int t = q.peek();
            q.poll();
            for(int i=0;i<6;i++)
            {
                int aa= t+doi[i];
                aa = Math.max(10,aa);
                aa = Math.min(300,aa);
                if(ans[aa]<=ans[t]+1) continue;
                ans[aa] = ans[t]+1;
                q.add(aa);
            }
            if(ans[300]>ans[t]+1)
            {
                ans[300]=ans[t]+1;
                q.add(300);
            }
        }
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            System.out.println(ans[a]+ans[b]+ans[c]+ans[d]);

    }
    public static void num (){

        return ;
    }
    public static void main(String[] arg) throws Exception {
        int t=1;

        //Scanner in = new Scanner(System.in);
        t = in.nextInt();
        while(t-->0)
        {
            solve();
        }

    }

    static class Read{
        static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        static StreamTokenizer st = new StreamTokenizer(br);
        static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
        public int nextInt() throws IOException {
            st.nextToken();
            return (int) st.nval;
        }
        public Long nextLong() throws IOException {
            st.nextToken();
            return (long) st.nval;
        }
        public String next() throws IOException{
            st.nextToken();
            return st.sval;
        }
        // 若需要nextDouble等方法，请自行调用Double.parseDouble包装
    }
    static class AWriter implements Closeable {
        private BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
        public void print(Object object) throws IOException {
            writer.write(object.toString());
        }
        public void println(Object object) throws IOException {
            writer.write(object.toString());
            writer.write(System.lineSeparator());
        }
        @Override
        public void close() throws IOException {
            writer.close();
        }
    }

}"
100,D,Java,61256905,2023-03-12 18:41:21,牛客935801330号（人工智能3211吴华聪）,答案错误,"



import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
                int t=in.nextInt();
                while (t-->0){
                    int sum=0;
                    for (int i = 0; i <4 ; i++) {
                        int x=in.nextInt();
                        if(x<=110){
                            if(x==110){
                                sum++;
                            }
                            else if(x>10){
                                int s1=0,s2=1;
                                int y=x%10;
                                if(y==0){
                                    s1+=(x-10)/10;
                                    s2+=(110-x)/10;
                                }
                                else {
                                    if(y<5){
                                        s1+=(x-10)/10+y;
                                        s2+=(110-x)/10+1+y;
                                    }
                                    else {
                                        s1+=(x-10)/10+1+10-y;
                                        s2+=(110-x)/10+10-y;
                                    }
                                }
                                s1=Math.min(s1,s2);
                                sum+=s1;
                            }
                        }
                        else {
                            if(x==210){
                                sum+=2;
                            }
                            else if(x==300){
                                sum++;
                            }
                            else {
                                int s1=0,s2=0;
                                int y=x%10;
                                if(y==0){
                                    s1=(x-110)/10;
                                    s2=(300-x)/10;
                                }
                                else {
                                    if(y<5){
                                        s1=(x-110)/10+y;
                                        s2=(300-x)/10+1+y;
                                    }
                                    else {
                                        s1=(x-110)/10+1+10-y;
                                        s2=(300-x)/10+10-y;
                                    }
                                }
                                s1=s1/10+s1%10+1;
                                s2=s2/10+s2%10+1;
                                s1=Math.min(s1,s2);
                                sum+=s1;
                            }
                        }
                    }
                    out.println(sum);
                }

        }
    }
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            } catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            return Integer.parseInt(next());
        }
        public double nextDouble(){
            return Double.parseDouble(next());
        }
        public long nextLong(){
            return Long.parseLong(next());
        }
        public BigInteger nextBigInteger()
        {
            return new BigInteger(next());
        }
        public BigDecimal nextBigDecimal()
        {
            return new BigDecimal(next());
        }

    }
}
"
101,D,Java,61257228,2023-03-12 18:55:20,牛客935801330号（人工智能3211吴华聪）,答案错误,"



import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
                int t=in.nextInt();
                while (t-->0){
                    int sum=0;
                    for (int i = 0; i <4 ; i++) {
                        int x=in.nextInt();
                        if(x<=110){
                            if(x==110){
                                sum++;
                            }
                            else if(x>10){
                                int s1=0,s2=1;
                                int y=x%10;
                                if(y==0){
                                    s1+=(x-10)/10;
                                    s2+=(110-x)/10;
                                }
                                else {
                                    if(y<5){
                                        s1+=(x-10)/10+y;
                                        s2+=(110-x)/10+1+y;
                                    }
                                    else {
                                        s1+=(x-10)/10+1+10-y;
                                        s2+=(110-x)/10+10-y;
                                    }
                                }
                                s1=Math.min(s1,s2);
                                sum+=s1;
                            }
                        }
                        else {
                            if(x==210){
                                sum+=2;
                            }
                            else if(x==300){
                                sum++;
                            }
                            else {
                                int s1=1,s2=1;
                                int y=x%10;
                                int z1=(x-110)/10;
                                int z2=(300-x)/10;
                                z1=z1/10+z1%10;
                                z2=z2/10+z2%10;
                                s1+=z1;
                                s2+=z2;
                                if(y!=0) {
                                    if(y<5){
                                        s1+=y;
                                        s2+=1+y;
                                    }
                                    else {
                                        s1+=1+10-y;
                                        s2+=10-y;
                                    }
                                }
                                s1=Math.min(s1,s2);
                                sum+=s1;
                            }
                        }
                    }
                    out.println(sum);
                }

        }
    }
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            } catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            return Integer.parseInt(next());
        }
        public double nextDouble(){
            return Double.parseDouble(next());
        }
        public long nextLong(){
            return Long.parseLong(next());
        }
        public BigInteger nextBigInteger()
        {
            return new BigInteger(next());
        }
        public BigDecimal nextBigDecimal()
        {
            return new BigDecimal(next());
        }

    }
}
"
102,D,Java,61258195,2023-03-12 19:30:54,牛客935801330号（人工智能3211吴华聪）,答案错误,"



import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
                int t=in.nextInt();
                while (t-->0){
                    int sum=0;
                    for (int i = 0; i <4 ; i++) {
                        int x=in.nextInt();
                        if(x<=110){
                            if(x==110){
                                sum++;
                            }
                            else if(x>10){
                                int s1=0,s2=1;
                                int y=x%10;
                                if(y==0){
                                    s1+=(x-10)/10;
                                    s2+=(110-x)/10;
                                }
                                else {
                                    if(y<5){
                                        s1+=(x-10)/10+y;
                                        s2+=(110-x)/10+1+y;
                                    }
                                    else {
                                        s1+=(x-10)/10+1+10-y;
                                        s2+=(110-x)/10+10-y;
                                    }
                                }
                                s1=Math.min(s1,s2);
                                sum+=s1;
                            }
                        }
                        else if(x>=205&&x<=255) {
                            sum+=2;
                             if(x<=210) {
                                sum+=210-x;
                            }
                            else {
                                int y=x%10;
                                sum+=(x-210)/10;
                                if(y!=0) {
                                    if(y>=6){
                                        sum+=1+10-y;
                                    }
                                    else {
                                        sum+=y;
                                    }
                                }
                            }
                        }
                        else if(x<205){
                            if(x>=200){
                                sum+=2+x-200;
                            }
                            else {
                                int s1=1,s2=2;
                                int y=x%10;
                                s2+=(200-x)/10;
                                s1+=(x-110)/10;
                                if(y!=0){
                                    if(y>=5){
                                        s2+=10-y;
                                        s1+=1+10-y;
                                    }
                                    else {
                                        s1+=y;
                                        s2+=1+y;
                                    }
                                }
                                s1=Math.min(s1,s2);
                                sum+=s1;
                            }
                        }
                        else {
                            sum+=1+(300-x)/10;
                            int y=x%10;
                            if(y!=0){
                                if(y>=5){
                                    sum+=10-y;
                                }
                                else {
                                    sum+=1+y;
                                }
                            }
                        }
                    }
                    out.println(sum);
                }

        }
    }
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
        boolean hasNext()
        {
            while (tokenizer == null || !tokenizer.hasMoreTokens())
            {
                try
                {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e)
                {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
        public String nextLine()
        {
            String str = null;
            try
            {
                str = reader.readLine();
            } catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            return Integer.parseInt(next());
        }
        public double nextDouble(){
            return Double.parseDouble(next());
        }
        public long nextLong(){
            return Long.parseLong(next());
        }
        public BigInteger nextBigInteger()
        {
            return new BigInteger(next());
        }
        public BigDecimal nextBigDecimal()
        {
            return new BigDecimal(next());
        }

    }
}
"
103,D,Java,61268528,2023-03-13 16:20:18,rookie1号,答案错误,"
import java.io.*;
import java.math.*;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        int T=in.nextInt();
        //int T=1;
        while(T>0){
            //String[] strs1 = re.readLine().split("" "");
            //int n=Integer.parseInt(strs1[0]);
            //String s=re.readLine();
            //char arr[]=s.toCharArray();

            //long[][] p = new long[n][2];//对 long 二维数组排序
            //Arrays.sort(p, (a, b) -> a[0] <= b[0] (?) -1 : 1);
            //Set<Integer>set=new HashSet<>();
            //Map<Long,Integer>map=new HashMap<>();
            //Map<Integer,List<Integer>>map=new HashMap<>();
            //TreeSet<Integer> set = new TreeSet<>();
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            int aa=a%10;
            int bb=b%10;
            int cc=c%10;
            int dd=d%10;
            a-=aa;
            b-=bb;
            c-=cc;
            d-=dd;
            int res=0;
            int ans=10;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            //out.println(res);

            ans=10;
            a=c;aa=cc;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }



            ans=10;
            a=d;aa=dd;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }


            ans=10;
            a=b;aa=bb;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            
            out.println(res);
            
            T--;
        }
        out.flush();
        out.close();

    }

    static class in {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static String next() throws IOException {
            input.nextToken();
            return input.sval;
        }

        public static double nextDouble() throws IOException {
            input.nextToken();
            return input.nval;
        }
    }
}"
104,D,Java,61268530,2023-03-13 16:20:33,rookie1号,答案错误,"import java.io.*;
import java.math.*;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        int T=in.nextInt();
        //int T=1;
        while(T>0){
            //String[] strs1 = re.readLine().split("" "");
            //int n=Integer.parseInt(strs1[0]);
            //String s=re.readLine();
            //char arr[]=s.toCharArray();

            //long[][] p = new long[n][2];//对 long 二维数组排序
            //Arrays.sort(p, (a, b) -> a[0] <= b[0] (?) -1 : 1);
            //Set<Integer>set=new HashSet<>();
            //Map<Long,Integer>map=new HashMap<>();
            //Map<Integer,List<Integer>>map=new HashMap<>();
            //TreeSet<Integer> set = new TreeSet<>();
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            int aa=a%10;
            int bb=b%10;
            int cc=c%10;
            int dd=d%10;
            a-=aa;
            b-=bb;
            c-=cc;
            d-=dd;
            int res=0;
            int ans=10;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            //out.println(res);

            ans=10;
            a=c;aa=cc;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }



            ans=10;
            a=d;aa=dd;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }


            ans=10;
            a=b;aa=bb;
            if(a>=160){
                
                if(a>=260){
                    res++;
                    ans=300;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else if(a>=210){
                    ans=210;
                    res+=2;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else{
                    ans=200;
                    res+=2;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
            }
            else{
                if(a>=110){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                else if(a>=60){
                    ans=110;
                    res++;
                    while(ans!=a){
                        ans-=10;
                        res++;
                    }
                }
                else{
                    while(ans!=a){
                        ans+=10;
                        res++;
                    }
                }
                
            }
            if(aa>=6){
                res+=11-aa;
            }
            else{
                res+=aa;
            }
            
            out.println(res);
            
            T--;
        }
        out.flush();
        out.close();

    }

    static class in {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static String next() throws IOException {
            input.nextToken();
            return input.sval;
        }

        public static double nextDouble() throws IOException {
            input.nextToken();
            return input.nval;
        }
    }
}"
105,D,Java,61269231,2023-03-13 16:56:52,rookie1号,运行超时,"
import java.io.*;
import java.math.*;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        int T=in.nextInt();
        //int T=1;
        while(T>0){
            //String[] strs1 = re.readLine().split("" "");
            //int n=Integer.parseInt(strs1[0]);
            //String s=re.readLine();
            //char arr[]=s.toCharArray();

            //long[][] p = new long[n][2];//对 long 二维数组排序
            //Arrays.sort(p, (a, b) -> a[0] <= b[0] (?) -1 : 1);
            //Set<Integer>set=new HashSet<>();
            //Map<Long,Integer>map=new HashMap<>();
            //Map<Integer,List<Integer>>map=new HashMap<>();
            //TreeSet<Integer> set = new TreeSet<>();
            
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            int res=0;
            bfs();
            res+=arr[a];
            bfs();
            res+=arr[b];
            bfs();
            res+=arr[c];
            bfs();
            res+=arr[d];
            out.println(res);





            
            T--;
        }
        out.flush();
        out.close();

    }
    static int arr[];
    static Deque<Integer>que;
    static int ans[]={1,-1,10,-10,100,-100};
    static void bfs(){

       arr=new int [310];
        Arrays.fill(arr,10000000);
        arr[300]=1;arr[10]=0;
        que=new ArrayDeque<>();
        que.addLast(10);que.addLast(300);
        
        while(!que.isEmpty() ){
            int len=que.size();
            
            for(int i=0;i<len;i++){
                int x=que.pollLast();
                for(int j=0;j<ans.length;j++){
                    if(x+ans[j]<10||x+ans[j]>300)continue;

                    if(arr[x+ans[j]]>arr[x]+1){
                        arr[x+ans[j] ]=arr[x]+1;
                        que.addLast(x+ans[j]);
                        //System.out.println(x+ans[j]);
                    }
                }
            }
        }
    }


    static class in {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static String next() throws IOException {
            input.nextToken();
            return input.sval;
        }

        public static double nextDouble() throws IOException {
            input.nextToken();
            return input.nval;
        }
    }
}"
106,D,Java,61269299,2023-03-13 16:59:58,rookie1号,运行超时,"
import java.io.*;
import java.math.*;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        int T=in.nextInt();
        //int T=1;
        while(T>0){
            //String[] strs1 = re.readLine().split("" "");
            //int n=Integer.parseInt(strs1[0]);
            //String s=re.readLine();
            //char arr[]=s.toCharArray();

            //long[][] p = new long[n][2];//对 long 二维数组排序
            //Arrays.sort(p, (a, b) -> a[0] <= b[0] (?) -1 : 1);
            //Set<Integer>set=new HashSet<>();
            //Map<Long,Integer>map=new HashMap<>();
            //Map<Integer,List<Integer>>map=new HashMap<>();
            //TreeSet<Integer> set = new TreeSet<>();
            
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            int res=0;
            bfs();
            res+=arr[a];
            res+=arr[b];
            res+=arr[c];
            res+=arr[d];
            out.println(res);





            
            T--;
        }
        out.flush();
        out.close();

    }
    static int arr[];
    static Deque<Integer>que;
    static int ans[]={1,-1,10,-10,100,-100};
    static void bfs(){

       arr=new int [310];
        Arrays.fill(arr,10000000);
        arr[300]=1;arr[10]=0;
        que=new ArrayDeque<>();
        que.addLast(10);que.addLast(300);
        
        while(!que.isEmpty() ){
            int len=que.size();
            
            for(int i=0;i<len;i++){
                int x=que.pollLast();
                for(int j=0;j<ans.length;j++){
                    if(x+ans[j]<10||x+ans[j]>300)continue;

                    if(arr[x+ans[j]]>arr[x]+1){
                        arr[x+ans[j] ]=arr[x]+1;
                        que.addLast(x+ans[j]);
                        //System.out.println(x+ans[j]);
                    }
                }
            }
        }
    }


    static class in {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static String next() throws IOException {
            input.nextToken();
            return input.sval;
        }

        public static double nextDouble() throws IOException {
            input.nextToken();
            return input.nval;
        }
    }
}"
107,D,Java,61269315,2023-03-13 17:00:59,rookie1号,答案正确,"
import java.io.*;
import java.math.*;
import java.util.*;

public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {
        bfs();
        int T=in.nextInt();
        //int T=1;
        while(T>0){
            //String[] strs1 = re.readLine().split("" "");
            //int n=Integer.parseInt(strs1[0]);
            //String s=re.readLine();
            //char arr[]=s.toCharArray();

            //long[][] p = new long[n][2];//对 long 二维数组排序
            //Arrays.sort(p, (a, b) -> a[0] <= b[0] (?) -1 : 1);
            //Set<Integer>set=new HashSet<>();
            //Map<Long,Integer>map=new HashMap<>();
            //Map<Integer,List<Integer>>map=new HashMap<>();
            //TreeSet<Integer> set = new TreeSet<>();
            
            int a=in.nextInt();
            int b=in.nextInt();
            int c=in.nextInt();
            int d=in.nextInt();
            int res=0;
            
            res+=arr[a];
            res+=arr[b];
            res+=arr[c];
            res+=arr[d];
            out.println(res);





            
            T--;
        }
        out.flush();
        out.close();

    }
    static int arr[];
    static Deque<Integer>que;
    static int ans[]={1,-1,10,-10,100,-100};
    static void bfs(){

       arr=new int [310];
        Arrays.fill(arr,10000000);
        arr[300]=1;arr[10]=0;
        que=new ArrayDeque<>();
        que.addLast(10);que.addLast(300);
        
        while(!que.isEmpty() ){
            int len=que.size();
            
            for(int i=0;i<len;i++){
                int x=que.pollLast();
                for(int j=0;j<ans.length;j++){
                    if(x+ans[j]<10||x+ans[j]>300)continue;

                    if(arr[x+ans[j]]>arr[x]+1){
                        arr[x+ans[j] ]=arr[x]+1;
                        que.addLast(x+ans[j]);
                        //System.out.println(x+ans[j]);
                    }
                }
            }
        }
    }


    static class in {
        private static final StreamTokenizer input = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

        public static int nextInt() throws IOException {
            input.nextToken();
            return (int) input.nval;
        }

        public static String next() throws IOException {
            input.nextToken();
            return input.sval;
        }

        public static double nextDouble() throws IOException {
            input.nextToken();
            return input.nval;
        }
    }
}"
108,D,Java,61289996,2023-03-14 21:33:15,ahhhyp,答案正确,"import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;

public class Main {
    static int[] set = new int[301];
    public static void main(String[] args) throws Exception{
        InputD in = new InputD();
        bfs();
        int T = in.nextInt();
        int[] res = new int[T];
        for(int t = 0; t < T; t++){
            int a = in.nextInt(), b = in.nextInt(), c = in.nextInt(), d = in.nextInt();
            res[t] = set[a] + set[b] + set[c] + set[d];
        }
        PrintWriter out = new PrintWriter(System.out);
        for(int i : res){
            out.println(i);
        }
        out.flush();
        out.close();
    }
    static void bfs(){
        int[] op = {1,-1,10,-10,100,-100};
        Arrays.fill(set,300);
        set[10] = 0; set[300] = 1;
        Deque<Integer> que = new ArrayDeque<>();
        que.add(10); que.add(300);
        while(!que.isEmpty()){
            int len = que.size();
            for(int i = 0; i < len; i++){
                int e = que.pollLast();
                for(int j = 0; j < op.length; j++){
                    if(e + op[j] < 10 || e+op[j] > 300) continue;
                    if(set[e+op[j]] > set[e]+1){
                        set[e+op[j]] = set[e] + 1;
                        que.addLast(e+op[j]);
                    }
                }
            }
        }
    }
}

class InputD {
    private BufferedReader br;
    private StringTokenizer st;
    public InputD() {
        br = new BufferedReader(new InputStreamReader(System.in));
        st = null;
    }
    public String next() throws Exception{
        while(st == null || !st.hasMoreElements()){
            st = new StringTokenizer(br.readLine());
        }
        return st.nextToken();
    }
    public int nextInt() throws Exception{
        return Integer.parseInt(next());
    }
}
"
109,D,Java,61290162,2023-03-14 21:42:02,ahhhyp,答案正确,"import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.*;

public class Main {
    static int[] set = new int[301];
    public static void main(String[] args) throws Exception{
        InputD in = new InputD();
        bfs();
        int T = in.nextInt();
        int[] res = new int[T];
        for(int t = 0; t < T; t++){
            int a = in.nextInt(), b = in.nextInt(), c = in.nextInt(), d = in.nextInt();
            res[t] = set[a] + set[b] + set[c] + set[d];
        }
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        for(int r : res){
            out.println(r);
        }
        out.flush();
        out.close();
    }
    static void bfs(){
        int[] op = {1,-1,10,-10,100,-100};
        set[10] = 0; set[300] = 1;
        Deque<Integer> que = new ArrayDeque<>();
        que.add(10); que.add(300);
        while(!que.isEmpty()){
            int len = que.size();
            for(int i = 0; i < len; i++){
                int e = que.pollLast();
                for(int j = 0; j < op.length; j++){
                    if(e + op[j] <= 10 || e+op[j] > 300) continue;
                    if(set[e+op[j]] > set[e]+1 || set[e+op[j]] == 0){
                        set[e+op[j]] = set[e] + 1;
                        que.addLast(e+op[j]);
                    }
                }
            }
        }
    }
}

class InputD {
    private BufferedReader br;
    private StringTokenizer st;
    public InputD() {
        br = new BufferedReader(new InputStreamReader(System.in));
        st = null;
    }
    public String next() throws Exception{
        while(st == null || !st.hasMoreElements()){
            st = new StringTokenizer(br.readLine());
        }
        return st.nextToken();
    }
    public int nextInt() throws Exception{
        return Integer.parseInt(next());
    }
}
"
110,D,Java,61290232,2023-03-14 21:44:37,ahhhyp,答案正确,"import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.*;

public class Main{
    static int[] set = new int[301];
    public static void main(String[] args) throws Exception{
        InputD in = new InputD();
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        bfs();
        int T = in.nextInt();
        int[] res = new int[T];
        for(int t = 0; t < T; t++){
            int a = in.nextInt(), b = in.nextInt(), c = in.nextInt(), d = in.nextInt();
            out.println(set[a] + set[b] + set[c] + set[d]);
        }
        out.flush();
        out.close();
    }
    static void bfs(){
        int[] op = {1,-1,10,-10,100,-100};
        set[10] = 0; set[300] = 1;
        Deque<Integer> que = new ArrayDeque<>();
        que.add(10); que.add(300);
        while(!que.isEmpty()){
            int len = que.size();
            for(int i = 0; i < len; i++){
                int e = que.pollLast();
                for(int j = 0; j < op.length; j++){
                    if(e + op[j] <= 10 || e+op[j] > 300) continue;
                    if(set[e+op[j]] > set[e]+1 || set[e+op[j]] == 0){
                        set[e+op[j]] = set[e] + 1;
                        que.addLast(e+op[j]);
                    }
                }
            }
        }
    }
}

class InputD {
    private BufferedReader br;
    private StringTokenizer st;
    public InputD() {
        br = new BufferedReader(new InputStreamReader(System.in));
        st = null;
    }
    public String next() throws Exception{
        while(st == null || !st.hasMoreElements()){
            st = new StringTokenizer(br.readLine());
        }
        return st.nextToken();
    }
    public int nextInt() throws Exception{
        return Integer.parseInt(next());
    }
}
"
111,D,Java,61302891,2023-03-15 21:25:20,睡不醒的大白白,答案错误,"import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int nums = scan.nextInt();
        for(int i = 0; i < nums; i++){
            int[] arr = new int[4];
            for(int j = 0; j < arr.length; j++){
                arr[j] = scan.nextInt();
            }
        int[] store = new int[310];
         for(int k = 0; k < arr.length; k++){
             bfs(10, store);
         }
        int times = 0;
         for(int m = 0; m < arr.length; m++ ){
             if(arr[m] == 10){
                 times += 0;
             }else{
                times += store[arr[m]]; 
             }
             
         }
        System.out.println(times);
      
  
        }
    }
    
     public static void bfs(int begin, int[] store){
         Queue<Integer> que = new ArrayDeque<Integer>();
         que.add(begin);
         while(!que.isEmpty()){
             int val = que.poll();
//              System.out.println(val);
             int d = store[val];
             addNum(val - 1, d + 1, store);
             addNum(val + 1, d + 1, store);
             addNum(val - 10, d + 1, store);
             addNum(val + 10, d + 1, store);
             addNum(val - 100, d + 1, store);
             addNum(val + 100, d + 1, store);
             addNum(300, d + 1, store);
             addNum(10, d + 1, store);
         }
 
          
    }
    
    public static void addNum(int x, int dis, int[] store){
        if(x < 10 || x > 300){
//             System.out.println(4444);
            return;
        }
        if(store[x] == 0){
            store[x] = dis;
            return;
        }
    }
}

    

   "
112,D,Java,61302961,2023-03-15 21:28:18,睡不醒的大白白,答案正确,"import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int nums = scan.nextInt();
        for(int i = 0; i < nums; i++){
            int[] arr = new int[4];
            for(int j = 0; j < arr.length; j++){
                arr[j] = scan.nextInt();
            }
        int[] store = new int[310];
         for(int k = 0; k < arr.length; k++){
             bfs(10, store);
         }
        int times = 0;
         for(int m = 0; m < arr.length; m++ ){
             if(arr[m] == 10){
                 times += 0;
             }else{
                times += store[arr[m]]; 
             }
             
         }
        System.out.println(times);
      
  
        }
    }
    
     public static void bfs(int begin, int[] store){
         Queue<Integer> que = new ArrayDeque<Integer>();
         que.add(begin);
         while(!que.isEmpty()){
             int val = que.poll();
//              System.out.println(val);
             int d = store[val];
             addNum(val - 1, d + 1, store, que);
             addNum(val + 1, d + 1, store, que);
             addNum(val - 10, d + 1, store, que);
             addNum(val + 10, d + 1, store, que);
             addNum(val - 100, d + 1, store, que);
             addNum(val + 100, d + 1, store, que);
             addNum(300, d + 1, store, que);
             addNum(10, d + 1, store, que);
         }
 
          
    }
    
    public static void addNum(int x, int dis, int[] store, Queue<Integer> que){
        if(x < 10 || x > 300){
            return;
        }
        if(store[x] == 0){
            store[x] = dis;
            que.add(x);
//             System.out.println(dis);
            return;
        }
    }
}

    

   "
113,D,Java,61627295,2023-03-31 15:17:28,一个男人_,答案正确,"import java.io.*;
import java.util.*;

public class Main {
    static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static BufferedReader bin = new BufferedReader(new InputStreamReader(System.in));
    static final int N = 310, INF = 0x3f3f3f3f;
    static int[][] g = new int[N][N];
    static int t;
    static int[] d = new int[N];
    static boolean[] st = new boolean[N];
    
    static int cin() throws IOException {
        in.nextToken();
        return (int) in.nval;
    }
    
    static void dijkstra() {
        Arrays.fill(d, INF);
        d[10] = 0;
        for (int i = 0; i < N - 1; i ++ ) {
            int t = -1;
            for (int j = 1; j < N; j ++ ) {
                if (!st[j] && (t == -1 || d[t] > d[j])) {
                    t = j;
                }
            }
            for (int j = 1; j < N; j ++ ) {
                d[j] = Math.min(d[j], d[t] + g[t][j]);
            }
            st[t] = true;
        }
    }
    
    public static void main(String[] args) throws IOException {
        for (int i = 0; i < N; i ++ ) {
            Arrays.fill(g[i], INF);
            g[i][300] = 1;
            g[i][10] = 1;
            g[i][i] = 0;
        }
        for (int i = 0; i < N; i ++ ) {
            if (i + 1 < N) {
                g[i][i + 1] = Math.min(g[i][i + 1], 1);
                g[i + 1][i] = Math.min(g[i + 1][i], 1);
            }
            if (i - 1 >= 0) {
                g[i][i - 1] = Math.min(g[i][i - 1], 1);
                g[i - 1][i] = Math.min(g[i - 1][i], 1);
            }
            if (i + 10 < N){
                g[i][i + 10] = Math.min(g[i][i + 10], 1);
                g[i + 10][i] = Math.min(g[i + 10][i], 1);
            }
            if (i - 10 >= 0) {
                g[i][i - 10] = Math.min(g[i][i - 10], 1);
                g[i - 10][i] = Math.min(g[i - 10][i], 1);
            }
            if (i + 100 < N) {
                g[i][i + 100] = Math.min(g[i][i + 100], 1);
                g[i + 100][i] = Math.min(g[i + 100][i], 1);
            }
            if (i - 100 >= 0) {
                g[i][i - 10] = Math.min(g[i][i - 100], 1);
                g[i - 10][i] = Math.min(g[i - 100][i], 1);
            }
        }
        dijkstra();
        t = cin();
        while (t -- > 0) {
            int a = cin(), b = cin(), c = cin(), dd = cin();
            out.println(d[a] + d[b] + d[c] + d[dd]);
        }
        out.flush();
    }
}"
114,D,Java,61627701,2023-03-31 15:57:47,一个男人_,答案正确,"import java.io.*;
import java.util.*;

public class Main {
    static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static BufferedReader bin = new BufferedReader(new InputStreamReader(System.in));
    static final int N = 310, INF = 0x3f3f3f3f;
    static int[][] g = new int[N][N];
    static int t;
    static int[] d = new int[N];
    static boolean[] st = new boolean[N];
    
    static int cin() throws IOException {
        in.nextToken();
        return (int) in.nval;
    }
    
    static void dijkstra() {
        Arrays.fill(d, INF);
        d[10] = 0;
        for (int i = 0; i < N - 1; i ++ ) {
            int t = -1;
            for (int j = 1; j < N; j ++ ) {
                if (!st[j] && (t == -1 || d[t] > d[j])) {
                    t = j;
                }
            }
            for (int j = 1; j < N; j ++ ) {
                d[j] = Math.min(d[j], d[t] + g[t][j]);
            }
            st[t] = true;
        }
    }
    
    public static void main(String[] args) throws IOException {
        for (int i = 0; i < N; i ++ ) {
            Arrays.fill(g[i], INF);
            g[i][300] = 1;
            g[i][10] = 1;
            g[i][i] = 0;
        }
        for (int i = 0; i < N; i ++ ) {
            if (i + 1 < N) {
                g[i][i + 1] = Math.min(g[i][i + 1], 1);
                g[i + 1][i] = Math.min(g[i + 1][i], 1);
            }
            if (i - 1 >= 0) {
                g[i][i - 1] = Math.min(g[i][i - 1], 1);
                g[i - 1][i] = Math.min(g[i - 1][i], 1);
            }
            if (i + 10 < N){
                g[i][i + 10] = Math.min(g[i][i + 10], 1);
                g[i + 10][i] = Math.min(g[i + 10][i], 1);
            }
            if (i - 10 >= 0) {
                g[i][i - 10] = Math.min(g[i][i - 10], 1);
                g[i - 10][i] = Math.min(g[i - 10][i], 1);
            }
            if (i + 100 < N) {
                g[i][i + 100] = Math.min(g[i][i + 100], 1);
                g[i + 100][i] = Math.min(g[i + 100][i], 1);
            }
            if (i - 100 >= 0) {
                g[i][i - 10] = Math.min(g[i][i - 100], 1);
                g[i - 10][i] = Math.min(g[i - 100][i], 1);
            }
        }
        dijkstra();
        t = cin();
        while (t -- > 0) {
            int a = cin(), b = cin(), c = cin(), dd = cin();
            out.println(d[a] + d[b] + d[c] + d[dd]);
        }
        out.flush();
    }
}"
115,D,Java,61753151,2023-04-05 14:29:02,范宗林,答案正确,"import java.io.*;
import java.util.Arrays;

public class Main {
    public static BufferedReader ins=new BufferedReader(new InputStreamReader(System.in));
    public static StreamTokenizer in=new StreamTokenizer(ins);
    public static PrintWriter out=new PrintWriter(System.out);
    public static int MAX = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
        in.nextToken();
        int t = (int) in.nval;
        int[] sum = new int[301];
        Arrays.fill(sum, MAX);
        dfs(10,0,sum);
        while(t > 0){
            in.nextToken();
            int a = (int) in.nval;
            in.nextToken();
            int b = (int) in.nval;
            in.nextToken();
            int c = (int) in.nval;
            in.nextToken();
            int d = (int) in.nval;
            out.println(sum[a] + sum[b] + sum[c] + sum[d]);
            t --;
        }
        out.flush();
        out.close();
    }
    public static void dfs(int x, int y, int[] sum){
        if(x < 10 || x > 300) return;
        if(sum[x] <= y) return;
        sum[x] = y;
        dfs(x+1,y+1,sum);
        dfs(x+10,y+1,sum);
        dfs(x+100,y+1,sum);
        dfs(x-1,y+1,sum);
        dfs(x-10,y+1,sum);
        dfs(x-100,y+1,sum);
        dfs(10,y+1,sum);
        dfs(300,y+1,sum);
    }
}
"
116,D,Java,61764196,2023-04-06 14:56:17,SongL7,答案正确,"
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
 
public class Main{
    static FastReader in = new FastReader();
    static int N = 1000006, mod = 998244353;
    static int inf = 0x3f3f3f3f;
    static double eqs = 1e-9;
    static int []dis = new int[N];
    static int []dir = {1,-1,10,-10,100,-100};
    
    @SuppressWarnings({""all""})
    static void solve() {
    	int ans = 0;
    	for(int i = 0; i < 4; ++i) {
    		int x = in.nextInt();
    		if(x == 10) continue;
    		ans += dis[x];
    	}
    	System.out.println(ans);
    }
    
    static void bfs() {
    	Arrays.fill(dis, inf);
    	Queue<Integer> q = new LinkedList();
    	dis[10] = 0;
    	q.add(10);
    	while(!q.isEmpty()) {
    		int t = q.poll();
    		for(int i = 0; i < 6; ++i) {
    			int a = t + dir[i];
    			a = max(10, a);
    			a = min(300, a);
    			if(dis[a] <= dis[t] + 1) continue;
    			dis[a] = dis[t] + 1;
    			q.add(a);
    		}
    		
    		if(dis[300] > dis[t] + 1) {
    			dis[300] = dis[t] + 1;
    			q.add(300);
    		}
    	}
    }
    
    
    public static void main(String[] args)  {
        int t = in.nextInt();
        bfs();
        while( t --> 0) {
            solve();
        }
    }
 
    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 (?) a : b;
    }
 
    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 (?) a : b;
    }
 
    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }
 
 
    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;
 
        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }
 
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt() {
            return Integer.parseInt(next());
        }
 
        long nextLong() {
            return Long.parseLong(next());
        }
 
        double nextDouble() {
            return Double.parseDouble(next());
        }
 
        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
}
"
117,D,Java,61865711,2023-04-13 16:13:02,追忆似流水年华,答案正确,"

import java.util.Arrays;
import java.util.Scanner;

public class Main {
   static int[]dp=new int[300+100];
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n = sc.nextInt();
        int[][]num=new int[n][4];
        for(int i=0;i<n;i++){
            for(int j=0;j<4;j++){
                num[i][j]=sc.nextInt();
            }
        }
        Arrays.fill(dp,Integer.MAX_VALUE);
        bfs(10,0);
        for(int i=0;i<n;i++){
            System.out.println(dp[num[i][0]]+dp[num[i][1]]+dp[num[i][2]]+dp[num[i][3]]);
        }
    }
    public static void bfs(int num,int step){
        if(num<10||num>300){
            if(num<10)
            dp[10]=Math.min(step,dp[10]);
            else if(num>300)
                dp[300]=Math.min(step,dp[300]);
            return;
        }
        dp[num]=Math.min(dp[num],step);
        if(step>dp[num]){
            return;
        }
        bfs(num+1,step+1);
        bfs(num-1,step+1);
        bfs(num+10,step+1);
        bfs(num-10,step+1);
        bfs(num+100,step+1);
        bfs(num-100,step+1);
        bfs(300,step+1);
        bfs(10,step+1);

    }
}
"
