,index,languageName,submissionId,submitTime,userName,statusMessage,code
0,F,C,61482501,2023-03-24 19:44:40,sss208,运行超时,"#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int main(){
    int n,res = 0;
    scanf(""%d"",&n);
    int** nums = (int**)malloc(sizeof(int*)*n);
    for(int i = 0;i < n;i++){
        nums[i] = (int*)malloc(sizeof(int)*2);
        scanf(""%d %d"",&nums[i][0],&nums[i][1]);
    }
    for(int i = 0;i < n - 2;i++){
        for(int j = i + 1;j < n - 1;j++){
            for(int k = j + 1;k < n;k++){
                int x1 = nums[i][0],x2 = nums[j][0],x3 = nums[k][0];
                int y1 = nums[i][1],y2 = nums[j][1],y3 = nums[k][1];
                if((y2 - y1) * (x3 - x1) != (y3 - y1) * (x2 - x1)){
                    int num1 = pow(x2-x1,2)+pow(y2-y1,2);
                    int num2 = pow(x3-x1,2)+pow(y3-y1,2);
                    int num3 = pow(x2-x3,2)+pow(y2-y3,2);
                    if(num1 == num2 || num2 == num3 || num1 == num3){
                        res++;
                    }
                }
            }
        }
    }
    printf(""%d"",res);
    return 0;
}"
1,F,C,61485894,2023-03-24 20:11:03,向量豆豆,段错误,"#include<stdio.h>

int dengyao(int x1,int y1,int x2,int y2,int x3,int y3)
{
    int a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
    int c=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
    int b=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
    if((y3-y1)*(x2-x1)==(y2-y1)*(x3-x1))
        return 0;
    if(a==c)
        return 1;
    if(a==b)
        return 1;
    if(b==c)
        return 1;
    return 0;
}

int main()
{
    int nums[400][2];
    int n;
    scanf(""%d"",&n);
    int i;
    int j;
    int k;
    int count=0;
    for(i=0;i<n;i++)
    {
        scanf(""%d%d"",&nums[i][0],&nums[i][1]);
    }
    for(i=0;i<n;i++)
    {
        for(j=i;j<n;j++)
        {
            for(k=j;k<n;k++)
            {
                if(dengyao(nums[i][0],nums[i][1],nums[j][0],nums[j][1],nums[k][0],nums[k][1])==1)
                    count++;
            }
        }
    }
    printf(""%d"",count);
}"
2,F,C,61485936,2023-03-24 20:11:23,向量豆豆,运行超时,"#include<stdio.h>

int dengyao(int x1,int y1,int x2,int y2,int x3,int y3)
{
    int a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
    int c=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
    int b=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
    if((y3-y1)*(x2-x1)==(y2-y1)*(x3-x1))
        return 0;
    if(a==c)
        return 1;
    if(a==b)
        return 1;
    if(b==c)
        return 1;
    return 0;
}

int main()
{
    int nums[3000][2];
    int n;
    scanf(""%d"",&n);
    int i;
    int j;
    int k;
    int count=0;
    for(i=0;i<n;i++)
    {
        scanf(""%d%d"",&nums[i][0],&nums[i][1]);
    }
    for(i=0;i<n;i++)
    {
        for(j=i;j<n;j++)
        {
            for(k=j;k<n;k++)
            {
                if(dengyao(nums[i][0],nums[i][1],nums[j][0],nums[j][1],nums[k][0],nums[k][1])==1)
                    count++;
            }
        }
    }
    printf(""%d"",count);
}"
3,F,C,61486000,2023-03-24 20:11:54,向量豆豆,运行超时,"#include<stdio.h>

int dengyao(int x1,int y1,int x2,int y2,int x3,int y3)
{
    int a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
    int c=(x3-x2)*(x3-x2)+(y3-y2)*(y3-y2);
    int b=(x1-x3)*(x1-x3)+(y1-y3)*(y1-y3);
    if((y3-y1)*(x2-x1)==(y2-y1)*(x3-x1))
        return 0;
    if(a==c)
        return 1;
    if(a==b)
        return 1;
    if(b==c)
        return 1;
    return 0;
}

int main()
{
    int nums[3000][2];
    int n;
    scanf(""%d"",&n);
    int i;
    int j;
    int k;
    int count=0;
    for(i=0;i<n;i++)
    {
        scanf(""%d%d"",&nums[i][0],&nums[i][1]);
    }
    for(i=0;i<n;i++)
    {
        for(j=i;j<n;j++)
        {
            for(k=j;k<n;k++)
            {
                if(dengyao(nums[i][0],nums[i][1],nums[j][0],nums[j][1],nums[k][0],nums[k][1])==1)
                    count++;
            }
        }
    }
    printf(""%d"",count);
}"
4,F,C,61486780,2023-03-24 20:18:18,牛客20220304118,运行超时,"#include <stdio.h>
//#include <stdio.h>

int fun1(int*arr1,int*arr2,int*arr3){
	if(arr1[0]-arr2[0]==0){
		return arr2[0]-arr3[0]!=0;
	}
	if(arr2[0]-arr3[0]==0){
		return arr1[0]-arr2[0]!=0;
	}
	if(arr1[0]-arr3[0]==0){
		return arr1[0]-arr2[0]!=0;
	}
	if((double)(arr1[1]-arr2[1])/(arr1[0]-arr2[0])==
	(double)(arr2[1]-arr3[1])/(arr2[0]-arr3[0])){
		return 0;
	}
	return 1;
}

int fun2(int x1,int y1,int x2,int y2){
	return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
//	return t>0(?)t:-t;
}

int main()
{
	int n,i,j,k;
	long long num=0;
	scanf(""%d"",&n);
	int arr[n][2];
	for(i=0;i<n;i++){
		scanf(""%d %d"",&arr[i][0],&arr[i][1]);
	}
	for(i=0;i<n;i++){
		for(j=i+1;j<n;j++){
			for(k=j+1;k<n;k++){
				if(fun1(arr[i],arr[j],arr[k])==1){
//				printf(""@@\n"");
					if(fun2(arr[i][0],arr[i][1],
					arr[j][0],arr[j][1])==
					fun2(arr[j][0],arr[j][1],
					arr[k][0],arr[k][1])||
					fun2(arr[i][0],arr[i][1],
					arr[j][0],arr[j][1])==
					fun2(arr[i][0],arr[i][1],
					arr[k][0],arr[k][1])||
					fun2(arr[j][0],arr[j][1],
					arr[k][0],arr[k][1])==
					fun2(arr[i][0],arr[i][1],
					arr[k][0],arr[k][1])
					){
						num++;
					}
				}
			}
		}
	}
	printf(""%lld\n"",num);
	return 0;
}"
5,F,C,61499220,2023-03-25 09:58:39,牛客20220304118,段错误,"#include <stdio.h>
int vis[3001][3001];//的、找对称点是可能越界，
//故数组要开大点。(-500<=x,y<=500)
int ans[200010];
int x[3001],y[3001];
int fun_len(int x1,int y1,int x2,int y2){
	return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
}
int main()
{
	int n,i,j,num=0,line=0;
	scanf(""%d"",&n);
	for(i=0;i<n;i++){
		scanf(""%d %d"",&x[i],&y[i]);
		vis[x[i]+1500][y[i]+1500]=1;
	}
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){//j不能从i+1开始循环
		//因为需要找对称点。 
			if(i==j) continue;
			num+=ans[fun_len(x[i],y[i],x[j],y[j])];
			ans[fun_len(x[i],y[i],x[j],y[j])]++;
			if(vis[x[j]*2-x[i]+1500][y[j]*2-y[i]+1500]) line++; 
		}
		for(j=0;j<n;j++){
			ans[fun_len(x[i],y[i],x[j],y[j])]=0;
		}
	}
	printf(""%d"",num-line/2);
	return 0;
}"
6,F,C,61499240,2023-03-25 10:00:06,牛客20220304118,段错误,"#include <stdio.h>
int vis[3001][3001];//的、找对称点是可能越界，
//故数组要开大点。(-500<=x,y<=500)
int ans[200010];
//int x[3001],y[3001];
int fun_len(int x1,int y1,int x2,int y2){
	return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
}
int main()
{
	int n,i,j,num=0,line=0;
	scanf(""%d"",&n);
	int x[n],y[n];
	for(i=0;i<n;i++){
		scanf(""%d %d"",&x[i],&y[i]);
		vis[x[i]+1500][y[i]+1500]=1;
	}
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){//j不能从i+1开始循环
		//因为需要找对称点。 
			if(i==j) continue;
			num+=ans[fun_len(x[i],y[i],x[j],y[j])];
			ans[fun_len(x[i],y[i],x[j],y[j])]++;
			if(vis[x[j]*2-x[i]+1500][y[j]*2-y[i]+1500]) line++; 
		}
		for(j=0;j<n;j++){
			if(i==j) continue;
			ans[fun_len(x[i],y[i],x[j],y[j])]=0;
		}
	}
	printf(""%d"",num-line/2);
	return 0;
}"
7,F,C,61499243,2023-03-25 10:00:31,牛客20220304118,段错误,"#include <stdio.h>
int vis[3001][3001];//的、找对称点是可能越界，
//故数组要开大点。(-500<=x,y<=500)
int ans[200010];
//int x[3001],y[3001];
int fun_len(int x1,int y1,int x2,int y2){
	return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
}
int main()
{
	int n,i,j;
	long long num=0,line=0;
	scanf(""%d"",&n);
	int x[n],y[n];
	for(i=0;i<n;i++){
		scanf(""%d %d"",&x[i],&y[i]);
		vis[x[i]+1500][y[i]+1500]=1;
	}
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){//j不能从i+1开始循环
		//因为需要找对称点。 
			if(i==j) continue;
			num+=ans[fun_len(x[i],y[i],x[j],y[j])];
			ans[fun_len(x[i],y[i],x[j],y[j])]++;
			if(vis[x[j]*2-x[i]+1500][y[j]*2-y[i]+1500]) line++; 
		}
		for(j=0;j<n;j++){
			if(i==j) continue;
			ans[fun_len(x[i],y[i],x[j],y[j])]=0;
		}
	}
	printf(""%lld"",num-line/2);
	return 0;
}"
8,F,C,61499246,2023-03-25 10:00:53,牛客20220304118,答案正确,"#include <stdio.h>
int vis[3001][3001];//的、找对称点是可能越界，
//故数组要开大点。(-500<=x,y<=500)
int ans[2000010];
//int x[3001],y[3001];
int fun_len(int x1,int y1,int x2,int y2){
	return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
}
int main()
{
	int n,i,j;
	long long num=0,line=0;
	scanf(""%d"",&n);
	int x[n],y[n];
	for(i=0;i<n;i++){
		scanf(""%d %d"",&x[i],&y[i]);
		vis[x[i]+1500][y[i]+1500]=1;
	}
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){//j不能从i+1开始循环
		//因为需要找对称点。 
			if(i==j) continue;
			num+=ans[fun_len(x[i],y[i],x[j],y[j])];
			ans[fun_len(x[i],y[i],x[j],y[j])]++;
			if(vis[x[j]*2-x[i]+1500][y[j]*2-y[i]+1500]) line++; 
		}
		for(j=0;j<n;j++){
			if(i==j) continue;
			ans[fun_len(x[i],y[i],x[j],y[j])]=0;
		}
	}
	printf(""%lld"",num-line/2);
	return 0;
}"
9,F,C,61499254,2023-03-25 10:01:16,牛客20220304118,答案正确,"#include <stdio.h>
int vis[3001][3001];//的、找对称点是可能越界，
//故数组要开大点。(-500<=x,y<=500)
int ans[2000010];
//int x[3001],y[3001];
int fun_len(int x1,int y1,int x2,int y2){
	return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
}
int main()
{
	int n,i,j;
	int num=0,line=0;
	scanf(""%d"",&n);
	int x[n],y[n];
	for(i=0;i<n;i++){
		scanf(""%d %d"",&x[i],&y[i]);
		vis[x[i]+1500][y[i]+1500]=1;
	}
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){//j不能从i+1开始循环
		//因为需要找对称点。 
			if(i==j) continue;
			num+=ans[fun_len(x[i],y[i],x[j],y[j])];
			ans[fun_len(x[i],y[i],x[j],y[j])]++;
			if(vis[x[j]*2-x[i]+1500][y[j]*2-y[i]+1500]) line++; 
		}
		for(j=0;j<n;j++){
			if(i==j) continue;
			ans[fun_len(x[i],y[i],x[j],y[j])]=0;
		}
	}
	printf(""%d"",num-line/2);
	return 0;
}"
10,F,C,61531714,2023-03-25 16:32:58,丨阿伟丨,运行超时,"#include<stdio.h>
int s=0;
void dengyao(int i,int n,int x[],int y[])
{
    for(int o=i+1;o<n;o++)
        for(int j=o+1;j<n;j++)
        {
            if(x[i]==x[o]&&x[i]==x[j]||y[i]==y[o]&&y[j]==y[o])
                continue;
            if((x[j]-x[o])*(x[j]-x[o])+(y[j]-y[o])*(y[j]-y[o])==
              (x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])||
                (x[i]-x[o])*(x[i]-x[o])+(y[i]-y[o])*(y[i]-y[o])==
              (x[j]-x[o])*(x[j]-x[o])+(y[j]-y[o])*(y[j]-y[o])||
                (x[j]-x[i])*(x[j]-x[i])+(y[j]-y[i])*(y[j]-y[i])==
              (x[i]-x[o])*(x[i]-x[o])+(y[i]-y[o])*(y[i]-y[o]))
                s++;
        }
}
int main()
{
    int n;
    scanf(""%d"",&n);
    if(n<=2)
    {
        printf(""0"");
        return 0;
    }
    int x[n],y[n];
    for(int i=0;i<n;i++)
        scanf(""%d %d"",&x[i],&y[i]);
    for(int i=0;i<n-2;i++)
        for(int o=i+1;o<n;o++)
            for(int j=o+1;j<n;j++)
            {
                if((x[j]-x[o])*(y[i]-y[o])==(y[j]-y[o])*(x[i]-x[o])&&
                   (x[j]-x[i])*(y[i]-y[o])==(y[j]-y[i])*(x[i]-x[o]))
                    continue;
                if((x[j]-x[o])*(x[j]-x[o])+(y[j]-y[o])*(y[j]-y[o])==
                  (x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])||
                    (x[i]-x[o])*(x[i]-x[o])+(y[i]-y[o])*(y[i]-y[o])==
                  (x[j]-x[o])*(x[j]-x[o])+(y[j]-y[o])*(y[j]-y[o])||
                    (x[j]-x[i])*(x[j]-x[i])+(y[j]-y[i])*(y[j]-y[i])==
                  (x[i]-x[o])*(x[i]-x[o])+(y[i]-y[o])*(y[i]-y[o]))
                    s++;
            }
    printf(""%d"",s);
    return 0;
}"
11,F,C,61568240,2023-03-26 19:33:51,小狗线团.,运行超时,"#include <stdio.h>
#include <math.h>
int panduan(int a,int b,int a1,int b1,int a2,int b2)
{double x,y,z;
 x=sqrt((a1-a)*(a1-a)+(b1-b)*(b1-b));
 y=sqrt((b2-b1)*(b2-b1)+(a2-a1)*(a2-a1));
z=sqrt((b2-b)*(b2-b)+(a2-a)*(a2-a));
 if(x==y&&x+y>z   ||   x==z&&x+z>y  || z==y&&z+y>x)
 return 1;
 return 0;
}
int main()
{int n,i,j,k,t=0;
 scanf(""%d"",&n);
 int a[n][2];
 for(i=0;i<n;i++)
     for(j=0;j<2;j++)
         scanf(""%d"",&a[i][j]);
 for(i=0;i<n;i++)
 for(j=i+1;j<n;j++)
 for(k=j+1;k<n;k++)
 {if(panduan(a[i][0],a[i][1],a[j][0],a[j][1],a[k][0],a[k][1]))
 t++;
 }
  printf(""%d"",t);  
    return 0;  
}"
12,F,C,61568315,2023-03-26 19:35:27,小狗线团.,运行超时,"#include <stdio.h>
#include <math.h>
int panduan(long long a, b,long long a1,long long b1,long long a2,long long b2)
{double x,y,z;
 x=sqrt((a1-a)*(a1-a)+(b1-b)*(b1-b));
 y=sqrt((b2-b1)*(b2-b1)+(a2-a1)*(a2-a1));
z=sqrt((b2-b)*(b2-b)+(a2-a)*(a2-a));
 if(x==y&&x+y>z   ||   x==z&&x+z>y  || z==y&&z+y>x)
 return 1;
 return 0;
}
int main()
{long long n,i,j,k,t=0;
 scanf(""%lld"",&n);
 int a[n][2];
 for(i=0;i<n;i++)
     for(j=0;j<2;j++)
         scanf(""%lld"",&a[i][j]);
 for(i=0;i<n;i++)
 for(j=i+1;j<n;j++)
 for(k=j+1;k<n;k++)
 {if(panduan(a[i][0],a[i][1],a[j][0],a[j][1],a[k][0],a[k][1]))
 t++;
 }
  printf(""%lld"",t);  
    return 0;  
}"
13,F,C(gcc 7.5.0),61759661,2023-04-05 21:08:44,墨初_,答案错误,"#include<stdio.h>
#include<math.h>
#define n1 400
int main()
{
    int n;
    //const int n1=400;
    //x数组代表x轴坐标，y数组代表y轴坐标
    int x[n1] = { 0 }, y[n1] = { 0 };
    //t用来作为存放坐标之差的平方和的坐标
    int i = 0, j = 0, k = 0, t = 0;
    //x1数组用来存放x轴坐标之差的和，同理，y为存放y轴坐标之差的和，nums用来计等腰三角形个数
    int x1[3] = { 0 }, y1[3] = { 0 }, nums = 0;
    scanf(""%d"", &n);
    if(n<=2||n>400)
    {
        printf(""0"");
        return 0;
    }
    for (i = 0; i < n; i++)
    {
        scanf(""%d%d"", &x[i], &y[i]);
        if(x[i]<-500||x[i]>500)
        {
            printf(""0"");
            return 0;
        }
        if(y[i]<-500||y[i]>500)
        {
            printf(""0"");
            return 0;
        }
    }
    //从第一个坐标不断顺序的组成三角形
    for (i = 0; i < n - 2; i++)
    {
        for (j = i + 1; j < n - 1; j++)
        {
            for (k = j + 1; k < n; k++)
            {
                //斜率相同，三点共线
                if((y[k]-y[j])*(x[k]-x[i])==(y[k]-y[i])*(x[k]-x[j]))
                {
                    continue;
                }
                //三点不共线，计算
                t = 0;
                x1[t++] = pow(x[i] - x[j], 2);
                x1[t++] = pow(x[i] - x[k], 2);
                x1[t] = pow(x[j] - x[k], 2);
                t = 0;
                y1[t++] = pow(y[i] - y[j], 2);
                y1[t++] = pow(y[i] - y[k], 2);
                y1[t++] = pow(y[j] - y[k], 2);
                if (x1[0] + y1[0] == x1[1] + y1[1])
                {
                    nums++;
                    continue;
                }
                if (x1[0] + y1[0] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
                if (x1[1] + y1[1] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
            }
        }
    }
    printf(""%d"", nums);
    return 0;
}"
14,F,C(gcc 7.5.0),61759668,2023-04-05 21:09:09,墨初_,运行超时,"#include<stdio.h>
#include<math.h>
#define n1 3000
int main()
{
    int n;
    //const int n1=400;
    //x数组代表x轴坐标，y数组代表y轴坐标
    int x[n1] = { 0 }, y[n1] = { 0 };
    //t用来作为存放坐标之差的平方和的坐标
    int i = 0, j = 0, k = 0, t = 0;
    //x1数组用来存放x轴坐标之差的和，同理，y为存放y轴坐标之差的和，nums用来计等腰三角形个数
    int x1[3] = { 0 }, y1[3] = { 0 }, nums = 0;
    scanf(""%d"", &n);
    if(n<=2||n>3000)
    {
        printf(""0"");
        return 0;
    }
    for (i = 0; i < n; i++)
    {
        scanf(""%d%d"", &x[i], &y[i]);
        if(x[i]<-500||x[i]>500)
        {
            printf(""0"");
            return 0;
        }
        if(y[i]<-500||y[i]>500)
        {
            printf(""0"");
            return 0;
        }
    }
    //从第一个坐标不断顺序的组成三角形
    for (i = 0; i < n - 2; i++)
    {
        for (j = i + 1; j < n - 1; j++)
        {
            for (k = j + 1; k < n; k++)
            {
                //斜率相同，三点共线
                if((y[k]-y[j])*(x[k]-x[i])==(y[k]-y[i])*(x[k]-x[j]))
                {
                    continue;
                }
                //三点不共线，计算
                t = 0;
                x1[t++] = pow(x[i] - x[j], 2);
                x1[t++] = pow(x[i] - x[k], 2);
                x1[t] = pow(x[j] - x[k], 2);
                t = 0;
                y1[t++] = pow(y[i] - y[j], 2);
                y1[t++] = pow(y[i] - y[k], 2);
                y1[t++] = pow(y[j] - y[k], 2);
                if (x1[0] + y1[0] == x1[1] + y1[1])
                {
                    nums++;
                    continue;
                }
                if (x1[0] + y1[0] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
                if (x1[1] + y1[1] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
            }
        }
    }
    printf(""%d"", nums);
    return 0;
}"
15,F,C(gcc 7.5.0),61759672,2023-04-05 21:09:35,墨初_,运行超时,"#include<stdio.h>
#include<math.h>
#define n1 3000
int main()
{
    int n;
    //const int n1=400;
    //x数组代表x轴坐标，y数组代表y轴坐标
    int x[n1] = { 0 }, y[n1] = { 0 };
    //t用来作为存放坐标之差的平方和的坐标
    int i = 0, j = 0, k = 0, t = 0;
    //x1数组用来存放x轴坐标之差的和，同理，y为存放y轴坐标之差的和，nums用来计等腰三角形个数
    int x1[3] = { 0 }, y1[3] = { 0 }, nums = 0;
    scanf(""%d"", &n);
    if(n<=2||n>3000)
    {
        printf(""0"");
        return 0;
    }
    for (i = 0; i < n; i++)
    {
        scanf(""%d%d"", &x[i], &y[i]);
        if(x[i]<-500||x[i]>500)
        {
            printf(""0"");
            return 0;
        }
        if(y[i]<-500||y[i]>500)
        {
            printf(""0"");
            return 0;
        }
    }
    //从第一个坐标不断顺序的组成三角形
    for (i = 0; i < n - 2; i++)
    {
        for (j = i + 1; j < n - 1; j++)
        {
            for (k = j + 1; k < n; k++)
            {
                //斜率相同，三点共线
                if((y[k]-y[j])*(x[k]-x[i])==(y[k]-y[i])*(x[k]-x[j]))
                {
                    continue;
                }
                //三点不共线，计算
                t = 0;
                x1[t++] = pow(x[i] - x[j], 2);
                x1[t++] = pow(x[i] - x[k], 2);
                x1[t] = pow(x[j] - x[k], 2);
                t = 0;
                y1[t++] = pow(y[i] - y[j], 2);
                y1[t++] = pow(y[i] - y[k], 2);
                y1[t++] = pow(y[j] - y[k], 2);
                if (x1[0] + y1[0] == x1[1] + y1[1])
                {
                    nums++;
                    continue;
                }
                if (x1[0] + y1[0] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
                if (x1[1] + y1[1] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
            }
        }
    }
    printf(""%d"", nums);
    return 0;
}"
16,F,C(gcc 7.5.0),61760418,2023-04-05 22:00:23,墨初_,运行超时,"#include<stdio.h>
#include<math.h>
#define n1 3000
int main()
{
    int n;
    //const int n1=400;
    //x数组代表x轴坐标，y数组代表y轴坐标
    int x[n1] = { 0 }, y[n1] = { 0 };
    //t用来作为存放坐标之差的平方和的坐标
    int i = 0, j = 0, k = 0, t = 0;
    //x1数组用来存放x轴坐标之差的和，同理，y为存放y轴坐标之差的和，nums用来计等腰三角形个数
    int x1[3] = { 0 }, y1[3] = { 0 }, nums = 0;
    scanf(""%d"", &n);
    if(n<=2||n>3000)
    {
        printf(""0"");
        return 0;
    }
    for (i = 0; i < n; i++)
    {
        scanf(""%d%d"", &x[i], &y[i]);
        if(x[i]<-500||x[i]>500)
        {
            printf(""0"");
            return 0;
        }
        if(y[i]<-500||y[i]>500)
        {
            printf(""0"");
            return 0;
        }
    }
    //从第一个坐标不断顺序的组成三角形
    for (i = 0; i < n - 2; i++)
    {
        for (j = i + 1; j < n - 1; j++)
        {
            for (k = j + 1; k < n; k++)
            {
                //斜率相同，三点共线
                if((y[k]-y[j])*(x[k]-x[i])==(y[k]-y[i])*(x[k]-x[j]))
                {
                    continue;
                }
                //三点不共线，计算
                t = 0;
                x1[t++] = pow(x[i] - x[j], 2);
                x1[t++] = pow(x[i] - x[k], 2);
                x1[t] = pow(x[j] - x[k], 2);
                t = 0;
                y1[t++] = pow(y[i] - y[j], 2);
                y1[t++] = pow(y[i] - y[k], 2);
                y1[t++] = pow(y[j] - y[k], 2);
                if (x1[0] + y1[0] == x1[1] + y1[1])
                {
                    nums++;
                    continue;
                }
                if (x1[0] + y1[0] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
                if (x1[1] + y1[1] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
            }
        }
    }
    printf(""%d"", nums);
    return 0;
}
//#define _CRT_SECURE_NO_WARNINGS
/*#include<stdio.h>
#include<math.h>
#define n1 3000
int count(int x1, int x2, int x3,int y1,int y2,int y3);
int main()
{
    int n;
    //const int n1=400;
    //x数组代表x轴坐标，y数组代表y轴坐标
    int x[n1] = { 0 }, y[n1] = { 0 };
    //t用来作为存放坐标之差的平方和的坐标
    int i = 0, j = 0, k = 0, t = 0;
    //x1数组用来存放x轴坐标之差的和，同理，y为存放y轴坐标之差的和，nums用来计等腰三角形个数
    int  nums = 0;
    scanf(""%d"", &n);
    for (i = 0; i < n; i++)
    {
        scanf(""%d%d"", &x[i], &y[i]);
    }
    //从第一个坐标不断顺序的组成三角形
    for (i = 0; i < n - 2; i++)
    {
        for (j = i + 1; j < n - 1; j++)
        {
            for (k = j + 1; k < n; k++)
            {
                if (count(x[i], x[j], x[k], y[i], y[j], y[k]))
                {
                    nums++;
                }
            }
        }
    }
    printf(""%d"", nums);
    return 0;
}

int count(int x1, int x2, int x3, int y1, int y2, int y3)
{
    double x4[3];
    x4[0] = sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));
    x4[1] = sqrt(pow(x1 - x3, 2) + pow(y1 - y3, 2));
    x4[2] = sqrt(pow(x2 - x3, 2) + pow(y2 - y3, 2));
    if (x4[0] == x4[1] && x4[0] + x4[1] > x4[2] || x4[0] == x4[2] && x4[0] + x4[2] > x4[1] || x4[1] == x4[2] && x4[1] + x4[2] > x4[0])
    {
        return 1;
    }
    else
    {
        return 0;
    }
    //return 0;
}*/"
17,F,C(gcc 7.5.0),61763724,2023-04-06 13:57:27,墨初_,运行超时,"#include<stdio.h>
#include<math.h>
#define n1 3000
int main()
{
    int n;
    //const int n1=400;
    //x数组代表x轴坐标，y数组代表y轴坐标
    int x[n1] = { 0 }, y[n1] = { 0 };
    //t用来作为存放坐标之差的平方和的坐标
    int i = 0, j = 0, k = 0, t = 0;
    //x1数组用来存放x轴坐标之差的和，同理，y为存放y轴坐标之差的和，nums用来计等腰三角形个数
    int x1[3] = { 0 }, y1[3] = { 0 }, nums = 0;
    scanf(""%d"", &n);
    if (n <= 2 || n > 3000)
    {
        printf(""0"");
        return 0;
    }
    for (i = 0; i < n; i++)
    {
        scanf(""%d%d"", &x[i], &y[i]);
        if (x[i] < -500 || x[i]>500)
        {
            printf(""0"");
            return 0;
        }
        if (y[i] < -500 || y[i]>500)
        {
            printf(""0"");
            return 0;
        }
    }
    //从第一个坐标不断顺序的组成三角形
    for (i = 0; i < n - 2; i++)
    {
        for (j = i + 1; j < n - 1; j++)
        {
            for (k = j + 1; k < n; k++)
            {
                //斜率相同，三点共线
                if ((y[k] - y[j]) * (x[k] - x[i]) == (y[k] - y[i]) * (x[k] - x[j]))
                {
                    continue;
                }
                //三点不共线，计算
                t = 0;
                x1[t++] = pow(x[i] - x[j], 2);
                x1[t++] = pow(x[i] - x[k], 2);
                x1[t] = pow(x[j] - x[k], 2);
                t = 0;
                y1[t++] = pow(y[i] - y[j], 2);
                y1[t++] = pow(y[i] - y[k], 2);
                y1[t++] = pow(y[j] - y[k], 2);
                if (x1[0] + y1[0] == x1[1] + y1[1]||x1[0] + y1[0] == x1[2] + y1[2]||x1[1] + y1[1] == x1[2] + y1[2])
                {
                    nums++;
                    //continue;
                }
                /*if (x1[0] + y1[0] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
                if (x1[1] + y1[1] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }*/
            }
        }
    }
    printf(""%d"", nums);
    return 0;
}"
18,F,C(gcc 7.5.0),61763799,2023-04-06 14:09:10,墨初_,答案错误,"#include<stdio.h>
#include<math.h>
#define n1 3000
int count(int x1,int x2,int x3,int y1,int y2,int y3);
int main()
{
    int n;
    //const int n1=400;
    //x数组代表x轴坐标，y数组代表y轴坐标
    int x[n1] = { 0 }, y[n1] = { 0 };
    //t用来作为存放坐标之差的平方和的坐标
    int i = 0, j = 0, k = 0, t = 0;
    //x1数组用来存放x轴坐标之差的和，同理，y为存放y轴坐标之差的和，nums用来计等腰三角形个数
    int nums = 0;
    scanf(""%d"", &n);
    if (n <= 2 || n > 3000)
    {
        printf(""0"");
        return 0;
    }
    for (i = 0; i < n; i++)
    {
        scanf(""%d%d"", &x[i], &y[i]);
        if (x[i] < -500 || x[i]>500)
        {
            printf(""0"");
            return 0;
        }
        if (y[i] < -500 || y[i]>500)
        {
            printf(""0"");
            return 0;
        }
    }
    //从第一个坐标不断顺序的组成三角形
    for (i = 0; i < n - 2; i++)
    {
        for (j = i + 1; j < n - 1; j++)
        {
            for (k = j + 1; k < n; k++)
            {
                if(count(x[i],x[j],x[k],y[i],y[j],y[k]))
                {
                    nums+=1;
                }
                //斜率相同，三点共线
                /*if ((y[k] - y[j]) * (x[k] - x[i]) == (y[k] - y[i]) * (x[k] - x[j]))
                {
                    continue;
                }
                //三点不共线，计算
                t = 0;
                x1[t++] = pow(x[i] - x[j], 2);
                x1[t++] = pow(x[i] - x[k], 2);
                x1[t] = pow(x[j] - x[k], 2);
                t = 0;
                y1[t++] = pow(y[i] - y[j], 2);
                y1[t++] = pow(y[i] - y[k], 2);
                y1[t++] = pow(y[j] - y[k], 2);
                if (x1[0] + y1[0] == x1[1] + y1[1]||x1[0] + y1[0] == x1[2] + y1[2]||x1[1] + y1[1] == x1[2] + y1[2])
                {
                    nums++;
                    //continue;
                }*/
                /*if (x1[0] + y1[0] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }
                if (x1[1] + y1[1] == x1[2] + y1[2])
                {
                    nums++;
                    continue;
                }*/
            }
        }
    }
    printf(""%d"", nums);
    return 0;
}

int count(int x1,int x2,int x3,int y1,int y2,int y3)
{
    int x4[3]={0}, y4[3]={0},t=0;
    x4[t++] = pow(x1 - x2, 2);
    x4[t++] = pow(x1 - x3, 2);
    x4[t] = pow(x2 - x3, 2);
    t = 0;
    y4[t++] = pow(y1 - y2, 2);
    y4[t++] = pow(y1 - y3, 2);
    y4[t++] = pow(y2 - y3, 2);
    if (x4[0] + y4[0] == x4[1] + y4[1]||x4[0] + y4[0] == x4[2] + y4[2]||x4[1] + y4[1] == x4[2] + y4[2])
    {
        return 1;
        //continue;
    }
    return 0;
}"
19,F,C,61766029,2023-04-06 17:27:16,goodance,运行超时,"#include ""stdio.h""
const int N=3003;
int pos[N][2];
int check(int a[], int b[], int c[]){
	if((c[1]-b[1])*(b[0]-a[0])==(c[0]-b[0])*(b[1]-a[1]))
		return 0;
	else{
		int d1=(b[1]-a[1])*(b[1]-a[1])+(b[0]-a[0])*(b[0]-a[0]);
		int d2=(c[1]-b[1])*(c[1]-b[1])+(c[0]-b[0])*(c[0]-b[0]);
		int d3=(c[1]-a[1])*(c[1]-a[1])+(c[0]-a[0])*(c[0]-a[0]);
		if(d1==d2||d2==d3||d1==d3) return 1;
		else return 0;
	}
}
int main(){
	int n;
	scanf(""%d"", &n);
	for(int i=1; i<=n; i++){
		scanf(""%d%d"", &pos[i][0], &pos[i][1]);
	}
	long long cnt=0;
	for(int i=1; i<=n; i++){
		for(int j=i+1; j<=n; j++){
			for(int k=j+1; k<=n; k++){
				if(check(pos[i], pos[j], pos[k]))
					cnt++;
			}
		}
	}
	printf(""%lld"", cnt);
	return 0;
}"
