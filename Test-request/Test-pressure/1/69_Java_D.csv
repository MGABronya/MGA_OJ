,index,languageName,submissionId,submitTime,userName,statusMessage,code
0,D,Java,61481785,2023-03-24 19:39:06,黄明勇,答案错误,"import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.PriorityQueue;
public class Main{
	static int[] fa;
	static int idx, N = 40005;
	public static void main(String[] args) throws Exception{
		Reader sc = new Reader();
//		Scanner sc = new Scanner(System.in);
//		PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		int n = sc.nextInt();
		int m = sc.nextInt();
		int c = sc.nextInt();
		fa = new int[N];
		for(int i = 1; i <= n; i++) {
			fa[i] = i;
		}
		PriorityQueue<Node> q = new PriorityQueue<>();
		for(int i = 0; i < m; i++) {
			q.add(new Node(sc.nextInt(),sc.nextInt(),sc.nextInt()));
		}
		long sum = 0;
		int t = n - 1;
		ArrayList<Integer> list = new ArrayList<>();
		ArrayList<Integer> a = new ArrayList<>();
		while(!q.isEmpty()) {
			Node node = q.remove();
			int x = node.x;
			int y = node.y;
			if(find(x) != find(y)) {
				sum += t * node.w;
				list.add(t * node.w);
				a.add(node.w);
				union(x,y);
				t--;
			}
		}
//		System.out.println(sum);
		long ans = 0;
		for(int i = 0; i < list.size(); i++) {
			if(sum > c) {
				ans = a.get(i);
				sum -= list.get(i);
			}
		}
		System.out.println(ans);
	}
	public static int find(int x) {
		return x == fa[x]?x:(fa[x] = find(fa[x]));
	}
	public static void union(int x, int y) {
		fa[find(x)] = find(y);
	}
}
class Node implements Comparable<Node>{
	int x;
	int y;
	int w;
	public Node(int x, int y, int w) {
		super();
		this.x = x;
		this.y = y;
		this.w = w;
	}
	@Override
	public int compareTo(Node o) {
		// TODO Auto-generated method stub
		return this.w - o.w;
	}
	
}
class Reader{
	StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
	public int nextInt () throws Exception {
		st.nextToken();
		return (int)st.nval;
	}
	public String next() throws Exception {
		st.nextToken();
		return st.sval;
	}
}
"
1,D,Java,61481853,2023-03-24 19:39:47,给个AC吧,答案错误,"
import java.io.*;
import java.math.BigInteger;
import java.util.*;

/*
1 100000
99998
 */
public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    static int n, m;
    static long c;
    static int[] f;

    public static void main(String[] args) throws IOException {
        Input sc = new Input(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();
        Edge[] g = new Edge[m + 1];
        long ans = Integer.MAX_VALUE;
        for (int i = 1; i <= m; i++) {
            int s = sc.nextInt();
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[i] = new Edge(s, u, v);
            ans = Math.min(v, ans);
        }
        f = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            f[i] = i;
        }
        Arrays.sort(g, 1, n + 1, (o1, o2) -> o1.weight - o2.weight);

        int index = 0;
        for (int i = 1; i <= m; i++) {
            int s = g[i].start;
            int e = g[i].end;
            if (union(s, e)) {
                long tmp = g[i].weight * i;
                if (tmp < ans) {
                    ans += tmp;
                }
            } else {
                index++;
                if (index == n) {
                    break;
                }
            }
        }
        out.println(index > n ? 0 : ans);
        out.flush();
        out.close();
    }

    static boolean union(int x, int y) {
        int a = find(x);
        int b = find(y);
        if (f[a] != b) {
            //如果不在一个集合说明可以合并
            f[a] = b;
            return true;
        }
        return false;
    }

    static int find(int x) {
        if (f[x] != x) {
            f[x] = find(f[x]);
        }
        return f[x];
    }

    static class Edge {
        int start, end, weight;

        public Edge(int start, int end, int weight) {
            this.start = start;
            this.end = end;
            this.weight = weight;
        }
    }

    static class Input {

        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public Input(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                // TODO 自动生成的 catch 块
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }
    }
}"
2,D,Java,61481874,2023-03-24 19:39:58,黄明勇,答案错误,"import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Scanner;
public class Main{
	static int[] fa;
	static int idx, N = 40005;
	public static void main(String[] args) throws Exception{
//		Reader sc = new Reader();
		Scanner sc = new Scanner(System.in);
//		PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		int n = sc.nextInt();
		int m = sc.nextInt();
		long c = sc.nextLong();
		fa = new int[N];
		for(int i = 1; i <= n; i++) {
			fa[i] = i;
		}
		PriorityQueue<Node> q = new PriorityQueue<>();
		for(int i = 0; i < m; i++) {
			q.add(new Node(sc.nextInt(),sc.nextInt(),sc.nextInt()));
		}
		long sum = 0;
		int t = n - 1;
		ArrayList<Integer> list = new ArrayList<>();
		ArrayList<Integer> a = new ArrayList<>();
		while(!q.isEmpty()) {
			Node node = q.remove();
			int x = node.x;
			int y = node.y;
			if(find(x) != find(y)) {
				sum += t * node.w;
				list.add(t * node.w);
				a.add(node.w);
				union(x,y);
				t--;
			}
		}
//		System.out.println(sum);
		long ans = 0;
		for(int i = 0; i < list.size(); i++) {
			if(sum > c) {
				ans = a.get(i);
				sum -= list.get(i);
			}
		}
		System.out.println(ans);
	}
	public static int find(int x) {
		return x == fa[x]?x:(fa[x] = find(fa[x]));
	}
	public static void union(int x, int y) {
		fa[find(x)] = find(y);
	}
}
class Node implements Comparable<Node>{
	int x;
	int y;
	int w;
	public Node(int x, int y, int w) {
		super();
		this.x = x;
		this.y = y;
		this.w = w;
	}
	@Override
	public int compareTo(Node o) {
		// TODO Auto-generated method stub
		return this.w - o.w;
	}
	
}
class Reader{
	StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
	public int nextInt () throws Exception {
		st.nextToken();
		return (int)st.nval;
	}
	public String next() throws Exception {
		st.nextToken();
		return st.sval;
	}
}
"
3,D,Java,61482273,2023-03-24 19:42:54,黄明勇,答案正确,"import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Scanner;
public class Main{
	static int[] fa;
	static int idx, N = 40005;
	public static void main(String[] args) throws Exception{
//		Reader sc = new Reader();
		Scanner sc = new Scanner(System.in);
//		PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		int n = sc.nextInt();
		int m = sc.nextInt();
		long c = sc.nextLong();
		fa = new int[N];
		for(int i = 1; i <= n; i++) {
			fa[i] = i;
		}
		PriorityQueue<Node> q = new PriorityQueue<>();
		for(int i = 0; i < m; i++) {
			q.add(new Node(sc.nextInt(),sc.nextInt(),sc.nextInt()));
		}
		long sum = 0;
		long t = n - 1;
		ArrayList<Long> list = new ArrayList<>();
		ArrayList<Long> a = new ArrayList<>();
		while(!q.isEmpty()) {
			Node node = q.remove();
			int x = node.x;
			int y = node.y;
			if(find(x) != find(y)) {
				sum += t * node.w;
				list.add(t * node.w);
				a.add(1L * node.w);
				union(x,y);
				t--;
			}
		}
//		System.out.println(sum);
		long ans = 0;
		for(int i = 0; i < list.size(); i++) {
			if(sum > c) {
				ans = a.get(i);
				sum -= list.get(i);
			}
		}
		System.out.println(ans);
	}
	public static int find(int x) {
		return x == fa[x]?x:(fa[x] = find(fa[x]));
	}
	public static void union(int x, int y) {
		fa[find(x)] = find(y);
	}
}
class Node implements Comparable<Node>{
	int x;
	int y;
	int w;
	public Node(int x, int y, int w) {
		super();
		this.x = x;
		this.y = y;
		this.w = w;
	}
	@Override
	public int compareTo(Node o) {
		// TODO Auto-generated method stub
		return this.w - o.w;
	}
	
}
class Reader{
	StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
	public int nextInt () throws Exception {
		st.nextToken();
		return (int)st.nval;
	}
	public String next() throws Exception {
		st.nextToken();
		return st.sval;
	}
}
"
4,D,Java,61483359,2023-03-24 19:51:17,给个AC吧,答案错误,"
import java.io.*;
import java.math.BigInteger;
import java.util.*;

/*
1 100000
99998
 */
public class Main {
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    static int n, m;
    static long c;
    static int[] f;

    public static void main(String[] args) throws IOException {
        Input sc = new Input(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();
        Edge[] g = new Edge[m + 1];
        long ans = Integer.MAX_VALUE;
        for (int i = 1; i <= m; i++) {
            int s = sc.nextInt();
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[i] = new Edge(s, u, v);
            ans = Math.min(v, ans);
        }
        f = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            f[i] = i;
        }
        Arrays.sort(g, 1, n + 1, (o1, o2) -> o1.weight - o2.weight);

        int index = 0;
        for (int i = 1; i <= m; i++) {
            int s = g[i].start;
            int e = g[i].end;
            if (union(s, e)) {
                long tmp = (long) g[i].weight * i;
                if (tmp < ans) {
                    ans += tmp;
                }
            } else {
                index++;
                if (index == n) {
                    break;
                }
            }
        }
        out.println(index >= 1 ? ans : 0);
        out.flush();
        out.close();
    }

    static boolean union(int x, int y) {
        int a = find(x);
        int b = find(y);
        if (f[a] != b) {
            //如果不在一个集合说明可以合并
            f[a] = b;
            return true;
        }
        return false;
    }

    static int find(int x) {
        if (f[x] != x) {
            f[x] = find(f[x]);
        }
        return f[x];
    }

    static class Edge {
        int start, end, weight;

        public Edge(int start, int end, int weight) {
            this.start = start;
            this.end = end;
            this.weight = weight;
        }
    }

    static class Input {

        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public Input(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                // TODO 自动生成的 catch 块
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }
    }
}"
5,D,Java,61483543,2023-03-24 19:52:31,菜鸡想进大厂～,答案正确,"import java.util.*;
import java.io.*;


class Edge{
    public int a;
    public int b;
    public int c;
    public Edge(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }
}
public class Main{
    static Edge[] g = new Edge[100010];
    static int n, m;
    static long c;
    static int[] parent = new int[40010];
    //并查集用这种find函数效率高
    private static int find(int x) {
        if (parent[x] != x)  parent[x] = find(parent[x]);
        return parent[x];
    }
    
    private static boolean check(int mid) {
        for (int i = 1; i <= n; i++) parent[i] = i;
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            Edge e = g[i];
            int a = find(e.a);
            int b = find(e.b);
            if (a != b) {
                if (e.c > mid) list.add(e.c);
                parent[a] = b;
            }
        }
        long t = 0;
        for (int i = list.size() - 1, j = 1; i >= 0; i --) {
            t += (long)j * list.get(i); j ++;
        }
        return t <= c; 
    }
    
    public static void main(String[] args) throws Exception{
        InputStreamReader in = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(in);
        String[] ss = br.readLine().split("" "");
        n = Integer.parseInt(ss[0]);
        m = Integer.parseInt(ss[1]);
        c = Long.parseLong(ss[2]); 
        for (int i = 0; i < m; i++) {
            ss = br.readLine().split("" "");
            int a = Integer.parseInt(ss[0]);
            int b = Integer.parseInt(ss[1]);
            int c = Integer.parseInt(ss[2]);
            g[i] = new Edge(a, b, c);
        }
        Arrays.sort(g, 0, m, new Comparator<Edge>(){
            public int compare(Edge e1, Edge e2) {
                return e1.c - e2.c;
            }
        });
        int l = 0; 
        int r = (int)1e9 + 1; 
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(mid)) r = mid; 
            else l = mid + 1;
        }
        System.out.println(l);
        br.close();
    }
}"
6,D,Java,61484363,2023-03-24 19:58:55,何妨吟啸且徐行1,执行出错,"import java.util.*;

public class Main {
    static int[] parent;
    static int[] rank;

    static int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    static void union(int x, int y) {
        int xRoot = find(x);
        int yRoot = find(y);
        if (xRoot == yRoot) {
            return;
        }
        if (rank[xRoot] < rank[yRoot]) {
            parent[xRoot] = yRoot;
        } else if (rank[xRoot] > rank[yRoot]) {
            parent[yRoot] = xRoot;
        } else {
            parent[xRoot] = yRoot;
            rank[yRoot]++;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int c = sc.nextInt();
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = sc.nextInt();
        }

        parent = new int[n + 1];
        rank = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }

        Arrays.sort(a);

        int maxA = a[m - 1];
        int minP = 0;
        for (int i = 0; i < m; i++) {
            int p = a[i];
            if (p > c) {
                break;
            }
            if (p == maxA) {
                continue;
            }
            int k = c / p;
            int count = 0;
            for (int j = 0; j < m; j++) {
                if (a[j] <= p) {
                    int x = j + 1;
                    int y = n - j;
                    count += x * y;
                }
            }
            if (count >= k) {
                minP = p;
                break;
            }
            for (int j = 1; j <= n; j++) {
                if (parent[j] == j && a[i] >= maxA) {
                    for (int k1 = j + 1; k1 <= n; k1++) {
                        if (parent[k1] == k && a[i] >= maxA) {
                            union(j, k1);
                        }
                    }
                }
            }
            for (int j = 1; j <= n; j++) {
                for (int k2 = j + 1; k2 <= n; k2++) {
                    if (find(j) != find(k2) && a[i] >= maxA) {
                        union(j, k2);
                    }
                }
            }
        }

        System.out.println(minP);
    }
}
"
7,D,Java,61484595,2023-03-24 20:00:54,HMETAO,答案错误,"

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
//        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        if (sb.length() > 0) System.out.println(sb.deleteCharAt(sb.length() - 1));

    }

    static long p = 0;

    private static void solve(Reader sc) {
        int n = sc.nextInt();
        int m = sc.nextInt();
        long c = sc.nextLong();
        ArrayList<long[]> que = new ArrayList<>();
        UnionFind uf = new UnionFind(n);
        while (m-- > 0) {
            que.add(new long[]{sc.nextLong() - 1, sc.nextLong() - 1, sc.nextLong()});
        }
        que.sort((o1, o2) -> {
            return Long.compare(o1[2], o2[2]);
        });
        long left = 0;
        long right = (long) 1e18;
        while (left <= right) {
            long mid = left + (right - left) / 2;
            int[] parent = uf.parent;
            for (int i = 0; i < parent.length; i++) {
                parent[i] = i;
            }
            if (check(mid, c, que, uf)) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        println(right);

    }

    private static boolean check(long p, long c, ArrayList<long[]> que, UnionFind uf) {
        for (int i = 0; i < que.size() && !uf.isCon(); i++) {
            long[] item = que.get(i);
            uf.union((int) item[0], (int) item[1], item[2], p);
            if (uf.score > c) return false;
        }
        return uf.score <= c;
    }


    static class UnionFind {
        int[] parent;

        int n;
        int score;

        public UnionFind(int n) {
            this.n = n - 1;
            this.parent = new int[n];
//            for (int i = 0; i < n; i++) {
//                parent[i] = i;
//            }
        }

        public boolean isCon() {
            return n == 0;
        }

        public int find(int k) {
            if (parent[k] != k) {
                parent[k] = find(parent[k]);
            }
            return parent[k];
        }

        public void union(int x, int y, long s, long mid) {
            int xRoot = find(x);
            int yRoot = find(y);
            if (xRoot != yRoot) {
                parent[xRoot] = yRoot;
                if (s > mid)
                    score += s;
            }
        }
    }

    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
8,D,Java,61484904,2023-03-24 20:03:14,lllllllle,答案错误,"

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;


public class Main {
	
	static class Union{
		int[] fa;
		
		public Union(int n) {
			fa=new int[n];
			for(int i=0;i<n;i++) {
				fa[i]=i;
			}
		}
		
		public int find(int x) {
			if(fa[x]!=x) {
				fa[x]=find(fa[x]);
			}
			return fa[x];
		}
		
		public boolean merge(int v,int w) {
			int pv=find(v);
			int pw=find(w);
			if(pv==pw) {
				return false;
			}
			fa[pv]=pw;
			return true;
		}
		
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.out));
		String[] s=br.readLine().split("" "");
		int n=Integer.parseInt(s[0]);
		int m=Integer.parseInt(s[1]);
		long c=Long.parseLong(s[2]);
		int[][] edge=new int[m][3];
		for(int i=0;i<m;i++) {
			s=br.readLine().split("" "");
			for(int j=0;j<3;j++) {
				edge[i][j]=Integer.parseInt(s[j]);
			}
			edge[i][0]--;
			edge[i][1]--;
		}
		Arrays.sort(edge, new Comparator<int[]>() {
			@Override
			public int compare(int[] o1, int[] o2) {
				if(o1[2]>o2[2]) {
					return 1;
				}
				return -1;
			}
		});
		Union un=new Union(n);
		List<Integer> l=new ArrayList<Integer>();
		for(int i=0;i<m;i++) {
			if(un.merge(edge[i][0], edge[i][1])) {
				l.add(edge[i][2]);
			}
		}
		long tmp=0;
		for(int i=l.size()-1,j=1;i>=0;i--,j++) {
			tmp+=j*l.get(i);
			if(tmp>c) {
				System.out.println(l.get(i));
				return;
			}
		}
		System.out.println(0);
		
	}
	
	
}
"
9,D,Java,61484930,2023-03-24 20:03:28,人工智能3221黄天鲁,答案错误,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        int n= scanner.nextInt();
        int m= scanner.nextInt();
        long c= scanner.nextLong();
        long []x=new long[m];
        long []y=new long[m];
        long []a=new long[m];
        int []sz=new int[n];
        for (int i = 0; i < n; i++) {
            sz[i]=i+1;
        }
        int k=0;
        for (int i = 0; i < m; i++) {
                x[i]= scanner.nextLong();
                y[i]= scanner.nextLong();
                a[i]= scanner.nextLong();
        }
        int p=0;
        int t=1;
        long sum=0;
        while (t==1){
            sum=0;
            for (int i = 0; i < m; i++) {
                if(a[i]==p){
                    for (int j = 0; j < n; j++) {
                        if(sz[j]==x[i]||sz[j]==y[i]){
                            sz[j]=0;
                        }
                    }
                }
            }
            for (int i = 0; i < m; i++) {
                k++;
                for (int j = 0; j <n; j++) {
                    if(sz[j]==x[i]||sz[j]==y[i]){
                        sz[j]=0;
                        sum=sum+a[i];
                    }
                }
                for (int q = 0; q < n; q++) {
                    if(sz[q]!=0){
                        t=1;
                        break;
                    }
                    if(i==n-1&&sz[n-1]==0){
                        t=0;
                    }
                }
                if(sum>c){
                    t=1;
                    break;
                }
            }
            if(t==1){
                p++;
            }
        }
        System.out.println(p);
    }
}
"
10,D,Java,61484971,2023-03-24 20:03:49,lllllllle,答案正确,"

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;


public class Main {
	
	static class Union{
		int[] fa;
		
		public Union(int n) {
			fa=new int[n];
			for(int i=0;i<n;i++) {
				fa[i]=i;
			}
		}
		
		public int find(int x) {
			if(fa[x]!=x) {
				fa[x]=find(fa[x]);
			}
			return fa[x];
		}
		
		public boolean merge(int v,int w) {
			int pv=find(v);
			int pw=find(w);
			if(pv==pw) {
				return false;
			}
			fa[pv]=pw;
			return true;
		}
		
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.out));
		String[] s=br.readLine().split("" "");
		int n=Integer.parseInt(s[0]);
		int m=Integer.parseInt(s[1]);
		long c=Long.parseLong(s[2]);
		int[][] edge=new int[m][3];
		for(int i=0;i<m;i++) {
			s=br.readLine().split("" "");
			for(int j=0;j<3;j++) {
				edge[i][j]=Integer.parseInt(s[j]);
			}
			edge[i][0]--;
			edge[i][1]--;
		}
		Arrays.sort(edge, new Comparator<int[]>() {
			@Override
			public int compare(int[] o1, int[] o2) {
				if(o1[2]>o2[2]) {
					return 1;
				}
				return -1;
			}
		});
		Union un=new Union(n);
		List<Integer> l=new ArrayList<Integer>();
		for(int i=0;i<m;i++) {
			if(un.merge(edge[i][0], edge[i][1])) {
				l.add(edge[i][2]);
			}
		}
		long tmp=0;
		for(int i=l.size()-1,j=1;i>=0;i--,j++) {
			tmp+=(long)j*l.get(i);
			if(tmp>c) {
				System.out.println(l.get(i));
				return;
			}
		}
		System.out.println(0);
		
	}
	
	
}
"
11,D,Java,61487815,2023-03-24 20:26:56,牛客169937911号,执行出错,"

import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 100010;
	private static final int M = 200010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		int c = sc.nextInt();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
		int sum = 0;
		int p = 0;
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(sum + k * arr[i] <= c) {
				sum += k * arr[i];
				//System.out.println(sum);
				k++;
			}else {
				//System.out.println(arr[i]);
				p = arr[i];
			}
		}
		System.out.println(p);
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
12,D,Java,61487995,2023-03-24 20:28:19,牛客826200090号,答案错误,"import java.util.*;

public class Main {
    static int n, m, c, k;
    static int[] fa, rk;

    static class Edge implements Comparable<Edge> {
        int x, y, w;
        Edge(int x, int y, int w) {
            this.x = x;
            this.y = y;
            this.w = w;
        }
        public int compareTo(Edge e) {
            return this.w - e.w;
        }
    }

    static int find(int x) {
        if (fa[x] != x) {
            fa[x] = find(fa[x]);
        }
        return fa[x];
    }

    static void union(int x, int y) {
        int fx = find(x);
        int fy = find(y);
        if (rk[fx] < rk[fy]) {
            fa[fx] = fy;
        } else {
            fa[fy] = fx;
            if (rk[fx] == rk[fy]) {
                rk[fx]++;
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        m = scanner.nextInt();
        c = scanner.nextInt();
        k = 1;

        Edge[] edges = new Edge[m];
        for (int i = 0; i < m; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            int w = scanner.nextInt();
            edges[i] = new Edge(x, y, w);
        }

        Arrays.sort(edges);

        fa = new int[n + 1];
        rk = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
            rk[i] = 0;
        }

        int ans = 0;
        for (int i = 0; i < m; i++) {
            Edge e = edges[i];
            if (e.w > c / k) {
                break;
            }
            if (find(e.x) != find(e.y)) {
                if (e.w <= c - k * e.w) {
                    union(e.x, e.y);
                    ans += e.w;
                    k++;
                } else {
                    break;
                }
            }
        }

        boolean connected = true;
        for (int i = 2; i <= n; i++) {
            if (find(i) != find(i - 1)) {
                connected = false;
                break;
            }
        }

        if (connected) {
            System.out.println(ans);
        } else {
            System.out.println(""-1"");
        }
    }
}
"
13,D,Java,61487998,2023-03-24 20:28:20,牛客169937911号,答案错误,"

import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 100010;
	private static final int M = 200010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
		long sum = 0;
		int p = 0;
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(sum + (long)k * arr[i] <= c) {
				sum += (long)k * arr[i];
				//System.out.println(sum);
				k++;
			}else {
				//System.out.println(arr[i]);
				p = arr[i];
			}
		}
		System.out.println(p);
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
14,D,Java,61488692,2023-03-24 20:33:56,HMETAO,答案正确,"

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) {
        Reader r = new Reader();
        int t = 1;
//        t = r.nextInt();
        while (t-- > 0) {
            solve(r);
        }
        if (sb.length() > 0) System.out.println(sb.deleteCharAt(sb.length() - 1));

    }

    static long p = 0;

    private static void solve(Reader sc) {
        int n = sc.nextInt();
        int m = sc.nextInt();
        long c = sc.nextLong();
        ArrayList<long[]> que = new ArrayList<>();
        UnionFind uf = new UnionFind(n);
        while (m-- > 0) {
            que.add(new long[]{sc.nextLong() - 1, sc.nextLong() - 1, sc.nextLong()});
        }
        que.sort(Comparator.comparingLong(o -> o[2]));
        long left = 0;
        long right = (long) 1e18;
        while (left <= right) {
            long mid = left + (right - left) / 2;
            int[] parent = uf.parent;
            for (int i = 0; i < parent.length; i++) {
                parent[i] = i;
            }
            uf.n = n - 1;
            uf.score = 0;
            uf.inc = 1;
            if (check(mid, c, que, uf)) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        println(left);

    }

    private static boolean check(long p, long c, ArrayList<long[]> que, UnionFind uf) {
        for (int i = 0; i < que.size() && !uf.isCon(); i++) {
            long[] item = que.get(i);
            uf.union((int) item[0], (int) item[1], item[2], p);
        }
        while (!uf.stack.isEmpty()) {
            uf.score +=uf.stack.size() * uf.stack.poll();
        }
        return uf.score <= c;
    }


    static class UnionFind {
        int[] parent;

        int n;
        long score;
        long inc = 1;

        Deque<Long> stack = new LinkedList<>();

        public UnionFind(int n) {
            this.n = n - 1;
            this.parent = new int[n];
//            for (int i = 0; i < n; i++) {
//                parent[i] = i;
//            }
        }

        public boolean isCon() {
            return n == 0;
        }

        public int find(int k) {
            if (parent[k] != k) {
                parent[k] = find(parent[k]);
            }
            return parent[k];
        }

        public boolean union(int x, int y, long s, long mid) {
            int xRoot = find(x);
            int yRoot = find(y);
            if (xRoot != yRoot) {
                parent[xRoot] = yRoot;
                if (s > mid) {
//                    score = score + (s * inc);
                    inc++;
                    stack.add(s);
                }
                return true;
            }
            return false;
        }
    }

    static class BitIndexTree {
        long[] trie;
        int n;

        public BitIndexTree(int n) {
            this.n = n;
            trie = new long[n + 1];
        }

        public static int lowBit(int x) {
            return x & (-x);
        }

        public void add(int index, int v) {
            while (index <= n) {
                trie[index] += v;
                index += lowBit(index);
            }
        }

        public long query(int index) {
            long ans = 0;
            while (index > 0) {
                ans += trie[index];
                index -= lowBit(index);
            }
            return ans;
        }
    }

    private static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public static long pow3(long a, long b) {
        long ans = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans *= a;
            }
            a *= a;
            b >>= 1;
        }
        return ans;
    }

    public static long pow4(long a, long b, int p) {
        long ans = 1;
        a %= p;
        while (b > 0) {
            if ((b & 1) == 1) {
                ans = ans * a % p;
            }
            a = a * a % p;
            b >>= 1;
        }
        return ans;
    }

    public static List<Integer> euler(int n) {
        boolean[] check = new boolean[n + 1];
        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                ans.add(i);
            }
            for (Integer item : ans) {
                if (item * i > n) break;
                check[(item * i)] = true;
                if (i % item == 0) break;
            }
        }
        return ans;
    }

    public static void euler_phi(int n) {
        int ans = n;
        for (int i = 2; i <= n / i; i++) {
            if (n % i == 0) {
                ans *= (1 - 1.0 / i);
                while (n % i == 0) {
                    n /= i;
                }
            }
        }
        if (n > 1) ans *= (1 - 1.0 / n);
        System.out.println(ans);
    }

    public static int[] eulers(int n) {
        boolean[] check = new boolean[n + 1];
        int[] phi = new int[n + 1];
        phi[1] = 1;
        ArrayList<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            if (!check[i]) {
                primes.add(i);
                phi[i] = i - 1;
            }

            for (Integer item : primes) {
                if (item * i > n) break;
                check[item * i] = true;
                if (i % item == 0) {
                    phi[item * i] = item * phi[i];
                    break;
                }
                phi[item * i] = (item - 1) * phi[i];
            }
        }
        return phi;
    }


    static final Random random = new Random();

    static void ruffleSort(int[] a) {
        int n = a.length;//shuffle, then sort
        for (int i = 0; i < n; i++) {
            int oi = random.nextInt(n), temp = a[oi];
            a[oi] = a[i];
            a[i] = temp;
        }
        Arrays.sort(a);
    }

    static class Reader {
        BufferedReader buf;
        StringTokenizer tok;

        Reader() {
            buf = new BufferedReader(new InputStreamReader(System.in));
        }

        boolean hasNext() {
            while (tok == null || !tok.hasMoreElements()) {
                try {
                    tok = new StringTokenizer(buf.readLine());
                } catch (Exception e) {
                    return false;
                }
            }
            return true;
        }

        String nextLine() {
            try {
                return buf.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        String next() {
            if (hasNext()) return tok.nextToken();
            return null;
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArrForSizeIndexOfOne(int size) {
            int[] nums = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        int[] nextIntArrForSizeIndexOfZero(int size) {
            int[] nums = new int[size];
            for (int i = 0; i < size; i++) {
                nums[i] = nextInt();
            }
            return nums;
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    private static void print(Object t) {
        sb.append(t);
    }

    private static void printf(Object t) {
        sb.append(t).append("" "");
    }

    private static void printf(Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
    }

    private static void printf(String end, Object... t) {
        for (Object s : t) {
            sb.append(s).append("" "");
        }
        sb.deleteCharAt(sb.length() - 1);
        sb.append(end);
    }

    private static void println(Object t) {
        sb.append(t).append(""\n"");
    }

    private static void println() {
        sb.append(""\n"");
    }

    private static <T> void printArr(long[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

    private static <T> void printArr(int[] arr) {
        for (Object o : arr) {
            sb.append(o).append("" "");
        }
    }

}


"
15,D,Java,61488937,2023-03-24 20:36:07,可爱抱抱呀😥,答案错误,"//Java快读快写模板，不定时更新优化内容
//@可爱抱抱呀
import java.util.*;
import java.io.*;
import java.math.*;
import java.text.*;
public class Main{
    public static void main(String args[]) throws IOException{
        Read sc=new Read();
        int n=sc.nextInt();
        int m=sc.nextInt();
        long c=sc.nextLong();
        List<Integer> path[]=new List[n+5];
        for(int i=1;i<=n;i++){
            path[i]=new ArrayList<>();
        }
        int arr[][]=new int[n+5][3];
        for(int i=1;i<=n;i++){
            for(int j=0;j<3;j++){
                arr[i][j]=sc.nextInt();
            }
        }
        Arrays.sort(arr,(a,b)->a[2]-b[2]);
        long l=0,r=(long)5e18;
        while(l<r){
            long mid=l+(r-l)/2;
            if(check(arr,c,mid,n)){
                r=mid;
            }
            else{
                l=mid+1;
            }
            if(l==r-1){
                if(check(arr,c,l,n)){
                    r=l;
                }
                break;
            }
        }
        sc.println(r);
        //sc.print(0);
        sc.bw.flush();
        sc.bw.close();
    }
    static boolean check(int arr[][],long c,long p,int n){
        if(n==1){
            return true;
        }
        int group[]=new int[n+3];
        for(int i=1;i<=n;i++){
            group[i]=i;
        }
        int count=0;
        int w=1;
        for(int a[]:arr){
            if(find(a[0],group)!=find(a[1],group)){
                //需要修
                count++;
                if(a[2]>p){
                    if(c<(long)a[2]*w){
                        return false;
                    }
                    c-=(long)a[2]*w;
                    w++;
                }
            }
            union(a[0],a[1],group);
            if(count==n-1){
                break;
            }
        }
        return true;
    }
    static int find(int a,int group[]){
        if(a!=group[a]){
            group[a]=find(group[a],group);
        }
        return group[a];
    }
    static void union(int a,int b,int group[]){
        a=find(a,group);
        b=find(b,group);
        group[b]=a;
    }
}
//记住看数字范围，需要开long吗，需要用BigInteger吗，需要手动处理字符串吗，复杂度数量级控制在1e7或者以下了吗
//开数组的数据范围最高不能超过1e7，数据范围再大就要用哈希表离散化了
//基本数据类型不能自定义sort排序，二维数组就可以了，顺序排序的时候是小减大，注意返回值应该是int
class Read{
    BufferedReader bf;
    StringTokenizer st;
    BufferedWriter bw;
    public Read(){
        bf=new BufferedReader(new InputStreamReader(System.in));
        st=new StringTokenizer("""");
        bw=new BufferedWriter(new OutputStreamWriter(System.out));
        //什么时候才能持续稳定ak力扣、AcWing呢？
        //什么时候才能ak cf的div2，div1呢？才能打div2不计rating呢？
        //什么时候才能ak  abc  不计rating呢？
        //什么时候才能ak 牛客练习赛不计rating呢?
    }
    public String nextLine() throws IOException{
        return bf.readLine();
    }
    public String next() throws IOException{
        while(!st.hasMoreTokens()){
            st=new StringTokenizer(bf.readLine());
        }
        return st.nextToken();
    }
    public char nextChar() throws IOException{
        //确定下一个token只有一个字符的时候再用
        return next().charAt(0);
    }
    public int nextInt() throws IOException{
        return Integer.parseInt(next());
    }
    public long nextLong() throws IOException{
        return Long.parseLong(next());
    }
    public double nextDouble() throws IOException{
        return Double.parseDouble(next());
    }
    public float nextFloat() throws IOException{
        return Float.parseFloat(next());
    }
    public byte nextByte() throws IOException{
        return Byte.parseByte(next());
    }
    public short nextShort() throws IOException{
        return Short.parseShort(next());
    }
    public BigInteger nextBigInteger() throws IOException{
        return new BigInteger(next());
    }
    public void println(int a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(int a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(String a) throws IOException{
        bw.write(a);
        bw.newLine();
        return;
    }
    public void print(String a) throws IOException{
        bw.write(a);
        return;
    }
    public void println(long a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(long a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(double a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(double a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void print(BigInteger a) throws IOException{
        bw.write(a.toString());
        return;
    }
    public void print(char a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(char a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
}"
16,D,Java,61489893,2023-03-24 20:44:18,可爱抱抱呀😥,答案正确,"//Java快读快写模板，不定时更新优化内容
//@可爱抱抱呀
import java.util.*;
import java.io.*;
import java.math.*;
import java.text.*;
public class Main{
    static List<Integer> list;
    public static void main(String args[]) throws IOException{
        Read sc=new Read();
        int n=sc.nextInt();
        int m=sc.nextInt();
        long c=sc.nextLong();
        List<Integer> path[]=new List[n+5];
        for(int i=1;i<=n;i++){
            path[i]=new ArrayList<>();
        }
        int arr[][]=new int[m][3];
        for(int i=0;i<m;i++){
            for(int j=0;j<3;j++){
                arr[i][j]=sc.nextInt();
            }
        }
        Arrays.sort(arr,(a,b)->a[2]-b[2]);
        int count=0;
        list=new ArrayList<>();
        int group[]=new int[n+4];
        for(int i=1;i<=n;i++){
            group[i]=i;
        }
        for(int a[]:arr){
            if(find(a[0],group)!=find(a[1],group)){
                count++;
                union(a[0],a[1],group);
                list.add(a[2]);
            }
            if(count==n-1){
                break;
            }
        }
        long l=0,r=(long)5e18;
        while(l<r){
            long mid=l+(r-l)/2;
            if(check(arr,c,mid,n)){
                r=mid;
            }
            else{
                l=mid+1;
            }
            if(l==r-1){
                if(check(arr,c,l,n)){
                    r=l;
                }
                break;
            }
        }
        sc.println(r);
        //sc.print(0);
        sc.bw.flush();
        sc.bw.close();
    }
    static boolean check(int arr[][],long c,long p,int n){
        for(int i=0;i<list.size();i++){
            if(list.get(i)>p){
                long kk=0;
                int max=list.size()-i;
                for(int j=1;j<=max;j++){
                    kk+=(long)j*list.get(list.size()-j);
                }
                if(kk>c){
                    return false;
                }
            }
        }
        return true;
    }
    static int find(int a,int group[]){
        if(a!=group[a]){
            group[a]=find(group[a],group);
        }
        return group[a];
    }
    static void union(int a,int b,int group[]){
        a=find(a,group);
        b=find(b,group);
        group[b]=a;
    }
}
//记住看数字范围，需要开long吗，需要用BigInteger吗，需要手动处理字符串吗，复杂度数量级控制在1e7或者以下了吗
//开数组的数据范围最高不能超过1e7，数据范围再大就要用哈希表离散化了
//基本数据类型不能自定义sort排序，二维数组就可以了，顺序排序的时候是小减大，注意返回值应该是int
class Read{
    BufferedReader bf;
    StringTokenizer st;
    BufferedWriter bw;
    public Read(){
        bf=new BufferedReader(new InputStreamReader(System.in));
        st=new StringTokenizer("""");
        bw=new BufferedWriter(new OutputStreamWriter(System.out));
        //什么时候才能持续稳定ak力扣、AcWing呢？
        //什么时候才能ak cf的div2，div1呢？才能打div2不计rating呢？
        //什么时候才能ak  abc  不计rating呢？
        //什么时候才能ak 牛客练习赛不计rating呢?
    }
    public String nextLine() throws IOException{
        return bf.readLine();
    }
    public String next() throws IOException{
        while(!st.hasMoreTokens()){
            st=new StringTokenizer(bf.readLine());
        }
        return st.nextToken();
    }
    public char nextChar() throws IOException{
        //确定下一个token只有一个字符的时候再用
        return next().charAt(0);
    }
    public int nextInt() throws IOException{
        return Integer.parseInt(next());
    }
    public long nextLong() throws IOException{
        return Long.parseLong(next());
    }
    public double nextDouble() throws IOException{
        return Double.parseDouble(next());
    }
    public float nextFloat() throws IOException{
        return Float.parseFloat(next());
    }
    public byte nextByte() throws IOException{
        return Byte.parseByte(next());
    }
    public short nextShort() throws IOException{
        return Short.parseShort(next());
    }
    public BigInteger nextBigInteger() throws IOException{
        return new BigInteger(next());
    }
    public void println(int a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(int a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(String a) throws IOException{
        bw.write(a);
        bw.newLine();
        return;
    }
    public void print(String a) throws IOException{
        bw.write(a);
        return;
    }
    public void println(long a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(long a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(double a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(double a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void print(BigInteger a) throws IOException{
        bw.write(a.toString());
        return;
    }
    public void print(char a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(char a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
}"
17,D,Java,61491092,2023-03-24 20:54:41,0xC7,答案错误,"import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long c = sc.nextLong();
        long[][] conn = new long[m][3];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 3; j++) {
                conn[i][2 - j] = sc.nextLong();
            }
        }
        dsu d = new dsu(n + 5);
        Arrays.sort(conn, (a, b) ->{
            return (int)(a[0] - b[0]);
        });
        List<List<Long>> l = new ArrayList<List<Long>>();
        for (int i = 0; i < m; i++) {
            if (d.judge((int)conn[i][1], (int)conn[i][2])) continue;
            List<Long> tmp = new ArrayList<>();
            
            d.merge((int)conn[i][1], (int)conn[i][2]);
            
            for (int j = 0; j < 3; j++) {
                tmp.add(conn[i][j]);
            }
            l.add(tmp);
        }
        long[][] conn2 = new long[l.size()][3];
        for (int i = 0; i < l.size(); i++) {
            for (int j = 0; j < 3; j++) {
                conn2[i][j] = l.get(i).get(j);
            }
        }
        int idx = l.size() - 1;
        long k = 1;
        for (idx = l.size() - 1; (idx >= 0) && ((c - k * conn2[idx][0]) >= 0);) {
            c -= k * conn[idx][0];
            k++;
            idx--;
        }
//         for (int i = 0; i < l.size(); i++) {
//             System.out.println(conn2[i][0]);
//         }
        if (idx == -1) {
            System.out.println(0);
        } else {
            System.out.println(conn2[idx][0]);
        }
    }
    static class dsu{
        int[] fa;
        public dsu(int n) {
            fa = new int[n];
            for (int i = 0; i < n; i++) {
                fa[i] = i;
            }
        }
        void merge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            fa[a] = fab;
        }
        int find(int a) {
            if (a != fa[a]) {
                fa[a] = find(fa[a]);
            }
            return fa[a];
        }
        boolean judge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            return faa == fab;
        }
        
    }
}"
18,D,Java,61491150,2023-03-24 20:55:09,0xC7,答案错误,"import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long c = sc.nextLong();
        long[][] conn = new long[m][3];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 3; j++) {
                conn[i][2 - j] = sc.nextLong();
            }
        }
        dsu d = new dsu(n + 5);
        Arrays.sort(conn, (a, b) ->{
            return (int)(a[0] - b[0]);
        });
        List<List<Long>> l = new ArrayList<List<Long>>();
        for (int i = 0; i < m; i++) {
            if (d.judge((int)conn[i][1], (int)conn[i][2])) continue;
            List<Long> tmp = new ArrayList<>();
            
            d.merge((int)conn[i][1], (int)conn[i][2]);
            
            for (int j = 0; j < 3; j++) {
                tmp.add(conn[i][j]);
            }
            l.add(tmp);
        }
        long[][] conn2 = new long[l.size()][3];
        for (int i = 0; i < l.size(); i++) {
            for (int j = 0; j < 3; j++) {
                conn2[i][j] = l.get(i).get(j);
            }
        }
        int idx = l.size() - 1;
        long k = 1;
        for (idx = l.size() - 1; (idx >= 0) && ((c - k * conn2[idx][0]) >= 0l);) {
            c -= k * conn[idx][0];
            k++;
            idx--;
        }
//         for (int i = 0; i < l.size(); i++) {
//             System.out.println(conn2[i][0]);
//         }
        if (idx == -1) {
            System.out.println(0);
        } else {
            System.out.println(conn2[idx][0]);
        }
    }
    static class dsu{
        int[] fa;
        public dsu(int n) {
            fa = new int[n];
            for (int i = 0; i < n; i++) {
                fa[i] = i;
            }
        }
        void merge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            fa[a] = fab;
        }
        int find(int a) {
            if (a != fa[a]) {
                fa[a] = find(fa[a]);
            }
            return fa[a];
        }
        boolean judge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            return faa == fab;
        }
        
    }
}"
19,D,Java,61491335,2023-03-24 20:56:41,0xC7,答案错误,"import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long c = sc.nextLong();
        long[][] conn = new long[m][3];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 3; j++) {
                conn[i][2 - j] = sc.nextLong();
            }
        }
        dsu d = new dsu(n + 5);
        Arrays.sort(conn, (a, b) ->{
            return (int)(a[0] - b[0]);
        });
        List<List<Long>> l = new ArrayList<List<Long>>();
        for (int i = 0; i < m; i++) {
            if (d.judge((int)conn[i][1], (int)conn[i][2])) continue;
            List<Long> tmp = new ArrayList<>();
            
            d.merge((int)conn[i][1], (int)conn[i][2]);
            
            for (int j = 0; j < 3; j++) {
                tmp.add(conn[i][j]);
            }
            l.add(tmp);
        }
        long[][] conn2 = new long[l.size()][3];
        for (int i = 0; i < l.size(); i++) {
            for (int j = 0; j < 3; j++) {
                conn2[i][j] = l.get(i).get(j);
            }
        }
        int idx = l.size() - 1;
        long k = 1;
        for (idx = l.size() - 1; (idx >= 0) && ((c - k * conn2[idx][0]) >= 0l);) {
            c -= k * conn2[idx][0];
            k++;
            idx--;
        }
        if (idx == -1) {
            System.out.println(0);
        } else {
            System.out.println(conn2[idx][0]);
        }
    }
    static class dsu{
        int[] fa;
        public dsu(int n) {
            fa = new int[n];
            for (int i = 0; i < n; i++) {
                fa[i] = i;
            }
        }
        void merge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            fa[a] = fab;
        }
        int find(int a) {
            if (a != fa[a]) {
                fa[a] = find(fa[a]);
            }
            return fa[a];
        }
        boolean judge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            return faa == fab;
        }
        
    }
}"
20,D,Java,61491853,2023-03-24 21:00:11,0xC7,答案错误,"import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long c = sc.nextLong();
        long[][] conn = new long[m][3];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 3; j++) {
                conn[i][2 - j] = sc.nextLong();
            }
        }
        dsu d = new dsu(n + 5);
        Arrays.sort(conn, (a, b) ->{
            return (int)(a[0] - b[0]);
        });
        List<List<Long>> l = new ArrayList<List<Long>>();
        for (int i = 0; i < m; i++) {
            if (d.judge((int)conn[i][1], (int)conn[i][2])) continue;
            List<Long> tmp = new ArrayList<>();
            
            d.merge((int)conn[i][1], (int)conn[i][2]);
            
            for (int j = 0; j < 3; j++) {
                tmp.add(conn[i][j]);
            }
            l.add(tmp);
            if (l.size() == n - 1) break;
        }
        long[][] conn2 = new long[l.size()][3];
        for (int i = 0; i < l.size(); i++) {
            for (int j = 0; j < 3; j++) {
                conn2[i][j] = l.get(i).get(j);
            }
        }
        int idx = l.size() - 1;
        long k = 1;
        for (idx = l.size() - 1; (idx >= 0) && ((c - k * conn2[idx][0]) >= 0l);) {
            c -= k * conn2[idx][0];
            k++;
            idx--;
        }
        if (idx == -1) {
            System.out.println(0);
        } else {
            System.out.println(conn2[idx][0]);
        }
    }
    static class dsu{
        int[] fa;
        public dsu(int n) {
            fa = new int[n];
            for (int i = 0; i < n; i++) {
                fa[i] = i;
            }
        }
        void merge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            fa[a] = fab;
        }
        int find(int a) {
            if (a != fa[a]) {
                fa[a] = find(fa[a]);
            }
            return fa[a];
        }
        boolean judge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            return faa == fab;
        }
        
    }
}"
21,D,Java,61494144,2023-03-24 21:36:16,0xC7,答案错误,"import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long c = sc.nextLong();
        long[][] conn = new long[m][3];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 3; j++) {
                conn[i][j] = sc.nextLong();
            }
        }
        Arrays.sort(conn, (a, b) ->{
            return (int)(a[2] - b[2]);
        });
        long l = 0, r = conn[m - 1][2];
        long ret = 0;
        while (l <= r) {
            long mid = (l + r) >> 1;
            long sum = 0;
            long cc = c;
            dsu d = new dsu(n + 1);
            for (int i = 0; i < m; i++) {
                long x = conn[i][0], y = conn[i][1];
                if (d.judge((int)x, (int)y)) continue;
                d.merge((int)x, (int)y);
                if (conn[i][2] <= mid) continue;
                sum += conn[i][2];
                cc -= sum;
            }
            if (cc <= 0) {
                l = mid + 1;
                ret = mid;
            } else {
                r = mid - 1;
            }
        }
        System.out.println(ret);
    }
    static class dsu{
        int[] fa;
        public dsu(int n) {
            fa = new int[n];
            for (int i = 0; i < n; i++) {
                fa[i] = i;
            }
        }
        void merge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            fa[faa] = fab;
        }
        int find(int a) {
            if (a != fa[a]) {
                fa[a] = find(fa[a]);
            }
            return fa[a];
        }
        boolean judge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            return faa == fab;
        }
        
    }
}"
22,D,Java,61494210,2023-03-24 21:37:34,0xC7,答案正确,"import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long c = sc.nextLong();
        long[][] conn = new long[m][3];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 3; j++) {
                conn[i][j] = sc.nextLong();
            }
        }
        Arrays.sort(conn, (a, b) ->{
            return (int)(a[2] - b[2]);
        });
        long l = 0, r = conn[m - 1][2];
        long ret = 0;
        while (l <= r) {
            long mid = (l + r) >> 1;
            long sum = 0;
            long cc = c;
            dsu d = new dsu(n + 1);
            for (int i = 0; i < m; i++) {
                long x = conn[i][0], y = conn[i][1];
                if (d.judge((int)x, (int)y)) continue;
                d.merge((int)x, (int)y);
                if (conn[i][2] <= mid) continue;
                sum += conn[i][2];
                cc -= sum;
            }
            if (cc < 0) {
                l = mid + 1;
            } else {
                r = mid - 1;
                ret = mid;
            }
        }
        System.out.println(ret);
    }
    static class dsu{
        int[] fa;
        public dsu(int n) {
            fa = new int[n];
            for (int i = 0; i < n; i++) {
                fa[i] = i;
            }
        }
        void merge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            fa[faa] = fab;
        }
        int find(int a) {
            if (a != fa[a]) {
                fa[a] = find(fa[a]);
            }
            return fa[a];
        }
        boolean judge(int a, int b) {
            int faa = find(a);
            int fab = find(b);
            return faa == fab;
        }
        
    }
}"
23,D,Java,61494670,2023-03-24 21:49:12,自由oVo,执行出错,"import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n, m;
	static long c;
	static List<List<Integer>> list = new ArrayList<>();;  
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt(); m = sc.nextInt(); c = sc.nextInt();
		int[][] a = new int[m][3];
		int max = 0;
		for(int i = 0; i < m; i++) {
			a[i][0] = sc.nextInt();
			a[i][1] = sc.nextInt();
			a[i][2] = sc.nextInt();
			max = Math.max(max, a[i][2]);
		}
		Arrays.sort(a, (a1, b1) -> a1[2] - b1[2]);
		int left = 1; int right = max;
		while(left < right) {
			for(int i = 0; i <= n; i++)list.add(new ArrayList<>());
			int mid = (left + right) / 2;
			long sum = c;
			int count = 1;
			for(int i = 0; i < m; i++) {
				if(mid >= a[i][2] || sum >= count * a[i][1]) {
					if(mid < a[i][2]) {
						sum -=  count * a[i][1];
						count++;
					}
					list.get(a[i][0]).add(a[i][1]);
					list.get(a[i][1]).add(a[i][0]);
					continue;
				}
				break;
			}
			if(bfs()) {
				right = mid;
			}else {
				left = mid + 1;
			}
			list.clear();
		}
		System.out.println(right);
	}
	public static boolean bfs() {
		Queue<Integer> q = new ArrayDeque<>();
		q.add(1);
		boolean[] visit = new boolean[n + 1];
		int count = 1;
		visit[1] = true;
		while(!q.isEmpty()){
			int k = q.poll();
			for(int k1 : list.get(k)) {
				if(visit[k1])continue;
				visit[k1] = true;
				q.add(k1);
				count++;
			}
		}
		return count == n;
	}
}
"
24,D,Java,61494828,2023-03-24 21:53:54,自由oVo,答案错误,"import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int n, m;
	static long c;
	static List<List<Integer>> list = new ArrayList<>();;  
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt(); m = sc.nextInt(); c = sc.nextLong();
		int[][] a = new int[m][3];
		int max = 0;
		for(int i = 0; i < m; i++) {
			a[i][0] = sc.nextInt();
			a[i][1] = sc.nextInt();
			a[i][2] = sc.nextInt();
			max = Math.max(max, a[i][2]);
		}
		Arrays.sort(a, (a1, b1) -> a1[2] - b1[2]);
		int left = 1; int right = max;
		while(left < right) {
			for(int i = 0; i <= n; i++)list.add(new ArrayList<>());
			int mid = (left + right) / 2;
			long sum = c;
			int count = 1;
			for(int i = 0; i < m; i++) {
				if(mid >= a[i][2] || sum >= count * a[i][1]) {
					if(mid < a[i][2]) {
						sum -=  count * (long)a[i][1];
						count++;
					}
					list.get(a[i][0]).add(a[i][1]);
					list.get(a[i][1]).add(a[i][0]);
					continue;
				}
				break;
			}
			if(bfs()) {
				right = mid;
			}else {
				left = mid + 1;
			}
			list.clear();
		}
		System.out.println(right);
	}
	public static boolean bfs() {
		Queue<Integer> q = new ArrayDeque<>();
		q.add(1);
		boolean[] visit = new boolean[n + 1];
		int count = 1;
		visit[1] = true;
		while(!q.isEmpty()){
			int k = q.poll();
			for(int k1 : list.get(k)) {
				if(visit[k1])continue;
				visit[k1] = true;
				q.add(k1);
				count++;
			}
		}
		return count == n;
	}
}
"
25,D,Java,61494894,2023-03-24 21:55:19,小小小巨人,答案正确,"import java.io.*;
import java.math.*;
import java.util.*;
import java.util.Map.*;
/**
 * 
 * @author TCchen
 */
public class Main {
	public static void main(String[]args) throws IOException {
		new Main().run();
	}
//	File input=new File("".\\input.txt"");
//	File output=new File("".\\output.txt"");
	void run() throws IOException{
//		new Solve().setIO(input, output).run();
		new Solve().setIO(System.in,System.out).run();
	}
	class Solve extends ioTask{
		int n,q,m,k,i,j,len,l,r;
		class edge implements Comparable<edge>{
			int x,y,v;
			public edge(int x,int y,int v) {
				this.x=x;
				this.y=y;
				this.v=v;
			}
			@Override
			public int compareTo(edge o) {
				return v-o.v;
			}
		}
		long c;
		long sum;
		int[]f;
		int[]a;
		int f(int a) {
			if(f[a]==a)return a;
			return f[a]=f(f[a]);
		}
		boolean merge(int a,int b) {
			a=f(a);
			b=f(b);
			if(a==b)return false;
			f[a]=b;
			return true;
		}
		edge[]e;
		boolean judge(int p) {
			for(i=1;i<=n;i++)f[i]=i;
			long k=n-1;
			long sum=0;
			for(edge q:e) {
				if(q.v<=p) {
					if(merge(q.x,q.y)) {
						k--;
					}
				}
				if(merge(q.x,q.y))sum+=q.v*k--;
			}
//			out.println(p+"" ""+k+"" ""+sum);
			return sum<=c;
		}
		void solve() throws IOException{
			n=in.in();
			m=in.in();
			c=in.inl();
			f=new int[n+1];
			e=new edge[m];
			for(i=0;i<m;i++)e[i]=(new edge(in.in(),in.in(),in.in()));
			Arrays.sort(e);
			l=-1;
			r=1000000009;
			int mid;
			while(r-l>1) {
				mid=r+l+1>>1;
				if(judge(mid))r=mid;
				else l=mid;
			}
			out.println(r);
		}
		int te=1;
		void run()throws IOException{
//			init();
			int t=1;
//			t=in.in();
			for(te=1;te<=t;te++) {
				solve();
				out.flush();
			}
			out.close();
		}
//		long timeMillis;
//		void st() {
//			timeMillis=System.currentTimeMillis();
//		}
//		void ed() {
//			System.out.println((System.currentTimeMillis()-timeMillis)+""ms"");
//		}
	}
	class QIn{
		StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
		int in() throws IOException {
			st.nextToken();
			return (int)st.nval;
		}
		long inl() throws IOException {
			st.nextToken();
			return (long)st.nval;
		}
		double ind()throws IOException  {
			st.nextToken();
			return st.nval;
		}
		String ins() throws IOException {
			st.nextToken();
			return st.sval;
		}
	}
	class In{
		private StringTokenizer in=new StringTokenizer("""");
		private InputStream is;
		private BufferedReader br;
		public In(File file) throws IOException {
			is=new FileInputStream(file);
			init();
		}
		public In(InputStream is) throws IOException{
			this.is=is;
			init();
		}
		private void init() throws IOException {
			br=new BufferedReader(new InputStreamReader(is));
		}
		/**
		 * File and OJ only
		 */
		boolean hasNext() throws IOException {
			return in.hasMoreTokens()||br.ready();
		}
		String ins() throws IOException {
			while(!in.hasMoreTokens()) {
				in=new StringTokenizer(br.readLine());
			}
			return in.nextToken();
		}
		int in() throws IOException {
			return Integer.parseInt(ins());
		}
		long inl() throws IOException {
			return Long.parseLong(ins());
		}
		double ind() throws IOException {
			return Double.parseDouble(ins());
		}
		String line() throws IOException {
			return br.readLine();
		}
	}
	class Out{
		PrintWriter out;
		private OutputStream os;
		private void init() {
			out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
		}
		public Out(File file) throws IOException {
			os=new FileOutputStream(file);
			init();
		}
		public Out(OutputStream os) throws IOException{
			this.os=os;
			init();
		}
	}
	abstract class ioTask{
		In in;
		PrintWriter out;
		public ioTask setIO(File in,File out) throws IOException{
			this.in=new In(in);
			this.out=new Out(out).out;
			return this;
		}
		public ioTask setIO(File in,OutputStream out) throws IOException{
			this.in=new In(in);
			this.out=new Out(out).out;
			return this;
		}
		public ioTask setIO(InputStream in,OutputStream out) throws IOException{
			this.in=new In(in);
			this.out=new Out(out).out;
			return this;
		}
		public ioTask setIO(InputStream in,File out) throws IOException{
			this.in=new In(in);
			this.out=new Out(out).out;
			return this;
		}
		void run()throws IOException{}
	}
}"
26,D,Java,61495358,2023-03-24 22:08:06,Eunoiay,答案错误,"import static java.lang.Math.*;
import java.util.*;
import java.io.*;

public class Main {
    private static FastReader sc = new FastReader();
    private static PrintWriter pw = new PrintWriter(System.out);
    
    static final int N = 100010;
    static Edge[] edge = new Edge[N];
    static int[] p  = new int[N];
    static List<Integer> path = new ArrayList<>();
    static int n, m;
    static long money;
    
    public static void main(String[] args) throws IOException {
        solve();
        pw.close();
    }
    
    public static void solve() {
        n = sc.nextInt();
        m = sc.nextInt();
        money = sc.nextLong();
        
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int w = sc.nextInt();
            
            edge[i] = new Edge(a, b, w);
        }
        
        for (int i = 1; i <= n; i++) p[i] = i;
        
        long t = kruskal();

        long l = 0, r = (long)1e18;
        while (l < r) {
            long mid = l + r >> 1;
            if (check(mid, t)) r = mid;
            else l = mid + 1; 
        
        }
        
        pw.println(r);
    }
    
    public static long kruskal() {
        Arrays.sort(edge, 0, m);
        
        long res = 0;
        for (int i = 0; i < m; i++) {
            int a = edge[i].a, b = edge[i].b, w = edge[i].w;
            
            a = find(a);
            b = find(b);
            
            if (a == b) continue;
            p[a] = b;
            path.add(w);
            res += w;
        }
        
        return res;
    }
    
    public static boolean check(long p, long t) {
        long res = 0;
        int k = 0;
        for (int i = path.size() - 1; i >= 0; i--) {
            int w = path.get(i);
            if (w <= p) break;
            
            res += ++k * w;
            if (res > money) return false;
        }
        
        // if (p < 100) pw.println(p);
        return true;
    }
    
    public static int find(int x) {
        if (p[x] != x) p[x] = find(p[x]);
        
        return p[x];
    }
    
    public static class Edge implements Comparable<Edge> {
        int a, b, w;
        Edge(int a, int b, int w) {
            this.a = a;
            this.b = b;
            this.w = w;
        }
        
        @Override
        public int compareTo(Edge e) {
            return w - e.w;
        }
    }
    
    private static class FastReader {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try { 
                    st = new StringTokenizer(br.readLine()); 
                    
                } catch (IOException e) {
                    e.printStackTrace(); 
                }
            }
            return st.nextToken();
        }
        
        int nextInt() {
            return Integer.parseInt(next());
        }
        
        long nextLong() {
            return Long.parseLong(next());
        }
        
        double nextDouble() {
            return Double.parseDouble(next());
        }
        
        String nextLine() {
            String line = null;
            try {
                line = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            
            return line;
        }
        
        boolean hasNext() {
            if (st == null || !st.hasMoreElements()) {
                try {
                    String in = br.readLine();
                    if (in == null) return false;
                    st = new StringTokenizer(in);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            
            return true;
        }
    }
}"
27,D,Java,61495402,2023-03-24 22:10:09,Eunoiay,答案正确,"import static java.lang.Math.*;
import java.util.*;
import java.io.*;

public class Main {
    private static FastReader sc = new FastReader();
    private static PrintWriter pw = new PrintWriter(System.out);
    
    static final int N = 100010;
    static Edge[] edge = new Edge[N];
    static int[] p  = new int[N];
    static List<Integer> path = new ArrayList<>();
    static int n, m;
    static long money;
    
    public static void main(String[] args) throws IOException {
        solve();
        pw.close();
    }
    
    public static void solve() {
        n = sc.nextInt();
        m = sc.nextInt();
        money = sc.nextLong();
        
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int w = sc.nextInt();
            
            edge[i] = new Edge(a, b, w);
        }
        
        for (int i = 1; i <= n; i++) p[i] = i;
        
        long t = kruskal();

        long l = 0, r = (long)1e18;
        while (l < r) {
            long mid = l + r >> 1;
            if (check(mid, t)) r = mid;
            else l = mid + 1; 
        
        }
        
        pw.println(r);
    }
    
    public static long kruskal() {
        Arrays.sort(edge, 0, m);
        
        long res = 0;
        for (int i = 0; i < m; i++) {
            int a = edge[i].a, b = edge[i].b, w = edge[i].w;
            
            a = find(a);
            b = find(b);
            
            if (a == b) continue;
            p[a] = b;
            path.add(w);
            res += w;
        }
        
        return res;
    }
    
    public static boolean check(long p, long t) {
        long res = 0;
        int k = 0;
        for (int i = path.size() - 1; i >= 0; i--) {
            int w = path.get(i);
            if (w <= p) break;
            
            k++;
            res += 1L * k * w;
            if (res > money) return false;
        }
        
        // if (p < 100) pw.println(p);
        return true;
    }
    
    public static int find(int x) {
        if (p[x] != x) p[x] = find(p[x]);
        
        return p[x];
    }
    
    public static class Edge implements Comparable<Edge> {
        int a, b, w;
        Edge(int a, int b, int w) {
            this.a = a;
            this.b = b;
            this.w = w;
        }
        
        @Override
        public int compareTo(Edge e) {
            return w - e.w;
        }
    }
    
    private static class FastReader {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try { 
                    st = new StringTokenizer(br.readLine()); 
                    
                } catch (IOException e) {
                    e.printStackTrace(); 
                }
            }
            return st.nextToken();
        }
        
        int nextInt() {
            return Integer.parseInt(next());
        }
        
        long nextLong() {
            return Long.parseLong(next());
        }
        
        double nextDouble() {
            return Double.parseDouble(next());
        }
        
        String nextLine() {
            String line = null;
            try {
                line = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            
            return line;
        }
        
        boolean hasNext() {
            if (st == null || !st.hasMoreElements()) {
                try {
                    String in = br.readLine();
                    if (in == null) return false;
                    st = new StringTokenizer(in);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            
            return true;
        }
    }
}"
28,D,Java,61497260,2023-03-24 23:33:19,郑士文,执行出错,"import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {
    public static int getf(int a,int f[]){
        int x=a;
        while(f[x]!=x){
            x=f[x];
        }
        return f[a]=x;
    }
    public static boolean merge(int a,int b,int f[]){
        int x=getf(a,f);
        int y=getf(b,f);
        if(x==y) return false;
        else {
            f[x]=y;
            return true;
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int ans=0,sum=0;
        int n=sc.nextInt();
        int m=sc.nextInt();
        int c=sc.nextInt();
        int a[][] = new int[m][3];
        int f[] = new int[n+1];
        for(int i=1;i<=n;i++) f[i]=i;
        for(int i=0;i<m;i++){
            for(int j=0;j<3;j++){
                a[i][j]=sc.nextInt();
            }
        }
        Arrays.sort(a, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[2]-o2[2];
            }
        });
        int num[]=new int[m];
        int cnt=0;
        for(int i=0;i<m;i++){
            boolean b=merge(a[i][0],a[i][1],f);
            if(b) num[cnt++]=a[i][2];
        }
        for(int i=1;i<=cnt;i++){
            sum+=i*num[cnt-i];
            if(sum>c){
                ans=num[cnt-i];
                break;
            }
        }
        System.out.println(ans);
    }
}"
29,D,Java,61497283,2023-03-24 23:34:20,郑士文,执行出错,"import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {
    public static int getf(int a,int f[]){
        int x=a;
        while(f[x]!=x){
            x=f[x];
        }
        return f[a]=x;
    }
    public static boolean merge(int a,int b,int f[]){
        int x=getf(a,f);
        int y=getf(b,f);
        if(x==y) return false;
        else {
            f[x]=y;
            return true;
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        long ans=0,sum=0;
        int n=sc.nextInt();
        int m=sc.nextInt();
        int c=sc.nextInt();
        int a[][] = new int[m][3];
        int f[] = new int[n+1];
        for(int i=1;i<=n;i++) f[i]=i;
        for(int i=0;i<m;i++){
            for(int j=0;j<3;j++){
                a[i][j]=sc.nextInt();
            }
        }
        Arrays.sort(a, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[2]-o2[2];
            }
        });
        int num[]=new int[m];
        int cnt=0;
        for(int i=0;i<m;i++){
            boolean b=merge(a[i][0],a[i][1],f);
            if(b) num[cnt++]=a[i][2];
        }
        for(int i=1;i<=cnt;i++){
            sum+=i*num[cnt-i];
            if(sum>c){
                ans=num[cnt-i];
                break;
            }
        }
        System.out.println(ans);
    }
}"
30,D,Java,61497325,2023-03-24 23:36:01,郑士文,答案正确,"import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {
    public static int getf(int a,int f[]){
        int x=a;
        while(f[x]!=x){
            x=f[x];
        }
        return f[a]=x;
    }
    public static boolean merge(int a,int b,int f[]){
        int x=getf(a,f);
        int y=getf(b,f);
        if(x==y) return false;
        else {
            f[x]=y;
            return true;
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        long ans=0,sum=0;
        int n=sc.nextInt();
        int m=sc.nextInt();
        long c=sc.nextLong();
        int a[][] = new int[m][3];
        int f[] = new int[n+1];
        for(int i=1;i<=n;i++) f[i]=i;
        for(int i=0;i<m;i++){
            for(int j=0;j<3;j++){
                a[i][j]=sc.nextInt();
            }
        }
        Arrays.sort(a, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[2]-o2[2];
            }
        });
        int num[]=new int[m];
        int cnt=0;
        for(int i=0;i<m;i++){
            boolean b=merge(a[i][0],a[i][1],f);
            if(b) num[cnt++]=a[i][2];
        }
        for(int i=1;i<=cnt;i++){
            sum+=(long)i*(long)num[cnt-i];
            if(sum>c){
                ans=num[cnt-i];
                break;
            }
        }
        System.out.println(ans);
    }
}"
31,D,Java,61497389,2023-03-24 23:39:13,凯撒Katharsis,执行出错,"import java.util.*;
import java.io.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static final int N = 100010;
    static int f[] = new int[N];
    static int n, m;
    static long c;

    static int find(int x) {
        if(f[x] != x) {
            f[x] = find(f[x]);
        }
        return f[x];
    }

    static boolean merge(int v1, int v2) {
        int fv1 = find(v1);
        int fv2 = find(v2);
        if(fv1 == fv2) {
            return false;
        }

        f[fv1] = fv2;
        return true;
    }

    public static void main(String[] args) throws Exception {
        String str[] = br.readLine().split("" "");
        n = Integer.parseInt(str[0]);
        m = Integer.parseInt(str[1]);
        c = Integer.parseInt(str[2]);

        int edge[][] = new int[m][3];

        for(int i = 0; i < m; i ++ ) {
            str = br.readLine().split("" "");
            for(int j = 0; j < 3; j ++ ) {
                edge[i][j] = Integer.parseInt(str[j]);
            }
            edge[i][0] -- ;
            edge[i][1] -- ;
        }

        Arrays.sort(edge, new Comparator<int[]>() {
            public int compare(int[] o1, int []o2) {
                if(o1[2] > o2[2]) return 1;
                return -1;
            }
        });

        for(int i = 1; i <= n; i ++ ) f[i] = i;
        List<Integer> li = new ArrayList<>();
        for(int i = 0; i < m; i ++ ) {
            if(merge(edge[i][0], edge[i][1])) li.add(edge[i][2]);
        }

        long tmp = 0;
        for(int i = li.size() - 1, j = 1; i >= 0; i -- , j ++ ) {
            tmp += (long)j * li.get(i);
            if(tmp > c) {
                bw.write(li.get(i) + ""\n"");
                bw.flush();
                return ;
            }
        }

        bw.write(0 + ""\n"");
        bw.flush();
    }
}"
32,D,Java,61497438,2023-03-24 23:41:31,凯撒Katharsis,执行出错,"import java.util.*;
import java.io.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static final int N = 100010;
    static int f[] = new int[N];
    static int n, m;
    static long c;

    static int find(int x) {
        if(f[x] != x) {
            f[x] = find(f[x]);
        }
        return f[x];
    }

    static boolean merge(int v1, int v2) {
        int fv1 = find(v1);
        int fv2 = find(v2);
        if(fv1 == fv2) {
            return false;
        }

        f[fv1] = fv2;
        return true;
    }

    public static void main(String[] args) throws Exception {
        String str[] = br.readLine().split("" "");
        n = Integer.parseInt(str[0]);
        m = Integer.parseInt(str[1]);
        c = Integer.parseInt(str[2]);

        int edge[][] = new int[m][3];

        for(int i = 0; i < m; i ++ ) {
            str = br.readLine().split("" "");
            for(int j = 0; j < 3; j ++ ) {
                edge[i][j] = Integer.parseInt(str[j]);
            }
            edge[i][0] -- ;
            edge[i][1] -- ;
        }

        Arrays.sort(edge, new Comparator<int[]>() {
            public int compare(int[] o1, int []o2) {
                if(o1[2] > o2[2]) return 1;
                return -1;
            }
        });

        for(int i = 0; i < n; i ++ ) f[i] = i;
        List<Integer> li = new ArrayList<>();
        for(int i = 0; i < m; i ++ ) {
            if(merge(edge[i][0], edge[i][1])) li.add(edge[i][2]);
        }

        long tmp = 0;
        for(int i = li.size() - 1, j = 1; i >= 0; i -- , j ++ ) {
            tmp += (long)j * li.get(i);
            if(tmp > c) {
                bw.write(li.get(i) + ""\n"");
                bw.flush();
                return ;
            }
        }

        bw.write(0 + ""\n"");
        bw.flush();
    }
}"
33,D,Java,61497452,2023-03-24 23:42:30,凯撒Katharsis,答案正确,"import java.util.*;
import java.io.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static final int N = 100010;
    static int f[] = new int[N];
    static int n, m;
    static long c;

    static int find(int x) {
        if(f[x] != x) {
            f[x] = find(f[x]);
        }
        return f[x];
    }

    static boolean merge(int v1, int v2) {
        int fv1 = find(v1);
        int fv2 = find(v2);
        if(fv1 == fv2) {
            return false;
        }

        f[fv1] = fv2;
        return true;
    }

    public static void main(String[] args) throws Exception {
        String str[] = br.readLine().split("" "");
        n = Integer.parseInt(str[0]);
        m = Integer.parseInt(str[1]);
        c = Long.parseLong(str[2]);

        int edge[][] = new int[m][3];

        for(int i = 0; i < m; i ++ ) {
            str = br.readLine().split("" "");
            for(int j = 0; j < 3; j ++ ) {
                edge[i][j] = Integer.parseInt(str[j]);
            }
            edge[i][0] -- ;
            edge[i][1] -- ;
        }

        Arrays.sort(edge, new Comparator<int[]>() {
            public int compare(int[] o1, int []o2) {
                if(o1[2] > o2[2]) return 1;
                return -1;
            }
        });

        for(int i = 0; i < n; i ++ ) f[i] = i;
        List<Integer> li = new ArrayList<>();
        for(int i = 0; i < m; i ++ ) {
            if(merge(edge[i][0], edge[i][1])) li.add(edge[i][2]);
        }

        long tmp = 0;
        for(int i = li.size() - 1, j = 1; i >= 0; i -- , j ++ ) {
            tmp += (long)j * li.get(i);
            if(tmp > c) {
                bw.write(li.get(i) + ""\n"");
                bw.flush();
                return ;
            }
        }

        bw.write(0 + ""\n"");
        bw.flush();
    }
}"
34,D,Java,61497808,2023-03-25 00:16:03,Jiarui.X,答案正确,"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import  java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final int N = 40010;
    static int n, m;
    static long c;
    static int[] p = new int[N];
    static List<tuple> list = new ArrayList<>();
    static List<Long> list1 = new ArrayList<>();
    static class tuple implements Comparable<tuple>{
        int a, b, w;
        public tuple(int a, int b, int w) {
            this.a = a;
            this.b = b;
            this.w = w;
        }
        @Override
        public int compareTo(tuple t) {
            return w - t.w;
        }
    }
    public static int find(int x) {
        return x == p[x] ? p[x] : (p[x] = find(p[x]));
    }
    public static void Solve() throws IOException {
        String[] S1 = br.readLine().split("" "");
        n = Integer.parseInt(S1[0]);
        m = Integer.parseInt(S1[1]);
        c = Long.parseLong(S1[2]);
        for (int i = 0; i < m; i ++) {
            int a, b, w;
            S1 = br.readLine().split("" "");
            a = Integer.parseInt(S1[0]);
            b = Integer.parseInt(S1[1]);
            w = Integer.parseInt(S1[2]);
            list.add(new tuple(a, b, w));
        }
        Collections.sort(list);
        for (int i = 1; i <= n; i ++) p[i] = i;
        long res = 0, cnt = 1;
        for (int i = 0; i < m; i ++) {
            int a = list.get(i).a, b = list.get(i).b, w = list.get(i).w;
            a = find(a); b = find(b);
            if(a != b) {
                p[a] = b;
                list1.add((long)w);
            }
        }
        int len = list1.size();
        for (int i = len - 1; i >= 0; i --) {
            c -= list1.get(i) * cnt;
            ++ cnt;
            if(c < 0) {
                System.out.println(list1.get(i));
                return ;
            }
        }
        System.out.println(0);
    }
    public static void main(String[] args) throws IOException {
        int T = 1;
        for (; T > 0; T --) Solve();
    }
}"
35,D,Java,61499484,2023-03-25 10:20:53,giao1,执行出错,"import java.util.*;


class Node implements Comparable<Node>{
    int x,y,w;

    public Node(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }
    @Override
    public int compareTo(Node o) {
        return w-o.w;
    }
}


public class Main{
    
    static int n,m,c,N = 40010;
    static Vector<Node> list = new Vector<>();
    static Vector<Long> list1 = new Vector<>();
    static int[] p = new int[N];
    
     static int find(int x){
        return x==p[x]?p[x]:(p[x]=find(p[x]));
    }
    
    public static void main(String[] args){
        Scanner cin = new Scanner(System.in);
        n = cin.nextInt();
        m = cin.nextInt();
        c = cin.nextInt();
        for(int i = 1;i<=n;i++) p[i] = i;
        while(m-->0){
            int x = cin.nextInt();
            int y = cin.nextInt();
            int w = cin.nextInt();
            list.add(new Node(x,y,w));
        }
        Collections.sort(list);
        for(int i = 0;i < list.size();i++){
            int x = list.get(i).x;
            int y = list.get(i).y;
            long w = list.get(i).w;
            if(find(x)!=find(y)){
                p[y] = x;
                list1.add(w);
            }
        }
        int cnt = 1;
        int len = list1.size()-1;
        for(int i = len;i>=0;i--){
            c -= list1.get(i)*cnt;
            if(c<0){
                System.out.println(list1.get(i));
                return;
            }
            cnt++;
        }
        System.out.println(0);
    }
       
    
}"
36,D,Java,61499533,2023-03-25 10:23:32,giao1,答案错误,"import java.util.*;


class Node implements Comparable<Node>{
    int x,y,w;
    

    public Node(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }
    @Override
    public int compareTo(Node o) {
        return w-o.w;
    }
}


public class Main{
    
    static int n,m,N = 40010;
    static Vector<Node> list = new Vector<>();
    static Vector<Long> list1 = new Vector<>();
    static int[] p = new int[N];
    
     static int find(int x){
        return x==p[x]?p[x]:(p[x]=find(p[x]));
    }
    
    public static void main(String[] args){
        Scanner cin = new Scanner(System.in);
        n = cin.nextInt();
        m = cin.nextInt();
        long c = cin.nextLong();
        for(int i = 1;i<=n;i++) p[i] = i;
        while(m-->0){
            int x = cin.nextInt();
            int y = cin.nextInt();
            int w = cin.nextInt();
            list.add(new Node(x,y,w));
        }
        Collections.sort(list);
        for(int i = 0;i < list.size();i++){
            int x = list.get(i).x;
            int y = list.get(i).y;
            long w = list.get(i).w;
            if(find(x)!=find(y)){
                p[y] = x;
                list1.add(w);
            }
        }
        int cnt = 1;
        int len = list1.size()-1;
        for(int i = len;i>=0;i--){
            c -= list1.get(i)*cnt;
            if(c<0){
                System.out.println(list1.get(i));
                return;
            }
            cnt++;
        }
        System.out.println(0);
    }
       
    
}"
37,D,Java,61499566,2023-03-25 10:25:45,giao1,答案正确,"import java.util.*;


class Node implements Comparable<Node>{
    int x,y,w;
    

    public Node(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }
    @Override
    public int compareTo(Node o) {
        return w-o.w;
    }
}


public class Main{
    
    static int n,m,N = 40010;
    static Vector<Node> list = new Vector<>();
    static Vector<Long> list1 = new Vector<>();
    static int[] p = new int[N];
    
     static int find(int x){
        return x==p[x]?p[x]:(p[x]=find(p[x]));
    }
    
    public static void main(String[] args){
        Scanner cin = new Scanner(System.in);
        n = cin.nextInt();
        m = cin.nextInt();
        long c = cin.nextLong();
        for(int i = 1;i<=n;i++) p[i] = i;
        while(m-->0){
            int x = cin.nextInt();
            int y = cin.nextInt();
            int w = cin.nextInt();
            list.add(new Node(x,y,w));
        }
        Collections.sort(list);
        for(int i = 0;i < list.size();i++){
            int x = list.get(i).x;
            int y = list.get(i).y;
            long w = list.get(i).w;
            int a = find(x);
            int b = find(y);
            if(a!=b){
                p[a] = b;
                list1.add(w);
            }
        }
        int cnt = 1;
        int len = list1.size()-1;
        for(int i = len;i>=0;i--){
            c -= list1.get(i)*cnt;
            if(c<0){
                System.out.println(list1.get(i));
                return;
            }
            cnt++;
        }
        System.out.println(0);
    }
       
    
}"
38,D,Java,61499607,2023-03-25 10:27:41,祸灵梦,执行出错,"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.Arrays;

class Road implements Comparable<Road>{
    int x,y,w;

    public Road(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }

    @Override
    public int compareTo(Road o) {
        return this.w - o.w;
    }
}

public class Main {
    final static int N = 40010;
    static int n, m;
    static long c;
    static Road[] roads = new Road[N];
    static int[] f = new int[N];
    static boolean[] st = new boolean[N];
    static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

    static void init(){
        for(int i = 1; i <= n; i++){
            f[i] = i;
        }
    }

    static int find(int x){
        return f[x] == x ? f[x] : (f[x] = find(f[x]));
    }

    static boolean check(int limit){
        init();
        Arrays.fill(st, false);
        long waste = 0, times = 1;
        for(int i = 1; i <= m; i++){
            if(roads[i].w <= limit){
                int x = find(roads[i].x), y = find(roads[i].y);
                if(x != y){
                    f[x] = y;
                }
            }else{
                break;
            }
        }

        for(int i = 1; i <= m; i++){
            if(roads[i].w > limit){
                int x = find(roads[i].x), y = find(roads[i].y);
                if(x != y){
                    f[x] = y;
                    st[i] = true;
                }
            }
        }

        for(int i = m; i >= 1; i--){
            if(st[i]){
                waste += times * roads[i].w;
                times++;
            }
        }
        return waste <= c;
    }

    public static void main(String[] args) throws IOException {
        in.nextToken(); n = (int) in.nval;
        in.nextToken(); m = (int) in.nval;
        in.nextToken(); c = (long) in.nval;

        for(int i = 1; i <= m; i++){
            int x,y,w;
            in.nextToken(); x = (int) in.nval;
            in.nextToken(); y = (int) in.nval;
            in.nextToken(); w = (int) in.nval;

            roads[i] = new Road(x,y,w);
        }

        Arrays.sort(roads, 1, m + 1);

        int l = 0, r = (int) 1e9;
        while(l < r){
            int mid = l + r >> 1;
            if(check(mid)) r = mid;
            else l = mid + 1;
        }

        System.out.println(l);
    }
}"
39,D,Java,61499621,2023-03-25 10:28:22,祸灵梦,执行出错,"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.Arrays;

class Road implements Comparable<Road>{
    int x,y,w;

    public Road(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }

    @Override
    public int compareTo(Road o) {
        return this.w - o.w;
    }
}

public class Main {
    final static int N = 40010, M = 100010;
    static int n, m;
    static long c;
    static Road[] roads = new Road[M];
    static int[] f = new int[N];
    static boolean[] st = new boolean[N];
    static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

    static void init(){
        for(int i = 1; i <= n; i++){
            f[i] = i;
        }
    }

    static int find(int x){
        return f[x] == x ? f[x] : (f[x] = find(f[x]));
    }

    static boolean check(int limit){
        init();
        Arrays.fill(st, false);
        long waste = 0, times = 1;
        for(int i = 1; i <= m; i++){
            if(roads[i].w <= limit){
                int x = find(roads[i].x), y = find(roads[i].y);
                if(x != y){
                    f[x] = y;
                }
            }else{
                break;
            }
        }

        for(int i = 1; i <= m; i++){
            if(roads[i].w > limit){
                int x = find(roads[i].x), y = find(roads[i].y);
                if(x != y){
                    f[x] = y;
                    st[i] = true;
                }
            }
        }

        for(int i = m; i >= 1; i--){
            if(st[i]){
                waste += times * roads[i].w;
                times++;
            }
        }
        return waste <= c;
    }

    public static void main(String[] args) throws IOException {
        in.nextToken(); n = (int) in.nval;
        in.nextToken(); m = (int) in.nval;
        in.nextToken(); c = (long) in.nval;

        for(int i = 1; i <= m; i++){
            int x,y,w;
            in.nextToken(); x = (int) in.nval;
            in.nextToken(); y = (int) in.nval;
            in.nextToken(); w = (int) in.nval;

            roads[i] = new Road(x,y,w);
        }

        Arrays.sort(roads, 1, m + 1);

        int l = 0, r = (int) 1e9;
        while(l < r){
            int mid = l + r >> 1;
            if(check(mid)) r = mid;
            else l = mid + 1;
        }

        System.out.println(l);
    }
}"
40,D,Java,61499625,2023-03-25 10:28:58,祸灵梦,答案正确,"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.Arrays;

class Road implements Comparable<Road>{
    int x,y,w;

    public Road(int x, int y, int w) {
        this.x = x;
        this.y = y;
        this.w = w;
    }

    @Override
    public int compareTo(Road o) {
        return this.w - o.w;
    }
}

public class Main {
    final static int N = 40010, M = 100010;
    static int n, m;
    static long c;
    static Road[] roads = new Road[M];
    static int[] f = new int[M];
    static boolean[] st = new boolean[M];
    static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));

    static void init(){
        for(int i = 1; i <= n; i++){
            f[i] = i;
        }
    }

    static int find(int x){
        return f[x] == x ? f[x] : (f[x] = find(f[x]));
    }

    static boolean check(int limit){
        init();
        Arrays.fill(st, false);
        long waste = 0, times = 1;
        for(int i = 1; i <= m; i++){
            if(roads[i].w <= limit){
                int x = find(roads[i].x), y = find(roads[i].y);
                if(x != y){
                    f[x] = y;
                }
            }else{
                break;
            }
        }

        for(int i = 1; i <= m; i++){
            if(roads[i].w > limit){
                int x = find(roads[i].x), y = find(roads[i].y);
                if(x != y){
                    f[x] = y;
                    st[i] = true;
                }
            }
        }

        for(int i = m; i >= 1; i--){
            if(st[i]){
                waste += times * roads[i].w;
                times++;
            }
        }
        return waste <= c;
    }

    public static void main(String[] args) throws IOException {
        in.nextToken(); n = (int) in.nval;
        in.nextToken(); m = (int) in.nval;
        in.nextToken(); c = (long) in.nval;

        for(int i = 1; i <= m; i++){
            int x,y,w;
            in.nextToken(); x = (int) in.nval;
            in.nextToken(); y = (int) in.nval;
            in.nextToken(); w = (int) in.nval;

            roads[i] = new Road(x,y,w);
        }

        Arrays.sort(roads, 1, m + 1);

        int l = 0, r = (int) 1e9;
        while(l < r){
            int mid = l + r >> 1;
            if(check(mid)) r = mid;
            else l = mid + 1;
        }

        System.out.println(l);
    }
}"
41,D,Java,61500006,2023-03-25 10:52:24,今天一定早点睡,答案正确,"import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static int N = 40010, M = 100010, ans, n, m, cnt;
    static long c;
    static int[] p = new int[N];
    static PII[] edges = new PII[M];
    static int[] path = new int[N];

    static int find(int x) {
        if (x != p[x]) p[x] = find(p[x]);
        return p[x];
    }

    static void kruscal() {
        for (int i = 0; i < m; i ++) {
            PII t = edges[i];
            int a = find(t.x), b = find(t.y);
            if (a != b) {
                p[a] = b;
                path[cnt ++] = t.sun;
            }
        }
    }

    static boolean check(int mid) {
        long res = 0;
        int t = 1;
        for (int i = cnt - 1; i >= 0; i --) {
            if (path[i] <= mid) return true;
            res += (long) path[i] * t ++;
            if (res > c) return false;
        }
        return true;
    }

    public static void main(String[] args) throws Exception {
        String[] s1 = in.readLine().split("" "");
        n = Integer.parseInt(s1[0]); m = Integer.parseInt(s1[1]); c = Long.parseLong(s1[2]);
        //m条边
        for (int i = 0; i < m; i ++) {
            String[] s2 = in.readLine().split("" "");
            edges[i] = new PII(Integer.parseInt(s2[0]), Integer.parseInt(s2[1]),Integer.parseInt(s2[2]));
        }
        //排序
        Arrays.sort(edges, 0, m, (o1, o2) -> o1.sun - o2.sun);
        //初始化并查集
        for (int i = 1; i <= n; i ++) p[i] = i;
        //找出最小生成树
        kruscal();

        //二分查找最小p
        int l = 0, r = (int) 1e9;
        while (l < r) {
            int mid = l + r >> 1;
            if (check(mid)) r = mid;
            else l = mid + 1;
        }
        out.println(l);
        out.flush();
    }
}

class PII {
    int x, y, sun;
    PII (int a, int b, int c) {
        x = a;
        y = b;
        sun = c;
    }
}"
42,D,Java,61517324,2023-03-25 14:33:05,迷你滨,答案正确,"import java.util.*;
import java.io.*;


public class Main {
	static int n,m,mod=(int)1e9+7,maxn=40002;
	static long ans=0,INF=(long)1e18;
	static Scanner sc = new Scanner (System.in);
	static BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	static StreamTokenizer st = new StreamTokenizer(bf);
	static PrintWriter pw = new PrintWriter(System.out);
	
	public static void main(String[]args) throws IOException{
		int T = 1;
		//T = I();
		while(T-->0) solve();
		pw.flush();
	}
	
	static int I() throws IOException{
		st.nextToken();
		return (int)st.nval;
	}
	
	static String S() throws IOException{
		String s = bf.readLine();
		while(s.equals("""")) s = bf.readLine();
		return s;
	}
	
	static class edge{
		int a;int b;
		int v;
		public edge(int x,int y,int r) {
			a=x;b=y;v=r;
		}
	}
	static long c=0;
	static edge[]e = new edge[100005];
	static Vector<Long>g = new Vector<>();
	
	static boolean check(int mid) {
		long v = 0;
		for(int i=0;i<g.size();i++) {
			if(g.get(i)<=mid) break;
			long cost = (long)(i+1) * g.get(i);
			v += cost;
			if(v>c)return false;
		}
		return true;
	}
	
	static int p[] = new int [maxn];
	static int find(int x) {
		if(p[x] == x) return x;
		return p[x] = find(p[x]);
	}
	
	static void kru() {
		for(int i=1;i<maxn;i++) p[i]=i;
		for(int i=0;i<m;i++) {
			int a = find(e[i].a),b=find(e[i].b),w=e[i].v;
			if(a == b)continue;
			p[a]=b;
			g.add((long)w);
		}
	}
	
	static void solve() throws IOException{
		String s[] = S().split("" "");
		n = Integer.parseInt(s[0]);m = Integer.parseInt(s[1]);
		c = Long.parseLong(s[2]);
		for(int i=0;i<m;i++) {
			int x=I(),y=I(),w=I();
			if(x>y) {
				int t=x;x=y;y=t;
			}
			e[i] = new edge(x,y,w);
		}
		Arrays.sort(e,0,m,(o1,o2)->o1.v-o2.v);
		kru();
		Collections.sort(g,Collections.reverseOrder());
		int l=0,r=(int)1e9;
		ans=r;
		while(l<=r) {
			int mid = (l+r)/2;
			if(check(mid)) {
				ans = Math.min(ans, mid);
				r=mid-1;
			}
			else l=mid+1;
		}
		pw.println(ans);
	}
	
}
"
43,D,Java,61533964,2023-03-25 17:04:22,rookie1号,答案错误,"

import java.util.Arrays;
import java.util.Scanner;

class Edge implements Comparable<Edge>{
    int u;
    int v;
    int weight;
    Edge(int u,int v,int weight){
        this.u=u;
        this.v=v;
        this.weight=weight;
    }
    @Override
    public int compareTo(Edge e) {
        if(weight>e.weight)
            return 1;
        else if(weight<e.weight)
            return -1;
        return 0;
    }
}
 
public class Main {
    static int find(int[] p,int x){
        if(p[x]==x)
            return x;
        else
            return p[x]=find(p,p[x]); //查询父节点
    }
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        while(scanner.hasNext()){
            int n=scanner.nextInt();
            int m=scanner.nextInt();
            long cc=scanner.nextLong();
            long arr[]=new long [100010];int k=0;
            
            Edge[] edges=new Edge[m];
            for(int i=0;i<m;i++){
                int u=scanner.nextInt();
                int v=scanner.nextInt();
                u--;v--;
                int weight=scanner.nextInt();
                edges[i]=new Edge(u,v,weight);
            }
            Arrays.sort(edges);
            int[] p=new int[n];
            for(int i=0;i<n;i++)	//初始化连通分量，每个点自成一个连通分量
                p[i]=i;
            for(int i=0;i<m;i++){
                int x=find(p,edges[i].u);
                int y=find(p,edges[i].v);
                if(x==y){
                    continue;
                }else{
                    p[x]=y;
                    //System.out.println(edges[i].u+"" ""+edges[i].v+"" ""+edges[i].weight);
                    arr[k++]=edges[i].weight;
                }
            }
            int l=0;int r=k-1;
            Arrays.sort(arr,0,k);
            //for(int i=0;i<k;i++)System.out.println(arr[i]);
            long res=0;
            while(l<r){
                int mid=(l+r)/2;
                long a=arr[mid];
                long sum=0;
                long kk=1;
                for(int i=k-1;i>=0;i--){
                    if(arr[i]>a){
                        sum+=kk*arr[i];
                        kk++;
                    }
                    
                }
                //System.out.println(mid+"" ""+a+"" ""+sum);
                if(sum>cc){
                    l=mid+1;
                }
                else{
                    r=mid;
                    res=arr[r];
                }
            }
            System.out.println(res);
        }//while
        
        
        scanner.close();
    }
} 
"
44,D,Java,61534018,2023-03-25 17:05:11,rookie1号,答案错误,"

import java.util.Arrays;
import java.util.Scanner;

class Edge implements Comparable<Edge>{
    int u;
    int v;
    int weight;
    Edge(int u,int v,int weight){
        this.u=u;
        this.v=v;
        this.weight=weight;
    }
    @Override
    public int compareTo(Edge e) {
        if(weight>e.weight)
            return 1;
        else if(weight<e.weight)
            return -1;
        return 0;
    }
}
 
public class Main {
    static int find(int[] p,int x){
        if(p[x]==x)
            return x;
        else
            return p[x]=find(p,p[x]); //查询父节点
    }
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        while(scanner.hasNext()){
            int n=scanner.nextInt();
            int m=scanner.nextInt();
            long cc=scanner.nextLong();
            long arr[]=new long [200010];int k=0;
            
            Edge[] edges=new Edge[m];
            for(int i=0;i<m;i++){
                int u=scanner.nextInt();
                int v=scanner.nextInt();
                u--;v--;
                int weight=scanner.nextInt();
                edges[i]=new Edge(u,v,weight);
            }
            Arrays.sort(edges);
            int[] p=new int[n];
            for(int i=0;i<n;i++)	//初始化连通分量，每个点自成一个连通分量
                p[i]=i;
            for(int i=0;i<m;i++){
                int x=find(p,edges[i].u);
                int y=find(p,edges[i].v);
                if(x==y){
                    continue;
                }else{
                    p[x]=y;
                    //System.out.println(edges[i].u+"" ""+edges[i].v+"" ""+edges[i].weight);
                    arr[k++]=edges[i].weight;
                }
            }
            int l=0;int r=k-1;
            Arrays.sort(arr,0,k);
            //for(int i=0;i<k;i++)System.out.println(arr[i]);
            long res=0;
            while(l<r){
                int mid=(l+r)/2;
                long a=arr[mid];
                long sum=0;
                long kk=1;
                for(int i=k-1;i>=0;i--){
                    if(arr[i]>a){
                        sum+=kk*arr[i];
                        kk++;
                    }
                    
                }
                //System.out.println(mid+"" ""+a+"" ""+sum);
                if(sum>cc){
                    l=mid+1;
                }
                else{
                    r=mid;
                    res=arr[r];
                }
            }
            System.out.println(res);
        }//while
        
        
        scanner.close();
    }
} 
"
45,D,Java,61534238,2023-03-25 17:09:13,rookie1号,答案错误,"

import java.util.Arrays;
import java.util.Scanner;

class Edge implements Comparable<Edge>{
    int u;
    int v;
    int weight;
    Edge(int u,int v,int weight){
        this.u=u;
        this.v=v;
        this.weight=weight;
    }
    @Override
    public int compareTo(Edge e) {
        if(weight>e.weight)
            return 1;
        else if(weight<e.weight)
            return -1;
        return 0;
    }
}
 
public class Main {
    static int find(int[] p,int x){
        if(p[x]==x)
            return x;
        else
            return p[x]=find(p,p[x]); //查询父节点
    }
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        while(scanner.hasNext()){
            int n=scanner.nextInt();
            int m=scanner.nextInt();
            long cc=scanner.nextLong();
            long arr[]=new long [200010];int k=0;
            
            Edge[] edges=new Edge[m];
            for(int i=0;i<m;i++){
                int u=scanner.nextInt();
                int v=scanner.nextInt();
                u--;v--;
                int weight=scanner.nextInt();
                edges[i]=new Edge(u,v,weight);
            }
            Arrays.sort(edges);
            int[] p=new int[n];
            for(int i=0;i<n;i++)	//初始化连通分量，每个点自成一个连通分量
                p[i]=i;
            for(int i=0;i<m;i++){
                int x=find(p,edges[i].u);
                int y=find(p,edges[i].v);
                if(x==y){
                    continue;
                }else{
                    p[x]=y;
                    //System.out.println(edges[i].u+"" ""+edges[i].v+"" ""+edges[i].weight);
                    arr[k++]=edges[i].weight;
                }
            }
            int l=0;int r=k;
            Arrays.sort(arr,0,k);
            //for(int i=0;i<k;i++)System.out.println(arr[i]);
            long res=0;
            while(l<r){
                int mid=(l+r)/2;
                long a=arr[mid];
                long sum=0;
                long kk=1;
                for(int i=k-1;i>=0;i--){
                    if(arr[i]>a){
                        sum+=kk*arr[i];
                        kk++;
                    }
                    
                }
                //System.out.println(mid+"" ""+a+"" ""+sum);
                if(sum>cc){
                    l=mid+1;
                }
                else{
                    r=mid;
                    res=arr[r];
                }
            }
            System.out.println(res);
        }//while
        
        
        scanner.close();
    }
} 
"
46,D,Java,61534437,2023-03-25 17:12:37,rookie1号,答案正确,"

import java.util.Arrays;
import java.util.Scanner;

class Edge implements Comparable<Edge>{
    int u;
    int v;
    int weight;
    Edge(int u,int v,int weight){
        this.u=u;
        this.v=v;
        this.weight=weight;
    }
    @Override
    public int compareTo(Edge e) {
        if(weight>e.weight)
            return 1;
        else if(weight<e.weight)
            return -1;
        return 0;
    }
}
 
public class Main {
    static int find(int[] p,int x){
        if(p[x]==x)
            return x;
        else
            return p[x]=find(p,p[x]); //查询父节点
    }
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        while(scanner.hasNext()){
            int n=scanner.nextInt();
            int m=scanner.nextInt();
            long cc=scanner.nextLong();
            long arr[]=new long [200010];int k=0;
            
            Edge[] edges=new Edge[m];
            for(int i=0;i<m;i++){
                int u=scanner.nextInt();
                int v=scanner.nextInt();
                u--;v--;
                int weight=scanner.nextInt();
                edges[i]=new Edge(u,v,weight);
            }
            Arrays.sort(edges);
            int[] p=new int[n];
            for(int i=0;i<n;i++)	//初始化连通分量，每个点自成一个连通分量
                p[i]=i;
            for(int i=0;i<m;i++){
                int x=find(p,edges[i].u);
                int y=find(p,edges[i].v);
                if(x==y){
                    continue;
                }else{
                    p[x]=y;
                    //System.out.println(edges[i].u+"" ""+edges[i].v+"" ""+edges[i].weight);
                    arr[k++]=edges[i].weight;
                }
            }
            int l=0;int r=k;
            Arrays.sort(arr,0,k);
            //for(int i=0;i<k;i++)System.out.println(arr[i]);
            long res=0;
            while(l<r){
                int mid=(l+r)/2;
                long a=arr[mid];
                long sum=0;
                long kk=1;
                for(int i=k-1;i>=0;i--){
                    if(arr[i]>a){
                        sum+=kk*arr[i];
                        kk++;
                    }
                    
                }
                //System.out.println(mid+"" ""+a+"" ""+sum);
                if(sum>cc){
                    l=mid+1;
                }
                else{
                    r=mid;
                    res=arr[r];
                }
            }
            long sum=0,kk=1;
            for(int i=k-1;i>=0;i--){
                 sum+=kk*arr[i];
                 kk++;
            }
            if(sum<=cc)res=0;
            System.out.println(res);
            
        }//while
    
        
        scanner.close();
    }
} 
"
47,D,Java,61571399,2023-03-26 20:44:34,森姐,执行出错,"import java.util.*;
public class Main {
    static int N = 40010, M = 100010;;
    static int INF = 0x3f3f3f3f;
    static int[] p = new int[N];
    static PII[] g = new PII[M];
    static int n, m, c;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextInt();
        for (int i = 1; i <= n; i++) p[i] = i;
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int w = sc.nextInt();
            g[i] = new PII(a,b,w);
        }
        int t = kruskal();
        System.out.println(t);
    }
    static int find(int x) {
        if (p[x] != x) p[x] = find(p[x]);
        return p[x];
    }
    static int kruskal() {
        Arrays.sort(g,0,m);
        Stack<Integer> q = new Stack<Integer>();
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            int a = g[i].a;
            int b = g[i].b;
            int w = g[i].w;
            a = find(a);
            b = find(b);
            if (a != b) {
                p[a] = b;
                q.push(w);
            }
        }
        int k = 1;
        int num = c;
        while (!q.isEmpty() && num > 0) {
            num -= q.pop() * k;
            k++;
        }
        if (q.isEmpty()) return 0;
        else return q.pop();
    }
}
class PII implements Comparable<PII>{
    int a, b, w;
    public PII(int a, int b, int w) {
        this.a = a;
        this.b = b;
        this.w = w;
    }
    public int compareTo(PII o) {
        return Integer.compare(w, o.w);
    }
}"
48,D,Java,61571495,2023-03-26 20:47:15,森姐,答案错误,"import java.util.*;
public class Main {
    static int N = 40010, M = 100010;;
    static int INF = 0x3f3f3f3f;
    static int[] p = new int[N];
    static PII[] g = new PII[M];
    static int n, m;
    static long c;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();
        for (int i = 1; i <= n; i++) p[i] = i;
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int w = sc.nextInt();
            g[i] = new PII(a,b,w);
        }
        int t = kruskal();
        System.out.println(t);
    }
    static int find(int x) {
        if (p[x] != x) p[x] = find(p[x]);
        return p[x];
    }
    static int kruskal() {
        Arrays.sort(g,0,m);
        Stack<Integer> q = new Stack<Integer>();
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            int a = g[i].a;
            int b = g[i].b;
            int w = g[i].w;
            a = find(a);
            b = find(b);
            if (a != b) {
                p[a] = b;
                q.push(w);
            }
        }
        int k = 1;
        long num = c;
        while (!q.isEmpty() && num > 0) {
            num -= q.pop() * k;
            k++;
        }
        if (q.isEmpty()) return 0;
        else return q.pop();
    }
}
class PII implements Comparable<PII>{
    int a, b, w;
    public PII(int a, int b, int w) {
        this.a = a;
        this.b = b;
        this.w = w;
    }
    public int compareTo(PII o) {
        return Integer.compare(w, o.w);
    }
}"
49,D,Java,61572168,2023-03-26 21:07:14,牛客169937911号,执行出错,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main{

	private static final int N = 100010;
	private static final int M = 200010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		int c = sc.nextInt();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
		int sum = 0;
		int p = 0;
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(sum + k * arr[i] <= c) {
				sum += k * arr[i];
				//System.out.println(sum);
				k++;
			}else {
				//System.out.println(arr[i]);
				p = arr[i];
			}
		}
		System.out.println(p);
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
50,D,Java,61572213,2023-03-26 21:08:32,牛客169937911号,答案错误,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main{

	private static final int N = 100010;
	private static final int M = 200010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
		int sum = 0;
		int p = 0;
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(sum + k * arr[i] <= c) {
				sum += k * arr[i];
				//System.out.println(sum);
				k++;
			}else {
				//System.out.println(arr[i]);
				p = arr[i];
			}
		}
		System.out.println(p);
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
51,D,Java,61572388,2023-03-26 21:14:10,森姐,答案错误,"import java.util.*;
public class Main {
    static int N = 40010, M = 100010;;
    static int INF = 0x3f3f3f3f;
    static int[] p = new int[N];
    static PII[] g = new PII[M];
    static int n, m;
    static long c;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();
        for (int i = 1; i <= n; i++) p[i] = i;
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int w = sc.nextInt();
            g[i] = new PII(a,b,w);
        }
        int t = kruskal();
        System.out.println(t);
    }
    static int find(int x) {
        if (p[x] != x) p[x] = find(p[x]);
        return p[x];
    }
    static int kruskal() {
        Arrays.sort(g,0,m);
        ArrayList<Integer> list = new ArrayList<>();
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            int a = g[i].a;
            int b = g[i].b;
            int w = g[i].w;
            a = find(a);
            b = find(b);
            if (a != b) {
                p[a] = b;
                list.add(w);
            }
        }
        int k = 1;
        long num = c;
        int res = list.size() - 1;
        for (int i = list.size() - 1; i >= 0; i--) {
            int x = list.get(i);
            if (num - k * x >= 0) {
                num -= k * x;
                k++;
                res--;
            }
        }
        if (res < 0) return 0;
        else return list.get(res);
    }
}
class PII implements Comparable<PII>{
    int a, b, w;
    public PII(int a, int b, int w) {
        this.a = a;
        this.b = b;
        this.w = w;
    }
    public int compareTo(PII o) {
        return Integer.compare(w, o.w);
    }
}"
52,D,Java,61572502,2023-03-26 21:17:59,牛客169937911号,答案错误,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 40010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
		long sum = 0;
		int p = 0;
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(sum + (long)k * arr[i] <= c) {
				sum += (long)k * arr[i];
				//System.out.println(sum);
				k++;
			}else {
				//System.out.println(arr[i]);
				p = arr[i];
			}
		}
		System.out.println(p);
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
53,D,Java,61572688,2023-03-26 21:22:48,牛客169937911号,答案错误,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 40010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(c >= k * arr[i]) {
				c -= (long)k * arr[i];
				//System.out.println(sum);
				k++;
			}else {
				System.out.println(arr[i]);
				sc.close();
				return;
			}
		}
		System.out.println(""0"");
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
54,D,Java,61573012,2023-03-26 21:31:16,牛客169937911号,答案错误,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 40010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
        Arrays.sort(arr);
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(c >= k * arr[i]) {
				c -= (long)k * arr[i];
				//System.out.println(sum);
				k++;
			}else {
				System.out.println(arr[i]);
				sc.close();
				return;
			}
		}
		System.out.println(""0"");
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
55,D,Java,61573031,2023-03-26 21:32:28,牛客169937911号,答案错误,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 40010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
        Arrays.sort(arr);
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(c >= k * arr[i]) {
				c -= k * arr[i];
			}else {
				System.out.println(arr[i]);
				sc.close();
				return;
			}
            k++;
		}
		System.out.println(""0"");
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
56,D,Java,61573072,2023-03-26 21:34:03,牛客169937911号,答案错误,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 40010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
        Arrays.sort(arr);
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(c >= k * arr[i]) {
				c -= k * arr[i];
                k++;
			}else {
				System.out.println(arr[i]);
				sc.close();
				return;
			}
		}
		System.out.println(""0"");
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
57,D,Java,61573092,2023-03-26 21:34:52,牛客169937911号,答案错误,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 40010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
        Arrays.sort(arr);
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(c >= k * arr[i]) {
				c -= k * arr[i];
                k++;
			}else {
				System.out.println(arr[i]);
				sc.close();
				return;
			}
		}
		System.out.println(""0"");
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
58,D,Java,61573098,2023-03-26 21:35:30,牛客169937911号,答案正确,"
//旅游
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Main {

	private static final int N = 40010;
	private static int n = 0;
	private static int m = 0;
	private static int[] p = new int[N];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		long c = sc.nextLong();
		Edge[] edgs = new Edge[m];
		for(int i = 0; i < N; i++)
			p[i] = i;
		for(int i = 0; i < m; i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			int w = sc.nextInt();
			edgs[i] = new Edge(u,v,w);
		}
		int[] arr = kruskal(edgs);
        Arrays.sort(arr);
		int k = 1;
		for(int i = arr.length - 1; i >= 0; i--) {
			if(c >= (long)k * arr[i]) {
				c -= (long)k * arr[i];
                k++;
			}else {
				System.out.println(arr[i]);
				sc.close();
				return;
			}
		}
		System.out.println(""0"");
		sc.close();
	}
	public static int[] kruskal(Edge[] edgs) {
		Comparator<Edge> cmp = new Comparator<Edge>() {
			
			@Override
			public int compare(Edge o1,Edge o2) {
				// TODO Auto-generated method stub
				if(o1 != null && o2 != null)
					return o1.w - o2.w;
				else return 0;
			}
		};
		Arrays.sort(edgs,cmp);
		int cnt = 0;
		int[] res = new int[n - 1];
		int k = 0;
		
		for(int i=  0; i < m; i++) {
			Edge temp = edgs[i];
			int u = temp.u;
			int v = temp.v;
			int w = temp.w;
			u = find(u);
			v = find(v);
			if(u != v) {
				p[u] = v;
				res[k++] = w;
				cnt++;
			}
		}
		if(cnt < n - 1) return null;
		return res;
	}
	public static int find(int x) {
		if(p[x] != x) p[x] = find(p[x]);
		return p[x];
	}
}
class Edge{
	int u,v,w;
	public Edge(int u, int v, int w){
		this.u = u;
		this.v = v;
		this.w = w;
	}
	
}"
59,D,Java,61573517,2023-03-26 21:57:35,李雯钦,答案错误,"import java.util.*;
public class Main{
    static int n, m, N = 500010;
    static long c;
    static Edge[] edge = new Edge[N];
    static int[] p = new int[N];
    static int[] g = new int[N];
    static int cnt = 0;
    
    //  并查集模板
    static int find(int x){
        if(x!=p[x]) p[x] = find(p[x]);
        return p[x];
    }
    // Kruskal
    static void Kruskal(){
        Arrays.sort(edge,1,m+1);  //边排序
        
        for(int i =1;i<=m;i++){
            int u = edge[i].u;
            int v = edge[i].v;
            int w = edge[i].w;
            int pa = find(u), pb = find(v);
            if(pa!=pb){
                g[++cnt]= w;
                p[pa] = pb; 
            }
        }
    }
    //check
    static boolean Check(int mid) {
    	int res = 0;
    	for(int i =cnt,j=0;i>=1;--i) {
    		if(g[i]<=mid) break;
    		res+=(++j)*g[i];
    	}
    	return res<=c;
    }

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        c = in.nextLong();
        
        for(int i = 1;i<=n;i++) p[i] = i;

        for(int i =1;i<=m;i++){
            int a = in.nextInt(), b = in.nextInt(), x = in.nextInt();
            edge[i] = new Edge(a,b,x);
        }

        Kruskal();
            
        int l = -1, r =(int) 2e9;
        while(l+1!=r) {
        	int mid = l+r>>1;
        	if(Check(mid)) r = mid;
        	else l = mid;
        }
        System.out.println(r);
        
    }
}

class Edge implements Comparable<Edge>{
    int u, v ,w;
    public Edge(int u, int v, int w){
        this.u = u;
        this.v = v;
        this.w = w;
    }

    @Override
    public int compareTo(Edge o) {
        return Integer.compare(w, o.w);
    }
}"
60,D,Java,61573534,2023-03-26 21:58:07,李雯钦,答案错误,"import java.util.*;
public class Main{
    static int n, m, N = 100010;
    static long c;
    static Edge[] edge = new Edge[N];
    static int[] p = new int[N];
    static int[] g = new int[N];
    static int cnt = 0;
    
    //  并查集模板
    static int find(int x){
        if(x!=p[x]) p[x] = find(p[x]);
        return p[x];
    }
    // Kruskal
    static void Kruskal(){
        Arrays.sort(edge,1,m+1);  //边排序
        
        for(int i =1;i<=m;i++){
            int u = edge[i].u;
            int v = edge[i].v;
            int w = edge[i].w;
            int pa = find(u), pb = find(v);
            if(pa!=pb){
                g[++cnt]= w;
                p[pa] = pb; 
            }
        }
    }
    //check
    static boolean Check(int mid) {
    	int res = 0;
    	for(int i =cnt,j=0;i>=1;--i) {
    		if(g[i]<=mid) break;
    		res+=(++j)*g[i];
    	}
    	return res<=c;
    }

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        c = in.nextLong();
        
        for(int i = 1;i<=n;i++) p[i] = i;

        for(int i =1;i<=m;i++){
            int a = in.nextInt(), b = in.nextInt(), x = in.nextInt();
            edge[i] = new Edge(a,b,x);
        }

        Kruskal();
            
        int l = -1, r =(int) 2e9;
        while(l+1!=r) {
        	int mid = l+r>>1;
        	if(Check(mid)) r = mid;
        	else l = mid;
        }
        System.out.println(r);
        
    }
}

class Edge implements Comparable<Edge>{
    int u, v ,w;
    public Edge(int u, int v, int w){
        this.u = u;
        this.v = v;
        this.w = w;
    }

    @Override
    public int compareTo(Edge o) {
        return Integer.compare(w, o.w);
    }
}"
61,D,Java,61573787,2023-03-26 22:12:17,李雯钦,答案正确,"import java.util.*;
public class Main{
    static int n, m;
    static int N = 100010;
    static long c;
    static Edge[] edge = new Edge[N];
    static int[] p = new int[N];
    static long[] g= new long[N];
    static int cnt = 0;
    
    //  并查集模板
    static int find(int x){
        if(x!=p[x]) p[x] = find(p[x]);
        return p[x];
    }
    // Kruskal
    static void Kruskal(){
        Arrays.sort(edge,1,m+1);  //边排序
        
        for(int i =1;i<=m;i++){
            int u = edge[i].u;
            int v = edge[i].v;
            int w = edge[i].w;
            int pa = find(u), pb = find(v);
            if(pa!=pb){
                g[++cnt]= w;
                p[pa] = pb; 
            }
        }
    }
    //check
    static boolean Check(long mid) {
    	long res = 0;
    	for(int i =cnt,j=0;i>=1;--i) {
    		if(g[i]<=mid) break;
    		res+=(long)(++j)*g[i];
    	}
    	return res<=c;
    }

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        c = in.nextLong();
        
        for(int i = 1;i<=n;i++) p[i] = i;

        for(int i =1;i<=m;i++){
            int a = in.nextInt(), b = in.nextInt(), x = in.nextInt();
            edge[i] = new Edge(a,b,x);
        }

        Kruskal();
            
        long l = -1, r =(long) 2e9;
        while(l+1!=r) {
        	long mid = l+r>>1;
        	if(Check(mid)) r = mid;
        	else l = mid;
        }
        System.out.println(r);
        
    }
}

class Edge implements Comparable<Edge>{
    int u, v ,w;
    public Edge(int u, int v, int w){
        this.u = u;
        this.v = v;
        this.w = w;
    }

    @Override
    public int compareTo(Edge o) {
        return Integer.compare(w, o.w);
    }
}"
62,D,Java,61573837,2023-03-26 22:15:47,李雯钦,答案错误,"import java.util.*;
public class Main{
    static int n, m;
    static int N = 100010;
    static long c;
    static Edge[] edge = new Edge[N];
    static int[] p = new int[N];
    static long[] g= new long[N];
    static int cnt = 0;
    
    //  并查集模板
    static int find(int x){
        if(x!=p[x]) p[x] = find(p[x]);
        return p[x];
    }
    // Kruskal
    static void Kruskal(){
        Arrays.sort(edge,1,m+1);  //边排序
        
        for(int i =1;i<=m;i++){
            int u = edge[i].u;
            int v = edge[i].v;
            int w = edge[i].w;
            int pa = find(u), pb = find(v);
            if(pa!=pb){
                g[++cnt]= w;
                p[pa] = pb; 
            }
        }
    }
    //check
    static boolean Check(long mid) {
    	long res = 0;
    	for(int i =cnt,j=0;i>=1;--i) {
    		if(g[i]<=mid) break;
    		res+=(long)(++j)*g[i];
    	}
    	return res<=c;
    }

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        c = in.nextLong();
        
        for(int i = 1;i<=n;i++) p[i] = i;

        for(int i =1;i<=m;i++){
            int a = in.nextInt(), b = in.nextInt(), x = in.nextInt();
            edge[i] = new Edge(a,b,x);
        }

        Kruskal();
            
        long l = -1, r =(long) 2e9;
        while(l<r) {
        	long mid = l+r>>1;
        	if(Check(mid)) r = mid;
        	else l = mid+1;
        }
        System.out.println(r);
        
    }
}

class Edge implements Comparable<Edge>{
    int u, v ,w;
    public Edge(int u, int v, int w){
        this.u = u;
        this.v = v;
        this.w = w;
    }

    @Override
    public int compareTo(Edge o) {
        return Integer.compare(w, o.w);
    }
}"
63,D,Java,61573841,2023-03-26 22:16:09,李雯钦,答案正确,"import java.util.*;
public class Main{
    static int n, m;
    static int N = 100010;
    static long c;
    static Edge[] edge = new Edge[N];
    static int[] p = new int[N];
    static long[] g= new long[N];
    static int cnt = 0;
    
    //  并查集模板
    static int find(int x){
        if(x!=p[x]) p[x] = find(p[x]);
        return p[x];
    }
    // Kruskal
    static void Kruskal(){
        Arrays.sort(edge,1,m+1);  //边排序
        
        for(int i =1;i<=m;i++){
            int u = edge[i].u;
            int v = edge[i].v;
            int w = edge[i].w;
            int pa = find(u), pb = find(v);
            if(pa!=pb){
                g[++cnt]= w;
                p[pa] = pb; 
            }
        }
    }
    //check
    static boolean Check(long mid) {
    	long res = 0;
    	for(int i =cnt,j=0;i>=1;--i) {
    		if(g[i]<=mid) break;
    		res+=(long)(++j)*g[i];
    	}
    	return res<=c;
    }

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        c = in.nextLong();
        
        for(int i = 1;i<=n;i++) p[i] = i;

        for(int i =1;i<=m;i++){
            int a = in.nextInt(), b = in.nextInt(), x = in.nextInt();
            edge[i] = new Edge(a,b,x);
        }

        Kruskal();
            
        long l = 0, r =(long) 2e9;
        while(l<r) {
        	long mid = l+r>>1;
        	if(Check(mid)) r = mid;
        	else l = mid+1;
        }
        System.out.println(r);
        
    }
}

class Edge implements Comparable<Edge>{
    int u, v ,w;
    public Edge(int u, int v, int w){
        this.u = u;
        this.v = v;
        this.w = w;
    }

    @Override
    public int compareTo(Edge o) {
        return Integer.compare(w, o.w);
    }
}"
64,D,Java,61587990,2023-03-28 10:28:09,人工智能3211江海洋,答案错误,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
//        out.flush();
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
            // prim
            int n = in.nextInt();
            int m = in.nextInt();
            long c = in.nextLong();
            int[][] edge = new int[n+1][n+1];
            int[] dis = new int[n+1];
            int[] book = new int[n+1];
            int cnt = 0;
            long sum = 0;
            // 初始化邻接表
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if(i==j)
                        edge[i][j] = 0;
                    else
                        edge[i][j] = Integer.MAX_VALUE;
                }
            }
            // 存两点的权重

            for (int i = 0; i < m; i++) {
                int u = in.nextInt();
                int v = in.nextInt();
                int w = in.nextInt();
                edge[u][v] = edge[v][u] = w;
            }
            // 每个点到1号点的距离
            for (int i = 1; i <= n; i++) {
                dis[i] = edge[1][i];
            }
            book[1]=1;
            cnt++;
            int id = 0;
            long[] v = new long[n-1];
            int cc = 0;
            while (cnt<n){
                int min = Integer.MAX_VALUE;
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]<min){
                        min = dis[i];id=i;
                    }
                }
                book[id]=1;cnt++;sum+=dis[id];v[cc++]=dis[id];
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]>edge[id][i]){
                        dis[i] = edge[id][i];//更新不在树中的点到树的距离
                    }
                }
            }
            Arrays.sort(v);
            long ans = 0;
            long p = 0;
//            for (int i = 0; i < cc; i++) {
//                System.out.print(v[i]+"" "");
//            }
            for (int i = n-2; i >= 0; i--) {
                long t = ans+(n-1-i)*v[i];
//                System.out.println(t);
                p=v[i];
                if(t<=c){
                    
                    ans=t;
                }
                else {
                    break;
                }
            }
            System.out.println(p);


        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e) {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }

    }
}
"
65,D,Java,61588014,2023-03-28 10:31:36,人工智能3211江海洋,答案错误,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
//        out.flush();
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
            // prim
            int n = in.nextInt();
            int m = in.nextInt();
            long c = in.nextLong();
            int[][] edge = new int[n+1][n+1];
            int[] dis = new int[n+1];
            int[] book = new int[n+1];
            int cnt = 0;
            long sum = 0;
            // 初始化邻接表
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if(i==j)
                        edge[i][j] = 0;
                    else
                        edge[i][j] = Integer.MAX_VALUE;
                }
            }
            // 存两点的权重
            for (int i = 0; i < m; i++) {
                int u = in.nextInt();
                int v = in.nextInt();
                int w = in.nextInt();
                edge[u][v] = edge[v][u] = w;
            }
            // 每个点到1号点的距离
            for (int i = 1; i <= n; i++) {
                dis[i] = edge[1][i];
            }
            book[1]=1;
            cnt++;
            int id = 0;
            long[] v = new long[n-1];
            int cc = 0;
            while (cnt<n){
                int min = Integer.MAX_VALUE;
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]<min){
                        min = dis[i];id=i;
                    }
                }
                book[id]=1;cnt++;sum+=dis[id];v[cc++]=dis[id];
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]>edge[id][i]){
                        dis[i] = edge[id][i];//更新不在树中的点到树的距离
                    }
                }
            }
//            System.out.println(sum);
            Arrays.sort(v);
            long ans = 0;
            long p = 0;
//            for (int i = 0; i < cc; i++) {
//                System.out.print(v[i]+"" "");
//            }
            for (int i = n-2; i >= 0; i--) {
                long t = ans+(n-1-i)*v[i];
//                System.out.println(t);
                p=v[i];
                if(t<=c){
                    ans=t;
                }
                else {
                    break;
                }
            }
            
            if(ans<=c)
                p=0;
            System.out.println(p);


        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e) {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }

    }
}
"
66,D,Java,61588032,2023-03-28 10:33:05,人工智能3211江海洋,答案错误,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
//        out.flush();
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
            // prim
            int n = in.nextInt();
            int m = in.nextInt();
            long c = in.nextLong();
            int[][] edge = new int[n+1][n+1];
            int[] dis = new int[n+1];
            int[] book = new int[n+1];
            int cnt = 0;
            long sum = 0;
            // 初始化邻接表
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if(i==j)
                        edge[i][j] = 0;
                    else
                        edge[i][j] = Integer.MAX_VALUE;
                }
            }
            // 存两点的权重
            for (int i = 0; i < m; i++) {
                int u = in.nextInt();
                int v = in.nextInt();
                int w = in.nextInt();
                edge[u][v] = edge[v][u] = w;
            }
            // 每个点到1号点的距离
            for (int i = 1; i <= n; i++) {
                dis[i] = edge[1][i];
            }
            book[1]=1;
            cnt++;
            int id = 0;
            long[] v = new long[n-1];
            int cc = 0;
            while (cnt<n){
                int min = Integer.MAX_VALUE;
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]<min){
                        min = dis[i];id=i;
                    }
                }
                book[id]=1;cnt++;sum+=dis[id];v[cc++]=dis[id];
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]>edge[id][i]){
                        dis[i] = edge[id][i];//更新不在树中的点到树的距离
                    }
                }
            }
            Arrays.sort(v);
            long ans = 0;
            long p = 0;
//            for (int i = 0; i < cc; i++) {
//                System.out.print(v[i]+"" "");
//            }
            for (int i = n-2; i >= 0; i--) {
                long t = ans+(n-1-i)*v[i];
//                System.out.println(t);
                p=v[i];
                if(t<=c){
                    ans=t;
                }
                else {
                    ans=c+1;
                    break;
                }
            }

            if(ans<=c)
                p=0;
            System.out.println(p);


        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e) {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }

    }
}
"
67,D,Java,61588234,2023-03-28 11:04:18,人工智能3211江海洋,答案错误,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
//        out.flush();
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
            // prim
            int n = in.nextInt();
            int m = in.nextInt();
            long c = in.nextLong();
            int[][] edge = new int[n+1][n+1];
            int[] dis = new int[n+1];
            int[] book = new int[n+1];
            int cnt = 0;
            long sum = 0;
            // 初始化邻接表
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if(i==j)
                        edge[i][j] = 0;
                    else
                        edge[i][j] = Integer.MAX_VALUE;
                }
            }
            // 存两点的权重
            for (int i = 0; i < m; i++) {
                int u = in.nextInt();
                int v = in.nextInt();
                int w = in.nextInt();
                edge[u][v] = edge[v][u] = w;
            }
            // 每个点到1号点的距离
            for (int i = 1; i <= n; i++) {
                dis[i] = edge[1][i];
            }
            book[1]=1;
            cnt++;
            long[] v = new long[n-1];
            int cc = 0;
            while (cnt<n){
                int min = Integer.MAX_VALUE, id = -1;
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]<min){
                        min = dis[i];id=i;
                    }
                }
                book[id]=1;cnt++;sum+=dis[id];v[cc++]=dis[id];
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]>edge[id][i]){
                        dis[i] = edge[id][i];//更新不在树中的点到树的距离
                    }
                }
            }
            Arrays.sort(v);
            long p = 0;
            long ans = 0;
            long k = 1;
            for (int i = n-2; i >= 0; i--) {
                long t = k*v[i];
                if(ans+t<=c)
                    ans+=t;
                else{
                    p = v[i];break;
                }
                k++;
            }
            System.out.println(p);



        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e) {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }

    }
}
"
68,D,Java,61588259,2023-03-28 11:07:11,人工智能3211江海洋,答案错误,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
//        out.flush();
        out.close();
    }

    static class TaskA {

        public void solve(int testNumber, InputReader in, PrintWriter out) {
            // prim
            int n = in.nextInt();
            int m = in.nextInt();
            long c = in.nextLong();
            long[][] edge = new long[n+1][n+1];
            long[] dis = new long[n+1];
            int[] book = new int[n+1];
            int cnt = 0;
            long sum = 0;
            // 初始化邻接表
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if(i==j)
                        edge[i][j] = 0;
                    else
                        edge[i][j] = Long.MAX_VALUE;
                }
            }
            // 存两点的权重
            for (int i = 0; i < m; i++) {
                int u = in.nextInt();
                int v = in.nextInt();
                long w = in.nextLong();
                edge[u][v] = edge[v][u] = w;
            }
            // 每个点到1号点的距离
            for (int i = 1; i <= n; i++) {
                dis[i] = edge[1][i];
            }
            book[1]=1;
            cnt++;
            long[] v = new long[n-1];
            int cc = 0;
            while (cnt<n){
                long min = Long.MAX_VALUE;int id = -1;
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]<min){
                        min = dis[i];id=i;
                    }
                }
                book[id]=1;cnt++;sum+=dis[id];v[cc++]=dis[id];
                for (int i = 1; i <= n; i++) {
                    if(book[i]==0&&dis[i]>edge[id][i]){
                        dis[i] = edge[id][i];//更新不在树中的点到树的距离
                    }
                }
            }
            Arrays.sort(v);
            long p = 0;
            long ans = 0;
            long k = 1;
            for (int i = n-2; i >= 0; i--) {
                long t = k*v[i];
                if(ans+t<=c)
                    ans+=t;
                else{
                    p = v[i];break;
                }
                k++;
            }
            System.out.println(p);



        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e) {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }

    }
}
"
69,D,Java,61589942,2023-03-28 14:41:14,一只往上爬的蚂蚁,答案正确,"import java.io.*;
import java.util.*;
public class Main{
    static class Union {
            int[] fa; //fa中的数据表示能够互相连通下标表示起点，value表示终点...并且起点-终点（起点）-终点（起点）...，
                     // 如fa[0]=1;fa[1]=2表示0-1-2（0,1,2三个城市互相连通）

            //初始化数组fa
            public Union(int n) {
                fa = new int[n];
                for(int i = 0;i < n;i++) {
                    fa[i] = i;
                }
            }
            //寻找通路
            public int find(int x) {
                if(fa[x] != x) {
                    fa[x] = find(fa[x]);
                }
                return fa[x];
            }
            //合并通路，fa[pv] = pw;表示pv-pw（pv能到pw，pw能到pv）
            public boolean merge(int v, int w) {
                int pv = find(v);
                int pw = find(w);
                if(pv == pw) {
                    return false;
                }
                fa[pv] = pw;
                return true;
            }
    }
        public static void main(String[] args) throws IOException{
            StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
            in.nextToken();
            int n = (int) in.nval;
            in.nextToken();
            int m = (int) in.nval;
            in.nextToken();
            long c = (long) in.nval;
            int[][] edge = new int[m][3];
            for(int i = 0;i < m;i++) {
                for(int j = 0;j < 3;j++) {
                    in.nextToken();
                    edge[i][j] = (int) in.nval;
                }
                edge[i][0]--;
                edge[i][1]--;
            }
            Arrays.sort(edge, new Comparator<int[]>() {
                @Override
                public int compare(int[] o1, int[] o2) {
                    if(o1[2] < o2[2]) {
                        return -1;
                    }
                    return 1;
                }
            });
            Union un=new Union(n);
            List<Integer> l=new ArrayList<Integer>();
            for(int i=0;i<m;i++) {
                if(un.merge(edge[i][0], edge[i][1])) {
                    l.add(edge[i][2]);
                }
            }
            long tmp=0;
            for(int i=l.size()-1,j=1;i>=0;i--,j++) {
                tmp+=(long)j*l.get(i);
                if(tmp>c) {
                    System.out.println(l.get(i));
                    return;
                }
            }
            System.out.println(0);
        }
}"
70,D,Java,61614943,2023-03-30 09:49:17,人工智能3211江海洋,执行出错,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
//        out.flush();
        out.close();
    }

    static class TaskA {
        int N = 100000;
        int n,m,cnt=0;
        long c;
        int[] p = new int[N];
        long[] g = new long[N];
        Node[] nn = new Node[N];
        int find(int x) {return x==p[x]?x:(p[x]=find(p[x]));}
        void kruskal(){
            Arrays.sort(nn,1,m+1);

            for (int i = 1; i <= m; i++) {
                int u = nn[i].u;
                int v = nn[i].v;
                int w = nn[i].w;
                int fu = find(u),fv = find(v);
                if(fu!=fv){
                    g[++cnt]=w;
                    p[fu]=fv;
                }
            }
        }
        class Node implements Comparable<Node>{
            int u, v, w;
            @Override
            public int compareTo(Node o) {
                return Integer.compare(w,o.w);
            }
        }
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            for(int i=0;i<N;i++)
                nn[i] = new Node();
            n = in.nextInt();
            m = in.nextInt();
            c = in.nextLong();
            for (int i = 0; i < N; i++) {
                p[i]=i;//并查集初始化
            }
            for (int i = 1; i <= m; i++) {
                nn[i].u= in.nextInt();
                nn[i].v= in.nextInt();
                nn[i].w= in.nextInt();
            }
            kruskal();
            long sum = 0;
            long res = 0;
            for (int i = cnt; i >=1 ; i--) {
                long t = (cnt-i+1)*g[i];
                if(sum+t>c){
                    res = g[i];
                    break;
                }
                sum+=t;
            }
            System.out.println(res);

        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e) {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }

    }
}
"
71,D,Java,61614945,2023-03-30 09:49:51,人工智能3211江海洋,答案正确,"import java.io.*;
import java.util.*;
import java.math.*;

public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
//        out.flush();
        out.close();
    }

    static class TaskA {
        int N = 100005;
        int n,m,cnt=0;
        long c;
        int[] p = new int[N];
        long[] g = new long[N];
        Node[] nn = new Node[N];
        int find(int x) {return x==p[x]?x:(p[x]=find(p[x]));}
        void kruskal(){
            Arrays.sort(nn,1,m+1);

            for (int i = 1; i <= m; i++) {
                int u = nn[i].u;
                int v = nn[i].v;
                int w = nn[i].w;
                int fu = find(u),fv = find(v);
                if(fu!=fv){
                    g[++cnt]=w;
                    p[fu]=fv;
                }
            }
        }
        class Node implements Comparable<Node>{
            int u, v, w;
            @Override
            public int compareTo(Node o) {
                return Integer.compare(w,o.w);
            }
        }
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            for(int i=0;i<N;i++)
                nn[i] = new Node();
            n = in.nextInt();
            m = in.nextInt();
            c = in.nextLong();
            for (int i = 0; i < N; i++) {
                p[i]=i;//并查集初始化
            }
            for (int i = 1; i <= m; i++) {
                nn[i].u= in.nextInt();
                nn[i].v= in.nextInt();
                nn[i].w= in.nextInt();
            }
            kruskal();
            long sum = 0;
            long res = 0;
            for (int i = cnt; i >=1 ; i--) {
                long t = (cnt-i+1)*g[i];
                if(sum+t>c){
                    res = g[i];
                    break;
                }
                sum+=t;
            }
            System.out.println(res);

        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        boolean hasNext() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (Exception e) {
                    return false;
                    // TODO: handle exception
                }
            }
            return true;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public String nextLine() {
            String str = null;
            try {
                str = reader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }

    }
}
"
72,D,Java,61621892,2023-03-30 20:48:24,陈力明,答案错误,"


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.invoke.MethodHandles;
import java.util.*;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
 
public class Main{
 
private static final boolean String = false;
static int []f;
//static int []f2;
static int []size;
//static int []size2;
//static int []a=new int [500001];
static int max=Integer.MAX_VALUE;

static Set<Integer>set;
static int k;
static long mod= 998244353;
static int res=0;
static int n,m;
static int x1,y1;
 static List<Integer>[]ans;
 static char [][]c;

 private static int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};
	public static void main(String []args) {
		MyScanner s=new MyScanner();
		PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		int n=s.nextInt();
		int m=s.nextInt();
		long c=s.nextLong();
		int []f=new int [n+1];
		int []size=new int [n+1];
		for(int i=1;i<=n;i++)
		{
			f[i]=i;
			size[i]=1;
			
			
		}
	List<int []>list=new ArrayList<>();
		for(int i=0;i<m;i++)
		{
			int x=s.nextInt();
			int y=s.nextInt();
		int d=s.nextInt();
			list.add(new int [] {x,y,d});
			
		}
		Collections.sort(list,(o1,o2)->o1[2]-o2[2]);
		long l=0,r=(long)1e9;
		while(l<r)
		{
			for(int i=1;i<=n;i++)
			{
				f[i]=i;
				size[i]=1;
				
				
			}
			long mid=l+r+1>>1;
			if(is(mid,size,f,list,c))r=mid-1;
			else l=mid;
		}
		out.println(l);
		
		
			
		
		
	
	

	out.close();
	}
	public static boolean is(long mid,int []size, int []f,List<int []>list,long c)
	{
		long k=1;
		for(int []x:list)
		{
			if(x[2]<=mid)
			{
				union(f,x[0],x[1],size);
			}
			else
			{
				
				if(c-k*x[2]>=0&&find(f,x[0])!=find(f,x[1]))
				{
					union(f,x[0],x[1],size);
					c-=k*x[2];
					k++;
					
				}
				//else break;
				
			}
		}
		Set<Integer>set=new HashSet<>();
		for(int i=1;i<f.length;i++)
			set.add(find(f,i));
return 		set.size()==1;
	}

	public static boolean is(char []c)
	{
		int l=0;
		int r=c.length-1;
		while(l<r)
		{
			if(c[l]!=c[r])return false;
			l++;r--;
		}
		return true;
	}
	public static void swap (int l,int r,int []f)
	{
		if(l>=f.length||r>=f.length)return;
		int tt=f[l];
		f[l]=f[r];
		f[r]=tt;
		
	}
	
public static void reverse(int []a)
{
	int l=0,r=a.length-1;
	while(l<r)
	{
		int t=a[l];
		a[l]=a[r];
		a[r]=t;
		l++;r--;
	}
}
	public static long sum (int x,long mod)
	{
		
	long sum=1;
		for(int i = 2; i * i <= x; ++i){
			long temp = 1;
			if(x % i == 0){
				long j = i;
				while(x % i == 0){
					temp += j;
					j *= i;
					x /= i;
				}
				sum = (sum * temp) % mod;
			}

	
	}
		if(x > 1) sum = (sum * (1 + x)) % mod;
		return sum;
	}
	  public  static long Mode(long a,  long b, long mode)
	  {
	  	 long sum = 1;
	  	a = a % mode;
	   
	  	while (b > 0) {
	  		if (b % 2 == 1)		//判断是否是奇数，是奇数的话将多出来的数事先乘如sum
	  			sum = (sum * a) % mode;
	   
	  		b /= 2;
	  		a = (a * a) % mode;// 不断的两两合并再取模，减小a和b的规模
	  	}
	  	return sum;
	  }
	public static long is(int mid,long []f,int d)
	{
		long ans=0;
		for(int i=0;i<d;i++)
		{
			
			int   k=i%mid;
			if(k>f.length-1)continue;
			ans+=f[f.length-k-1];
		}
		return ans;
	}
	
	public static boolean is(String a,String b)
	{
		for(int i=0;i<=b.length()-a.length();i++)
		{
			if(b.substring(i,i+a.length()).equals(a))
				return true;
		}
		return false;
		
	}
	
	
	  public static boolean is(int  n) {
		    if (n <= 3) {
		        return n > 1;
		    }
		    // 只有6x-1和6x+1的数才有可能是质数
		    if (n % 6 != 1 && n % 6 != 5) {
		        return false;
		    }
		    // 判断这些数能否被小于sqrt(n)的奇数整除
		    int sqrt = (int) Math.sqrt(n);
		    for (int i = 5; i <= sqrt; i += 6) {
		        if (n % i == 0 || n % (i + 2) == 0) {
		            return false;
		        }
		    }
		    return true;
		}



public static int find (int []father,int x) {
		if(x!=father[x])
			x=find(father,father[x]);
		return father[x];
	}
public static void union(int []father,int x,int y,int []size) {
	x=find(father,x);
	y=find(father,y);
	if(x==y)
		return ;
	if(size[x]<size[y]) {
		 int tem=x;
         x=y;
         y=tem;
	}
	father[y]=x;
	size[x]+=size[y];
return ;
}
		
					
public static void shufu(int []f) {
		for(int i=0;i<f.length;i++) {
			int k=(int)(Math.random()*(f.length));
			int t=f[k];
			
			f[k]=f[0];
			f[0]=t;
			
		}
	}
public static void shufu1(long []f) {
	for(int i=0;i<f.length;i++) {
		int k=(int)(Math.random()*(f.length));
		long t=f[k];
		f[k]=f[0];
		f[0]=t;
	}
}
public  static int  gcd(int x,int y) {
		return y==0?x:gcd(y,x%y);
	}
 
 
public  static int  lcm(int x,int y) {
		
		return x*y/gcd(x,y);
}
		
	
	
		
		
	
	
		
	
/*					
public static void buildertree(int k,int l,int r) {
		if(l==r)
		{
			f[k]=a[l];
			return ;
		}
		int m=l+r>>1;
		buildertree(k+k,l,m);
		buildertree(k+k+1,m+1,r);
		f[k]=	
	
	}
public static	void update(int u,int l,int r,int x,int c)
{
    if(l==x && r==x)
    {
        f[u]=c;
        return;
    }
    int mid=l+r>>1;
    if(x<=mid)update(u<<1,l,mid,x,c);
    else if(x>=mid+1)update(u<<1|1,mid+1,r,x,c);
   	f[u]=Math.max(f[u+u], f[u+u+1]);
}
	
public static int query(int k,int l,int r,int x,int y) {
		if(x==l&&y==r) {
			return f[k];
		}
		int m=l+r>>1;
		if(y<=m) {
			return query(k+k,l,m,x,y);
		}
		else if(x>m)return query(k+k+1,m+1,r,x,y);
		else  {
			int i=query(k+k,l,m,x,m),j=query(k+k+1,m+1,r,m+1,y);
		return Math.max(j, Math.max(i+j, i));
		
		}
	}
	
public static void calc(int k,int l,int r,int x,int z) {
 
			f[k]+=z;
			if(l==r) {
				return ;
			}
			int m=l+r>>1;
    		if(x<=m)
    			calc(k+k,l,m,x,z);
    		else calc(k+k+1,m+1,r,x,z);
			
			
		}
	
				
			
 
		*/
		
				
	
			
	
			
	
 
	public static class MyScanner {
	    BufferedReader br;
	    StringTokenizer st;
	 
	    public MyScanner() {
	      try {
	        final String USERDIR = System.getProperty(""user.dir"");
	        String cname = MethodHandles.lookup().lookupClass().getCanonicalName().replace("".MyScanner"", """");
	        cname = cname.lastIndexOf('.') > 0 ? cname.substring(cname.lastIndexOf('.') + 1) : cname;
	        final File fin = new File(USERDIR + ""/io/c"" + cname.substring(1,5) + ""/"" + cname + "".in"");
	        br = new BufferedReader(new InputStreamReader(fin.exists()
	            ? new FileInputStream(fin) : System.in));
	      } catch (Exception e) {
	        br = new BufferedReader(new InputStreamReader(System.in));
	      }
	    }
	 
	    public String next() {
	      try {
	        while (st == null || !st.hasMoreElements()) {
	          st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	      } catch (Exception e) {
	        throw new RuntimeException(e);
	      }
	    }
	 
	    public int nextInt() {
	      return Integer.parseInt(next());
	    }
	 
	    public long nextLong() {
	      return Long.parseLong(next());
	    }
	  }
	
		}"
73,D,Java,61621953,2023-03-30 20:51:08,陈力明,答案错误,"


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.lang.invoke.MethodHandles;
import java.util.*;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
 
public class Main{
 
private static final boolean String = false;
static int []f;
//static int []f2;
static int []size;
//static int []size2;
//static int []a=new int [500001];
static int max=Integer.MAX_VALUE;

static Set<Integer>set;
static int k;
static long mod= 998244353;
static int res=0;
static int n,m;
static int x1,y1;
 static List<Integer>[]ans;
 static char [][]c;

 private static int[] dx = {-1, 0, 1, 0}, dy = {0, 1, 0, -1};
	public static void main(String []args) {
		MyScanner s=new MyScanner();
		PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		int n=s.nextInt();
		int m=s.nextInt();
		long c=s.nextLong();
		int []f=new int [n+1];
		int []size=new int [n+1];
		for(int i=1;i<=n;i++)
		{
			f[i]=i;
			size[i]=1;
			
			
		}
	List<int []>list=new ArrayList<>();
		for(int i=0;i<m;i++)
		{
			int x=s.nextInt();
			int y=s.nextInt();
		int d=s.nextInt();
			list.add(new int [] {x,y,d});
			
		}
		Collections.sort(list,(o1,o2)->o2[2]-o1[2]);
		
		long l=0,r=(long)1e9;
		while(l<r)
		{
			for(int i=1;i<=n;i++)
			{
				f[i]=i;
				size[i]=1;
				
				
			}
			long mid=l+r+1>>1;
			if(is(mid,size,f,list,c))r=mid-1;
			else l=mid;
		}
		out.println(l);
		
		
			
		
		
	
	

	out.close();
	}
	public static boolean is(long mid,int []size, int []f,List<int []>list,long c)
	{
		long k=1;
		for(int []x:list)
		{
			if(x[2]<=mid)
			{
				union(f,x[0],x[1],size);
			}
			else
			{
				
				if(c-k*x[2]>=0&&find(f,x[0])!=find(f,x[1]))
				{
					union(f,x[0],x[1],size);
					c-=k*x[2];
					k++;
					
				}
				//else break;
				
			}
		}
		Set<Integer>set=new HashSet<>();
		for(int i=1;i<f.length;i++)
			set.add(find(f,i));
return 		set.size()==1;
	}

	public static boolean is(char []c)
	{
		int l=0;
		int r=c.length-1;
		while(l<r)
		{
			if(c[l]!=c[r])return false;
			l++;r--;
		}
		return true;
	}
	public static void swap (int l,int r,int []f)
	{
		if(l>=f.length||r>=f.length)return;
		int tt=f[l];
		f[l]=f[r];
		f[r]=tt;
		
	}
	
public static void reverse(int []a)
{
	int l=0,r=a.length-1;
	while(l<r)
	{
		int t=a[l];
		a[l]=a[r];
		a[r]=t;
		l++;r--;
	}
}
	public static long sum (int x,long mod)
	{
		
	long sum=1;
		for(int i = 2; i * i <= x; ++i){
			long temp = 1;
			if(x % i == 0){
				long j = i;
				while(x % i == 0){
					temp += j;
					j *= i;
					x /= i;
				}
				sum = (sum * temp) % mod;
			}

	
	}
		if(x > 1) sum = (sum * (1 + x)) % mod;
		return sum;
	}
	  public  static long Mode(long a,  long b, long mode)
	  {
	  	 long sum = 1;
	  	a = a % mode;
	   
	  	while (b > 0) {
	  		if (b % 2 == 1)		//判断是否是奇数，是奇数的话将多出来的数事先乘如sum
	  			sum = (sum * a) % mode;
	   
	  		b /= 2;
	  		a = (a * a) % mode;// 不断的两两合并再取模，减小a和b的规模
	  	}
	  	return sum;
	  }
	public static long is(int mid,long []f,int d)
	{
		long ans=0;
		for(int i=0;i<d;i++)
		{
			
			int   k=i%mid;
			if(k>f.length-1)continue;
			ans+=f[f.length-k-1];
		}
		return ans;
	}
	
	public static boolean is(String a,String b)
	{
		for(int i=0;i<=b.length()-a.length();i++)
		{
			if(b.substring(i,i+a.length()).equals(a))
				return true;
		}
		return false;
		
	}
	
	
	  public static boolean is(int  n) {
		    if (n <= 3) {
		        return n > 1;
		    }
		    // 只有6x-1和6x+1的数才有可能是质数
		    if (n % 6 != 1 && n % 6 != 5) {
		        return false;
		    }
		    // 判断这些数能否被小于sqrt(n)的奇数整除
		    int sqrt = (int) Math.sqrt(n);
		    for (int i = 5; i <= sqrt; i += 6) {
		        if (n % i == 0 || n % (i + 2) == 0) {
		            return false;
		        }
		    }
		    return true;
		}



public static int find (int []father,int x) {
		if(x!=father[x])
			x=find(father,father[x]);
		return father[x];
	}
public static void union(int []father,int x,int y,int []size) {
	x=find(father,x);
	y=find(father,y);
	if(x==y)
		return ;
	if(size[x]<size[y]) {
		 int tem=x;
         x=y;
         y=tem;
	}
	father[y]=x;
	size[x]+=size[y];
return ;
}
		
					
public static void shufu(int []f) {
		for(int i=0;i<f.length;i++) {
			int k=(int)(Math.random()*(f.length));
			int t=f[k];
			
			f[k]=f[0];
			f[0]=t;
			
		}
	}
public static void shufu1(long []f) {
	for(int i=0;i<f.length;i++) {
		int k=(int)(Math.random()*(f.length));
		long t=f[k];
		f[k]=f[0];
		f[0]=t;
	}
}
public  static int  gcd(int x,int y) {
		return y==0?x:gcd(y,x%y);
	}
 
 
public  static int  lcm(int x,int y) {
		
		return x*y/gcd(x,y);
}
		
	
	
		
		
	
	
		
	
/*					
public static void buildertree(int k,int l,int r) {
		if(l==r)
		{
			f[k]=a[l];
			return ;
		}
		int m=l+r>>1;
		buildertree(k+k,l,m);
		buildertree(k+k+1,m+1,r);
		f[k]=	
	
	}
public static	void update(int u,int l,int r,int x,int c)
{
    if(l==x && r==x)
    {
        f[u]=c;
        return;
    }
    int mid=l+r>>1;
    if(x<=mid)update(u<<1,l,mid,x,c);
    else if(x>=mid+1)update(u<<1|1,mid+1,r,x,c);
   	f[u]=Math.max(f[u+u], f[u+u+1]);
}
	
public static int query(int k,int l,int r,int x,int y) {
		if(x==l&&y==r) {
			return f[k];
		}
		int m=l+r>>1;
		if(y<=m) {
			return query(k+k,l,m,x,y);
		}
		else if(x>m)return query(k+k+1,m+1,r,x,y);
		else  {
			int i=query(k+k,l,m,x,m),j=query(k+k+1,m+1,r,m+1,y);
		return Math.max(j, Math.max(i+j, i));
		
		}
	}
	
public static void calc(int k,int l,int r,int x,int z) {
 
			f[k]+=z;
			if(l==r) {
				return ;
			}
			int m=l+r>>1;
    		if(x<=m)
    			calc(k+k,l,m,x,z);
    		else calc(k+k+1,m+1,r,x,z);
			
			
		}
	
				
			
 
		*/
		
				
	
			
	
			
	
 
	public static class MyScanner {
	    BufferedReader br;
	    StringTokenizer st;
	 
	    public MyScanner() {
	      try {
	        final String USERDIR = System.getProperty(""user.dir"");
	        String cname = MethodHandles.lookup().lookupClass().getCanonicalName().replace("".MyScanner"", """");
	        cname = cname.lastIndexOf('.') > 0 ? cname.substring(cname.lastIndexOf('.') + 1) : cname;
	        final File fin = new File(USERDIR + ""/io/c"" + cname.substring(1,5) + ""/"" + cname + "".in"");
	        br = new BufferedReader(new InputStreamReader(fin.exists()
	            ? new FileInputStream(fin) : System.in));
	      } catch (Exception e) {
	        br = new BufferedReader(new InputStreamReader(System.in));
	      }
	    }
	 
	    public String next() {
	      try {
	        while (st == null || !st.hasMoreElements()) {
	          st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	      } catch (Exception e) {
	        throw new RuntimeException(e);
	      }
	    }
	 
	    public int nextInt() {
	      return Integer.parseInt(next());
	    }
	 
	    public long nextLong() {
	      return Long.parseLong(next());
	    }
	  }
	
		}"
74,D,Java,61622136,2023-03-30 21:00:14,陈力明,答案正确,"//Java快读快写模板，不定时更新优化内容
//@可爱抱抱呀
import java.util.*;
import java.io.*;
import java.math.*;
import java.text.*;
public class Main{
    static List<Integer> list;
    public static void main(String args[]) throws IOException{
        Read sc=new Read();
        int n=sc.nextInt();
        int m=sc.nextInt();
        long c=sc.nextLong();
        List<Integer> path[]=new List[n+5];
        for(int i=1;i<=n;i++){
            path[i]=new ArrayList<>();
        }
        int arr[][]=new int[m][3];
        for(int i=0;i<m;i++){
            for(int j=0;j<3;j++){
                arr[i][j]=sc.nextInt();
            }
        }
        Arrays.sort(arr,(a,b)->a[2]-b[2]);
        int count=0;
        list=new ArrayList<>();
        int group[]=new int[n+4];
        for(int i=1;i<=n;i++){
            group[i]=i;
        }
        for(int a[]:arr){
            if(find(a[0],group)!=find(a[1],group)){
                count++;
                union(a[0],a[1],group);
                list.add(a[2]);
            }
            if(count==n-1){
                break;
            }
        }
        long l=0,r=(long)5e18;
        while(l<r){
            long mid=l+(r-l)/2;
            if(check(arr,c,mid,n)){
                r=mid;
            }
            else{
                l=mid+1;
            }
            if(l==r-1){
                if(check(arr,c,l,n)){
                    r=l;
                }
                break;
            }
        }
        sc.println(r);
        //sc.print(0);
        sc.bw.flush();
        sc.bw.close();
    }
    static boolean check(int arr[][],long c,long p,int n){
        for(int i=0;i<list.size();i++){
            if(list.get(i)>p){
                long kk=0;
                int max=list.size()-i;
                for(int j=1;j<=max;j++){
                    kk+=(long)j*list.get(list.size()-j);
                }
                if(kk>c){
                    return false;
                }
            }
        }
        return true;
    }
    static int find(int a,int group[]){
        if(a!=group[a]){
            group[a]=find(group[a],group);
        }
        return group[a];
    }
    static void union(int a,int b,int group[]){
        a=find(a,group);
        b=find(b,group);
        group[b]=a;
    }
}
//记住看数字范围，需要开long吗，需要用BigInteger吗，需要手动处理字符串吗，复杂度数量级控制在1e7或者以下了吗
//开数组的数据范围最高不能超过1e7，数据范围再大就要用哈希表离散化了
//基本数据类型不能自定义sort排序，二维数组就可以了，顺序排序的时候是小减大，注意返回值应该是int
class Read{
    BufferedReader bf;
    StringTokenizer st;
    BufferedWriter bw;
    public Read(){
        bf=new BufferedReader(new InputStreamReader(System.in));
        st=new StringTokenizer("""");
        bw=new BufferedWriter(new OutputStreamWriter(System.out));
        //什么时候才能持续稳定ak力扣、AcWing呢？
        //什么时候才能ak cf的div2，div1呢？才能打div2不计rating呢？
        //什么时候才能ak  abc  不计rating呢？
        //什么时候才能ak 牛客练习赛不计rating呢?
    }
    public String nextLine() throws IOException{
        return bf.readLine();
    }
    public String next() throws IOException{
        while(!st.hasMoreTokens()){
            st=new StringTokenizer(bf.readLine());
        }
        return st.nextToken();
    }
    public char nextChar() throws IOException{
        //确定下一个token只有一个字符的时候再用
        return next().charAt(0);
    }
    public int nextInt() throws IOException{
        return Integer.parseInt(next());
    }
    public long nextLong() throws IOException{
        return Long.parseLong(next());
    }
    public double nextDouble() throws IOException{
        return Double.parseDouble(next());
    }
    public float nextFloat() throws IOException{
        return Float.parseFloat(next());
    }
    public byte nextByte() throws IOException{
        return Byte.parseByte(next());
    }
    public short nextShort() throws IOException{
        return Short.parseShort(next());
    }
    public BigInteger nextBigInteger() throws IOException{
        return new BigInteger(next());
    }
    public void println(int a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(int a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(String a) throws IOException{
        bw.write(a);
        bw.newLine();
        return;
    }
    public void print(String a) throws IOException{
        bw.write(a);
        return;
    }
    public void println(long a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(long a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(double a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
    public void print(double a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void print(BigInteger a) throws IOException{
        bw.write(a.toString());
        return;
    }
    public void print(char a) throws IOException{
        bw.write(String.valueOf(a));
        return;
    }
    public void println(char a) throws IOException{
        bw.write(String.valueOf(a));
        bw.newLine();
        return;
    }
}"
75,D,Java,61622642,2023-03-30 21:30:23,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[40005];
    static ArrayList<Integer> list=new ArrayList<>();
    static int n,m;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100005][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            list.add(a[i][2]);
            G[x]=y;
        }
        int l=1,r=n;
        int pos=0;
        while (l<=r){
            int mid=l+r>>1;
            if(check(mid)){
                pos=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        out.println(pos);
        out.flush();
    }
    public static boolean check(int x){
        long ans=0;
        int cnt=1;
        for(int i=list.size()-1;i<=0;i--){
            if(list.get(i)>x) {
                ans+=list.get(i)*cnt;
                cnt++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
76,D,Java,61622676,2023-03-30 21:32:37,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[40005];
    static ArrayList<Integer> list=new ArrayList<>();
    static int n,m;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100005][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            list.add(a[i][2]);
            G[x]=y;
        }
        int l=1,r=n;
        int pos=0;
        while (l<=r){
            int mid=l+r>>1;
            if(check(mid)){
                pos=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        out.println(pos);
        out.flush();
    }
    public static boolean check(int x){
        long ans=0;
        int cnt=1;
        for(int i=list.size()-1;i<=0;i--){
            if(list.get(i)>x) {
                ans+=(long)(list.get(i)*cnt);
                cnt++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
77,D,Java,61622711,2023-03-30 21:34:51,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[40005];
    static ArrayList<Integer> list=new ArrayList<>();
    static int n,m;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100005][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            list.add(a[i][2]);
            G[x]=y;
        }
        int l=1,r=n;
        int pos=0;
        while (l<=r){
            int mid=l+r>>1;
            if(check(mid)){
                pos=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        out.println(pos);
        out.flush();
    }
    public static boolean check(int x){
        long ans=0;
        int cnt=1;
        for(int i=list.size()-1;i>=0;i--){
            if(list.get(i)>x) {
                ans+=(long)(list.get(i)*cnt);
                cnt++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
78,D,Java,61622734,2023-03-30 21:36:38,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        int l=1,r=(int)1e9;
        while (l<r){
            int mid=l+r>>1;
            if(check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(r);
        out.flush();
    }
    public static boolean check(int x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if(num[i]>x) {
                ans+=num[i]*j;
                j++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
79,D,Java,61622748,2023-03-30 21:37:48,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        int l=1,r=(int)1e9;
        while (l<r){
            int mid=l+r>>1;
            if(check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(r);
        out.flush();
    }
    public static boolean check(int x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if(num[i]>x) {
                ans+=(long)(num[i]*j);
                j++;
            }
        }
        return ans<=c;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
80,D,Java,61622840,2023-03-30 21:43:03,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        for(int i=cnt,j=1;i>=1;i--,j++){
            c-=(long)num[i]*j;
            if(c<0){
                out.println(num[i]);
                break;
            }
        }
        out.flush();
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
81,D,Java,61622869,2023-03-30 21:44:55,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static long[] num=new long[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        for(int i=cnt,j=1;i>=1;i--,j++){
            c-=(long)num[i]*j;
            if(c<0){
                out.println(num[i]);
                break;
            }
        }
        out.flush();
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
82,D,Java,61622883,2023-03-30 21:45:46,山东协和学院_张福旭,答案正确,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static long[] num=new long[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        for(int i=cnt,j=1;i>=1;i--,j++){
            c-=num[i]*j;
            if(c<0){
                out.println(num[i]);
                out.flush();
               return ;
            }
        }
        out.println(0);
        out.flush();
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
83,D,Java,61622916,2023-03-30 21:47:48,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        long l=1,r=(int)2e9;
        while (l<r){
            long mid=l+r>>1;
            if(check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(r);
        out.flush();
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if(num[i]>x) {
                ans+=num[i]*j;
                j++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
84,D,Java,61622920,2023-03-30 21:47:55,山东协和学院_张福旭,编译错误,"{""SPECIAL_TM_FH_MEMO_JSON_TAG"":""SPECIAL_TM_FH_MEMO_JSON_TAG"",""stderr"":""Main.java:38: error: not a statement\n                r=mid;long\n                      ^\nMain.java:38: error: ';' expected\n                r=mid;long\n                          ^\n2 errors""}

import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        long l=1,r=(long)2e9;
        while (l<r){
            long mid=l+r>>1;
            if(check(mid)){
                r=mid;long
            }
            else l=mid+1;
        }
        out.println(r);
        out.flush();
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if(num[i]>x) {
                ans+=num[i]*j;
                j++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
85,D,Java,61622921,2023-03-30 21:47:59,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        long l=1,r=(long)2e9;
        while (l<r){
            long mid=l+r>>1;
            if(check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(r);
        out.flush();
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if(num[i]>x) {
                ans+=num[i]*j;
                j++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
86,D,Java,61622927,2023-03-30 21:48:17,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        long l=1,r=(long)2e9;
        while (l<r){
            long mid=l+r>>1;
            if(check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(l);
        out.flush();
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if(num[i]>x) {
                ans+=num[i]*j;
                j++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
87,D,Java,61622931,2023-03-30 21:48:37,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        long l=0,r=(long)2e9;
        while (l<r){
            long mid=l+r>>1;
            if(check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(l);
        out.flush();
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if(num[i]>x) {
                ans+=num[i]*j;
                j++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
88,D,Java,61622949,2023-03-30 21:49:41,山东协和学院_张福旭,答案正确,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int[][] a=new int[100010][3];
        for (int i=1;i<=m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,1,m+1,((o1, o2) -> o1[2]-o2[2]));
//        for(int i=1;i<=m;i++)
//            out.println(a[i][0]+"" ""+a[i][1]+"" ""+a[i][2]);
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=1;i<=m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y)continue;
            num[++cnt]=a[i][2];
            G[x]=y;
        }
        long l=0,r=(long)1e9+1;
        while (l<r){
            long mid=l+r>>1;
            if(check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(l);
        out.flush();
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if(num[i]>x) {
                ans+=(long)(num[i])*j;
                j++;
            }
        }
        return ans<=c?true:false;
    }
    public static int find(int q){
        if(q==G[q]) return q;
        else return G[q]=find(G[q]);
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
89,D,Java,61626437,2023-03-31 13:27:17,冰岛iceland,执行出错,"import java.util.*;
import static java.lang.Math.*;

class Edge implements Comparable<Edge>
{
    int a;
    int b;
    int c;
    public Edge(int a,int b,int c)
    {
        this.a = a;
        this.b = b;
        this.c = c;
    }
    
    public int compareTo(Edge o)
    {
        return Integer.compare(c,o.c);
    }
}

public class Main
{
    static int N = 40010,M = 100010,n,m,max = 0x3f3f3f3f;
    static long c;
    static int[] p = new int[N];
    static Edge[] e = new Edge[M];
    static int[] g = new int[N];
    static int cnt,k = 1;
    
    
    static int find(int x)
    {
        if(x != p[x]) p[x] = find(p[x]);
        return p[x];
    }
    
    static boolean Check(long mid)
    {
        long res = 0;
        for(int i = cnt,j = 0;i >= 1; i--)
        {
            if(g[i] <= mid) break;
            res += (long) (++ j) * g[i];
        }
        return res <= c;
    }
    static void kruskal()
    {
        Arrays.sort(e,1, m + 1);
        for(int i = 1;i <= m;i ++)
        {
            int a = e[i].a;
            int b = e[i].b;
            int c = e[i].c;
            
            a = find(a);b = find(b);
            if(a != b)
            {
                p[a] = b;
                g[ ++ cnt] = c;
            }         
        }
    }
    public static void main(String[] args)
    {
        Scanner nana = new Scanner(System.in);
        n = nana.nextInt();
        m = nana.nextInt();
        c = nana.nextInt();
        
        for(int i = 1;i <= n;i ++) p[i] = i;
        
       for(int i = 1;i <= m;i ++)
       {
            int x = nana.nextInt();
            int y = nana.nextInt();
            int a = nana.nextInt();          
            e[i] = new Edge(x,y,a);           
       }  
        
        kruskal();
        
        long l= 0,r = (long)0x3f3f3f3f;
        while(l < r)
        {
            long mid = l + r >> 1;
            if(Check(mid)) r = mid;
            else l = mid + 1;
        }
        
        System.out.println(r);

    }
}










"
90,D,Java,61626441,2023-03-31 13:27:42,冰岛iceland,答案正确,"import java.util.*;
import static java.lang.Math.*;

class Edge implements Comparable<Edge>
{
    int a;
    int b;
    int c;
    public Edge(int a,int b,int c)
    {
        this.a = a;
        this.b = b;
        this.c = c;
    }
    
    public int compareTo(Edge o)
    {
        return Integer.compare(c,o.c);
    }
}

public class Main
{
    static int N = 40010,M = 100010,n,m,max = 0x3f3f3f3f;
    static long c;
    static int[] p = new int[N];
    static Edge[] e = new Edge[M];
    static int[] g = new int[N];
    static int cnt,k = 1;
    
    
    static int find(int x)
    {
        if(x != p[x]) p[x] = find(p[x]);
        return p[x];
    }
    
    static boolean Check(long mid)
    {
        long res = 0;
        for(int i = cnt,j = 0;i >= 1; i--)
        {
            if(g[i] <= mid) break;
            res += (long) (++ j) * g[i];
        }
        return res <= c;
    }
    static void kruskal()
    {
        Arrays.sort(e,1, m + 1);
        for(int i = 1;i <= m;i ++)
        {
            int a = e[i].a;
            int b = e[i].b;
            int c = e[i].c;
            
            a = find(a);b = find(b);
            if(a != b)
            {
                p[a] = b;
                g[ ++ cnt] = c;
            }         
        }
    }
    public static void main(String[] args)
    {
        Scanner nana = new Scanner(System.in);
        n = nana.nextInt();
        m = nana.nextInt();
        c = nana.nextLong();
        
        for(int i = 1;i <= n;i ++) p[i] = i;
        
       for(int i = 1;i <= m;i ++)
       {
            int x = nana.nextInt();
            int y = nana.nextInt();
            int a = nana.nextInt();          
            e[i] = new Edge(x,y,a);           
       }  
        
        kruskal();
        
        long l= 0,r = (long)0x3f3f3f3f;
        while(l < r)
        {
            long mid = l + r >> 1;
            if(Check(mid)) r = mid;
            else l = mid + 1;
        }
        
        System.out.println(r);

    }
}










"
91,D,Java,61711612,2023-04-01 23:19:35,不想去设计院,运行超时,"import java.util.*;

public class Main{
    static int n;
    static int m;
    static long c;
    
    //注意不要从0开始，按照他的下标解决
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);    
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();
        Edge[] edges = new Edge[m + 1];
        for (int i = 1; i <= m; i++){
            Edge edge = new Edge(sc.nextInt(), sc.nextInt(), sc.nextLong());
            edges[i] = edge;
        }
        edges[0]=  new Edge(0, 0, 0);
        long target = resolve(edges);
        System.out.println(target);
    }
    
    public static long resolve(Edge[] edges){
        Arrays.sort(edges, (edge1, edge2) -> {
            if (edge1.weight == edge2.weight) return 0;
            if (edge1.weight > edge2.weight) return 1;
            else return -1;
        });
        
        int[] distinations = new int[m + 1];
        Arrays.fill(distinations, -1);
        ArrayList<Long> result = new ArrayList<Long>();
        for (int i = 1; i < edges.length; i++){
            Edge edge = edges[i];
            int start = find(distinations, edge.start);
            int end = find(distinations, edge.end);
            if (start == end) continue;
            distinations[start] = end;
            result.add(edge.weight);
        }
        
        int k = 0;
        long sum = 0;
        int target = -1;//这里是用来输出结果的
        for (int i = result.size() - 1; i >= 0; i--){
            sum += result.get(i) * (++k);
            if (sum > c) {
                target = i;
                break;
            }
        }
        return target == -1 ? 0 : result.get(target); 
    }
    
    public static int find(int[] distinations, int index){
        while (distinations[index] > 0){
            index = distinations[index];
        }
        return index;
    }
}

class Edge{
    int start;
    int end;
    long weight;
    public Edge(int start, int end, long weight){
        this.start = start;
        this.end = end;
        this.weight = weight;
    }
}"
92,D,Java,61711618,2023-04-01 23:20:38,不想去设计院,运行超时,"import java.util.*;

public class Main{
    static int n;
    static int m;
    static long c;
    
    //注意不要从0开始，按照他的下标解决
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);    
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();
        Edge[] edges = new Edge[m + 1];
        for (int i = 1; i <= m; i++){
            Edge edge = new Edge(sc.nextInt(), sc.nextInt(), sc.nextLong());
            edges[i] = edge;
        }
        edges[0]=  new Edge(0, 0, 0);
        long target = resolve(edges);
        System.out.println(target);
    }
    
    public static long resolve(Edge[] edges){
        Arrays.sort(edges, (edge1, edge2) -> {
            if (edge1.weight == edge2.weight) return 0;
            if (edge1.weight > edge2.weight) return 1;
            else return -1;
        });
        
        int[] distinations = new int[m + 1];
        Arrays.fill(distinations, -1);
        ArrayList<Long> result = new ArrayList<Long>();
        for (int i = 1; i < edges.length; i++){
            Edge edge = edges[i];
            int start = find(distinations, edge.start);
            int end = find(distinations, edge.end);
            if (start == end) continue;
            distinations[start] = end;
            result.add(edge.weight);
        }
        
        int k = 0;
        long sum = 0;
        int target = -1;//这里是用来输出结果的
        for (int i = result.size() - 1; i >= 0; i--){
            sum += result.get(i) * (++k);
            if (sum > c) {
                target = i;
                break;
            }
        }
        return target == -1 ? 0 : result.get(target); 
    }
    
    public static int find(int[] distinations, int index){
        while (distinations[index] > 0){
            index = distinations[index];
        }
        return index;
    }
}

class Edge{
    int start;
    int end;
    long weight;
    public Edge(int start, int end, long weight){
        this.start = start;
        this.end = end;
        this.weight = weight;
    }
}"
93,D,Java,61711675,2023-04-01 23:27:04,不想去设计院,运行超时,"import java.util.*;

public class Main{
    static int n;
    static int m;
    static long c;
    
    //注意不要从0开始，按照他的下标解决
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);    
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();
        Edge[] edges = new Edge[m + 1];
        for (int i = 1; i <= m; i++){
            Edge edge = new Edge(sc.nextInt(), sc.nextInt(), sc.nextLong());
            edges[i] = edge;
        }
        edges[0]=  new Edge(0, 0, 0);
        long target = resolve(edges);
        System.out.print(target);
    }
    
    public static long resolve(Edge[] edges){
        Arrays.sort(edges, (edge1, edge2) -> {
            if (edge1.weight == edge2.weight) return 0;
            if (edge1.weight > edge2.weight) return 1;
            else return -1;
        });
        
        int[] distinations = new int[m + 1];
        
        ArrayList<Long> result = new ArrayList<Long>();
        for (int i = 1; i < edges.length; i++){
            Edge edge = edges[i];
            int start = find(distinations, edge.start);
            int end = find(distinations, edge.end);
            if (start == end) continue;
            distinations[start] = end;
            result.add(edge.weight);
        }
        
        int k = 0;
        long sum = 0;
        int target = -1;//这里是用来输出结果的
        for (int i = result.size() - 1; i >= 0; i--){
            sum += result.get(i) * (++k);
            if (sum > c) {
                target = i;
                break;
            }
        }
        return target == -1 ? 0 : result.get(target); 
    }
    
    public static int find(int[] distinations, int index){
        while (distinations[index] > 0){
            index = distinations[index];
        }
        return index;
    }
}

class Edge{
    int start;
    int end;
    long weight;
    public Edge(int start, int end, long weight){
        this.start = start;
        this.end = end;
        this.weight = weight;
    }
}"
94,D,Java,61712661,2023-04-02 03:09:48,不想去设计院,运行超时,"import java.util.*;

public class Main{
    static int n;
    static int m;
    static long c;
    
    //注意不要从0开始，按照他的下标解决
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);    
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();
        Edge[] edges = new Edge[m + 1];
        for (int i = 1; i <= m; i++){
            Edge edge = new Edge(sc.nextInt(), sc.nextInt(), sc.nextLong());
            edges[i] = edge;
        }
        edges[0]=  new Edge(0, 0, 0);
        long target = resolve(edges);
        System.out.print(target);
    }
    
    public static long resolve(Edge[] edges){
        Arrays.sort(edges, (edge1, edge2) -> {
            if (edge1.weight == edge2.weight) return 0;
            if (edge1.weight > edge2.weight) return 1;
            else return -1;
        });
        
        int[] distinations = new int[m + 1];
        
        ArrayList<Long> result = new ArrayList<Long>();
        for (int i = 1; i < edges.length; i++){
            Edge edge = edges[i];
            int start = find(distinations, edge.start);
            int end = find(distinations, edge.end);
            if (start == end) continue;
            distinations[start] = end;
            result.add(edge.weight);
        }
        
        int k = 0;
        long sum = 0;
        int target = -1;//这里是用来输出结果的
        for (int i = result.size() - 1; i >= 0; i--){
            sum += (long) result.get(i) * (++k);
            if (sum > c) {
                target = i;
                break;
            }
        }
        return target == -1 ? 0 : result.get(target); 
    }
    
    public static int find(int[] distinations, int index){
        while (distinations[index] > 0){
            index = distinations[index];
        }
        return index;
    }
}

class Edge{
    int start;
    int end;
    long weight;
    public Edge(int start, int end, long weight){
        this.start = start;
        this.end = end;
        this.weight = weight;
    }
}"
95,D,Java,61733785,2023-04-03 16:49:12,SongL7,编译错误,"{""SPECIAL_TM_FH_MEMO_JSON_TAG"":""SPECIAL_TM_FH_MEMO_JSON_TAG"",""stderr"":""Main.java:33: error: cannot find symbol\n            var edge=  res.get(i);\n            ^\n  symbol:   class var\n  location: class Main\nMain.java:53: error: cannot find symbol\n            var edge = edges.get(i);\n            ^\n  symbol:   class var\n  location: class Main\n2 errors""}


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    static FastReader in = new FastReader();
    static int n, m, c;
    static int []fa;
    static ArrayList<edges> edges = new ArrayList<>();
    static ArrayList<edges> res = new ArrayList<>();
    @SuppressWarnings({""all""})
    static void solve() {
        n = in.nextInt(); m = in.nextInt(); c = in.nextInt();
        fa = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
        }
        for (int i = 0; i < m; i++) {
            edges.add(new edges(in.nextInt(), in.nextInt(), in.nextInt()));
        }
        Collections.sort(edges, new Comparator<Main.edges>() {
            @Override
            public int compare(Main.edges o1, Main.edges o2) {
                return o1.w - o2.w;
            }
        });

        krustrual();
        int cnt = 1;
        for(int i = res.size() - 1; i >=0 ; --i) {
            var edge=  res.get(i);
            if(c >= cnt * edge.w) c -= cnt * edge.w;
            else {
                System.out.println(edge.w);
                return;
            }
            ++cnt;
        }
        System.out.println(0);

    }

    static int find(int x) {
        if(fa[x] != x) fa[x] = find(fa[x]);
        return x;
    }

    static void krustrual() {
        int cnt = 0;
        for(int i = 0;i < edges.size(); ++i) {
            var edge = edges.get(i);
            int u = edge.u, v = edge.v , w = edge.w;
            u = find(u); v = find(v);
            if( u != v) {
                res.add(edge);
                cnt ++;
                fa[u] = fa[v];
            }
            if(cnt == n- 1) return;
        }
    }

    static class edges{
        int u , v, w;
        public edges(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }


    public static void main(String[] args)  {
        int t = 1;
        while( t --> 0) {
            solve();
        }
    }

    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 ? a : b;
    }

    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 ? a : b;
    }

    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }


    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
"
96,D,Java,61733792,2023-04-03 16:50:01,SongL7,执行出错,"
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    static FastReader in = new FastReader();
    static int n, m, c;
    static int []fa;
    static ArrayList<edges> edges = new ArrayList<>();
    static ArrayList<edges> res = new ArrayList<>();
    @SuppressWarnings({""all""})
    static void solve() {
        n = in.nextInt(); m = in.nextInt(); c = in.nextInt();
        fa = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
        }
        for (int i = 0; i < m; i++) {
            edges.add(new edges(in.nextInt(), in.nextInt(), in.nextInt()));
        }
        Collections.sort(edges, new Comparator<Main.edges>() {
            @Override
            public int compare(Main.edges o1, Main.edges o2) {
                return o1.w - o2.w;
            }
        });

        krustrual();
        int cnt = 1;
        for(int i = res.size() - 1; i >=0 ; --i) {
            edges edge=  res.get(i);
            if(c >= cnt * edge.w) c -= cnt * edge.w;
            else {
                System.out.println(edge.w);
                return;
            }
            ++cnt;
        }
        System.out.println(0);
    }

    static int find(int x) {
        if(fa[x] != x) fa[x] = find(fa[x]);
        return x;
    }

    static void krustrual() {
        int cnt = 0;
        for(int i = 0;i < edges.size(); ++i) {
            edges edge = edges.get(i);
            int u = edge.u, v = edge.v , w = edge.w;
            u = find(u); v = find(v);
            if( u != v) {
                res.add(edge);
                cnt ++;
                fa[u] = fa[v];
            }
            if(cnt == n- 1) return;
        }
    }

    static class edges{
        int u , v, w;
        public edges(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }


    public static void main(String[] args)  {
        int t = 1;
        while( t --> 0) {
            solve();
        }
    }

    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 ? a : b;
    }

    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 ? a : b;
    }

    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }


    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
"
97,D,Java,61733820,2023-04-03 16:52:33,SongL7,答案错误,"
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    static FastReader in = new FastReader();
    static int n, m;
    static long c;
    static int []fa;
    static ArrayList<edges> edges = new ArrayList<>();
    static ArrayList<edges> res = new ArrayList<>();
    @SuppressWarnings({""all""})
    static void solve() {
        n = in.nextInt(); m = in.nextInt(); c = in.nextLong();
        fa = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
        }
        for (int i = 0; i < m; i++) {
            edges.add(new edges(in.nextInt(), in.nextInt(), in.nextInt()));
        }
        Collections.sort(edges, new Comparator<Main.edges>() {
            @Override
            public int compare(Main.edges o1, Main.edges o2) {
                return o1.w - o2.w;
            }
        });

        krustrual();
        int cnt = 1;
        for(int i = res.size() - 1; i >=0 ; --i) {
            edges edge=  res.get(i);
            if(c >= cnt * edge.w) c -= cnt * edge.w * 1L;
            else {
                System.out.println(edge.w);
                return;
            }
            ++cnt;
        }
        System.out.println(0);
    }

    static int find(int x) {
        if(fa[x] != x) fa[x] = find(fa[x]);
        return x;
    }

    static void krustrual() {
        int cnt = 0;
        for(int i = 0;i < edges.size(); ++i) {
            edges edge = edges.get(i);
            int u = edge.u, v = edge.v , w = edge.w;
            u = find(u); v = find(v);
            if( u != v) {
                res.add(edge);
                cnt ++;
                fa[u] = fa[v];
            }
            if(cnt == n- 1) return;
        }
    }

    static class edges{
        int u , v, w;

        public edges(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }


    public static void main(String[] args)  {
        int t = 1;
        while( t --> 0) {
            solve();
        }
    }

    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 ? a : b;
    }

    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 ? a : b;
    }

    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }


    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
"
98,D,Java,61733844,2023-04-03 16:54:24,SongL7,答案错误,"
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    static FastReader in = new FastReader();
    static int n, m;
    static long c;
    static int []fa;
    static ArrayList<edges> edges = new ArrayList<>();
    static ArrayList<edges> res = new ArrayList<>();
    @SuppressWarnings({""all""})
    static void solve() {
        n = in.nextInt(); m = in.nextInt(); c = in.nextLong();
        fa = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
        }
        for (int i = 0; i < m; i++) {
            edges.add(new edges(in.nextInt(), in.nextInt(), in.nextInt()));
        }
        Collections.sort(edges, new Comparator<Main.edges>() {
            @Override
            public int compare(Main.edges o1, Main.edges o2) {
                return o1.w - o2.w;
            }
        });

        krustrual();
        int cnt = 1;
        for(int i = res.size() - 1; i >=0 ; --i) {
            edges edge =  res.get(i);
            if(c >= 1L* cnt * edge.w) c -= cnt * edge.w * 1L;
            else {
                System.out.println(edge.w);
                return;
            }
            ++cnt;
        }
        System.out.println(0);
    }

    static int find(int x) {
        if(fa[x] != x) fa[x] = find(fa[x]);
        return x;
    }

    static void krustrual() {
        int cnt = 0;
        for(int i = 0;i < edges.size(); ++i) {
            edges edge = edges.get(i);
            int u = edge.u, v = edge.v , w = edge.w;
            u = find(u); v = find(v);
            if( u != v) {
                res.add(edge);
                cnt ++;
                fa[u] = fa[v];
            }
            if(cnt == n- 1) return;
        }
    }

    static class edges{
        int u , v, w;

        public edges(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }


    public static void main(String[] args)  {
        int t = 1;
        while( t --> 0) {
            solve();
        }
    }

    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 ? a : b;
    }

    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 ? a : b;
    }

    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }


    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
"
99,D,Java,61733878,2023-04-03 16:57:11,SongL7,答案错误,"
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    static FastReader in = new FastReader();
    static int n, m;
    static long c;
    static int []fa;
    static ArrayList<edges> edges = new ArrayList<>();
    static ArrayList<Integer> res = new ArrayList<>();
    @SuppressWarnings({""all""})
    static void solve() {
        n = in.nextInt(); m = in.nextInt(); c = in.nextLong();
        fa = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
        }
        for (int i = 0; i < m; i++) {
            edges.add(new edges(in.nextInt(), in.nextInt(), in.nextInt()));
        }
        Collections.sort(edges, new Comparator<Main.edges>() {
            @Override
            public int compare(Main.edges o1, Main.edges o2) {
                return o1.w - o2.w;
            }
        });

        krustrual();
        Collections.sort(res);
        int cnt = 1;
        for(int i = res.size() - 1; i >=0 ; --i) {
            int w =  res.get(i);
            if(c >= 1L* cnt * w) c -= cnt * w * 1L;
            else {
                System.out.println(w);
                return;
            }
            ++cnt;
        }
        System.out.println(0);
    }

    static int find(int x) {
        if(fa[x] != x) fa[x] = find(fa[x]);
        return x;
    }

    static void krustrual() {
        int cnt = 0;
        for(int i = 0;i < m; ++i) {
            edges edge = edges.get(i);
            int u = edge.u, v = edge.v , w = edge.w;
            u = find(u); v = find(v);
            if( u != v) {
                res.add(w);
                cnt ++;
                fa[u] = fa[v];
            }
            if(cnt == n- 1) return;
        }
    }

    static class edges{
        int u , v, w;

        public edges(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }


    public static void main(String[] args)  {
        int t = 1;
        while( t --> 0) {
            solve();
        }
    }

    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 ? a : b;
    }

    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 ? a : b;
    }

    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }


    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
"
100,D,Java,61733997,2023-04-03 17:06:39,SongL7,答案错误,"
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    static FastReader in = new FastReader();
    static int n, m;
    static long c;
    static int []fa;
    static ArrayList<edges> edges = new ArrayList<>();
    static ArrayList<Integer> res = new ArrayList<>();
    @SuppressWarnings({""all""})
    static void solve() {
        n = in.nextInt(); m = in.nextInt(); c = in.nextLong();
        fa = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
        }
        for (int i = 0; i < m; i++) {
            edges.add(new edges(in.nextInt(), in.nextInt(), in.nextInt()));
        }
        Collections.sort(edges, new Comparator<Main.edges>() {
            @Override
            public int compare(Main.edges o1, Main.edges o2) {
                return o1.w - o2.w > 0 ? 1 : -1;
            }
        });

        krustrual();
        Collections.sort(res);
        int cnt = 1;
        for(int i = res.size() - 1; i >=0 ; --i) {
            int w =  res.get(i);
            if(c >= 1L* cnt * w) c -= cnt * w * 1L;
            else {
                System.out.println(w);
                return;
            }
            ++cnt;
        }
        System.out.println(0);
    }

    static int find(int x) {
        if(fa[x] != x) fa[x] = find(fa[x]);
        return x;
    }

    static void krustrual() {
        int cnt = 0;
        for(int i = 0;i < m; ++i) {
            edges edge = edges.get(i);
            int u = edge.u, v = edge.v , w = edge.w;
            u = find(u); v = find(v);
            if( u != v) {
                res.add(w);
                cnt ++;
                fa[u] = v;
            }
            if(cnt == n - 1) return;
        }
    }

    static class edges{
        int u , v, w;

        public edges(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }


    public static void main(String[] args)  {
        int t = 1;
        while( t --> 0) {
            solve();
        }
    }

    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 ? a : b;
    }

    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 ? a : b;
    }

    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }


    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
"
101,D,Java,61734073,2023-04-03 17:15:11,SongL7,答案错误,"
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    static FastReader in = new FastReader();
    static int n, m;
    static long c;
    static int []fa;
    static ArrayList<edges> edges = new ArrayList<>();
    static ArrayList<Integer> res = new ArrayList<>();
    @SuppressWarnings({""all""})
    static void solve() {
        n = in.nextInt(); m = in.nextInt(); c = in.nextLong();
        fa = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
        }
        for (int i = 0; i < m; i++) {
            edges.add(new edges(in.nextInt(), in.nextInt(), in.nextInt()));
        }
        Collections.sort(edges, new Comparator<Main.edges>() {
            @Override
            public int compare(Main.edges o1, Main.edges o2) {
                return o1.w - o2.w;
            }
        });

        krustrual();
        Collections.sort(res);
        int cnt = 1;
        for(int i = res.size() - 1; i >=0 ; --i) {
            int w =  res.get(i);
            if(c >= 1L* cnt * w) c -= cnt * w * 1L;
            else {
                System.out.println(w);
                return;
            }
            ++cnt;
        }
        System.out.println(0);
    }

    static int find(int x) {
        if(fa[x] != x) fa[x] = find(fa[x]);
        return x;
    }

    static void krustrual() {
        int cnt = 0;
        for(int i = 0;i < m; ++i) {
            edges edge = edges.get(i);
            int u = edge.u, v = edge.v , w = edge.w;
            u = find(u); v = find(v);
            if( u != v) {
                res.add(w);
                cnt ++;
                fa[u] = v;
            }
            if(cnt == n - 1) return;
        }
    }

    static class edges{
        int u , v, w;

        public edges(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }


    public static void main(String[] args)  {
        int t = 1;
        while( t --> 0) {
            solve();
        }
    }

    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 ? a : b;
    }

    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 ? a : b;
    }

    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }


    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
"
102,D,Java,61734135,2023-04-03 17:20:46,SongL7,答案错误,"
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    static FastReader in = new FastReader();
    static int n, m;
    static long c;
    static int []fa;
    static ArrayList<edges> edges = new ArrayList<>();
    static ArrayList<Long> res = new ArrayList<>();
    @SuppressWarnings({""all""})
    static void solve() {
        n = in.nextInt(); m = in.nextInt(); c = in.nextLong();
        fa = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            fa[i] = i;
        }
        for (int i = 0; i < m; i++) {
            edges.add(new edges(in.nextInt(), in.nextInt(), in.nextInt()));
        }
        Collections.sort(edges);

        krustrual();
        Collections.sort(res);
        int cnt = 1;
        for(int i = res.size() - 1; i >=0 ; --i) {
            Long w =  res.get(i);
            if(c >=  cnt * w) c -= cnt * w ;
            else {
                System.out.println(w);
                return;
            }
            ++cnt;
        }
        System.out.println(0);
    }

    static int find(int x) {
        if(fa[x] != x) fa[x] = find(fa[x]);
        return x;
    }

    static void krustrual() {
        int cnt = 0;
        for(int i = 0;i < m; ++i) {
            edges edge = edges.get(i);
            int u = edge.u, v = edge.v , w = edge.w;
            u = find(u); v = find(v);
            if( u != v) {
                res.add(w * 1L);
                cnt ++;
                fa[u] = v;
            }
            if(cnt == n - 1) return;
        }
    }

    static class edges implements Comparable<edges>{
        int u , v, w;

        public edges(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }

        @Override
        public int compareTo(Main.edges o) {
            return this.w - o.w;
        }
    }


    public static void main(String[] args)  {
        int t = 1;
        while( t --> 0) {
            solve();
        }
    }

    static <T extends Comparable<T>>T max(T a, T b) {
        return a.compareTo(b) > 0 ? a : b;
    }

    static <T extends Comparable<T>>T min(T a, T b) {
        return a.compareTo(b) < 0 ? a : b;
    }

    static <T> void swap(T[] arr, int i , int j) {
        T temp = arr[i];arr[i] = arr[j];arr[j] = temp;
    }


    @SuppressWarnings({""all""})
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
"
103,D,Java,61734198,2023-04-03 17:24:36,SongL7,答案正确,"import java.util.*;

public class Main {
    
    static class Node {
        int a, b, w;
        Node(int a, int b, int w) {
            this.a = a;
            this.b = b;
            this.w = w;
        }
    }

    static int N = 2 * 100000 + 10;
    static int n, m;
    static long c;
    static int[] fa = new int[N];
    static List<Integer> res = new ArrayList<>();
    static Node[] edges = new Node[N];
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        c = sc.nextLong();

        for(int i = 1; i <= m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int w = sc.nextInt();
            edges[i] = new Node(a, b, w);
        }

        Arrays.sort(edges, 1, m+1, new Comparator<Node>() {
            @Override
            public int compare(Node a, Node b) {
                return a.w - b.w;
            }
        });

        kruskal();

        Collections.sort(res);

        int cnt = 1;
        for(int i = res.size() - 1; i >= 0; i--) {
            int w = res.get(i);
            if(c >= 1L * w * cnt) c -= 1L * w * cnt;
            else {
                System.out.println(w);
                return;
            }
            ++cnt;
        }

        System.out.println(0);
    }

    static int find(int x) {
        if(x != fa[x]) fa[x] = find(fa[x]);
        return fa[x];
    }

    static void kruskal() {
        for(int i = 1; i <= n; i++) fa[i] = i;

        int cnt = 0, ans = 0;
        for(int i = 1; i <= m; i++) {
            int a = edges[i].a, b = edges[i].b, w = edges[i].w;
            a = find(a); b = find(b);
            if(a != b) {
                fa[a] = b;
                cnt++;
                res.add(w);
            }
            if(cnt == n - 1) return;
        }
    }
}
"
104,D,Java,61740002,2023-04-03 21:46:01,wahaha~,答案正确,"import java.util.*;
import java.util.Scanner;
// 注意类名必须为 Main, 不要有任何 package xxx 信息
public class Main {
    
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int m = in.nextInt();
        Long c = in.nextLong();
        
        int[][] a = new int[m][3];
        for(int i = 0; i < m; i++) {
            a[i][0] = in.nextInt();
            a[i][1] = in.nextInt();
            a[i][2] = in.nextInt();
        }
        Arrays.sort(a, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                return o1[2] - o2[2];
            }
        });
        int[] p = new int[n + 1];
        ArrayList<Integer> res = kruskal(p, a, n, m);
        res.sort(new Comparator<Integer>() {
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        int ans = 0;
        long k = 1;
        for(int i = 0; i < res.size(); i++, k++) {
            if(c - k * res.get(i) >= 0) {
                c -= k * res.get(i);
            } else {
                ans = res.get(i);
                break;
            }
            
        }
        System.out.println(ans);
    }
    
    static int find(int[] p, int x) {
            if(x != p[x])
                p[x] = find(p, p[x]);
            return p[x];
        }
    
    static ArrayList<Integer> kruskal(int[] p,int[][] a, int n, int m) {
        //初始化并查集
        for(int i = 1; i <= n; i++) {
            p[i] = i;
        }
        ArrayList<Integer> res = new ArrayList<>();
        int cnt = 0;
        for(int i = 0; i < m; i++) {
            int x = find(p, a[i][0]), y = find(p, a[i][1]);
            if(x != y) {
                p[x] = y;
                res.add(a[i][2]);
                cnt++;
            }
        }
        return res;    
    }
}
"
105,D,Java,61785362,2023-04-07 16:47:29,牛客765377204号,答案正确,"

import java.io.IOException;
import java.lang.annotation.ElementType;
import java.util.*;


public class Main {
    static Scanner in = new Scanner(System.in);

    static int n;
    static int m;
    static long c;

    public static class Union {
        private int[] parents;//创建一个父数组
        private int[] help;//辅助数组，用来缩短路径
        private int set;
        private int[] size;

        public Union(int N) { //初始化
            parents = new int[N];
            size = new int[N];
            help = new int[N];
            set = N;//最初有N个集合
            for (int i = 0; i < N; i++) {
                parents[i] = i;
                size[i] = 1;
            }
        }

        public int find(int i) {
            int hi = 0;
            while (i != parents[i]) {
                help[hi++] = i;
                i = parents[i];//找祖先节点
            }
            for (hi--; hi >= 0; hi--) {
                parents[help[hi]] = i;//将路径的所有节点直接指向祖先节点
            }
            return i;
        }

        public void union(int i, int j) {
            int f1 = find(i); //找到i，j的祖先节点，如果祖先节点不一致的话就合并
            int f2 = find(j);
            if (f1 != f2) {
                //还是小连大的
                if (size[f1] >= size[f2]) {
                    size[f1] += size[f2];
                    parents[f2] = f1;
                } else {
                    size[f2] += size[f1];
                    parents[f1] = f2;
                }
                set--;//集合数量--
            }
        }

        public int set() {
            return set;
        }
    }

    static class edges {
        int x, y, c;

        edges(int x, int y, int c) {
            this.x = x;
            this.y = y;
            this.c = c;
        }
    }

    public static void main(String[] args) {
        n = in.nextInt();
        m = in.nextInt();
        c = in.nextLong();
        edges[] edges = new edges[m];
        for (int i = 0; i < m; i++) {
            edges[i] = new edges(in.nextInt(), in.nextInt(), in.nextInt());
        }

        Arrays.sort(edges, (a, b) -> a.c - b.c);

        Union union = new Union(n + 1);

        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            int a = edges[i].x;
            int b = edges[i].y;
            int c = edges[i].c;
            if(union.set()==2)break;
            if (union.find(a) != union.find(b)) {
                list.add(c);
                union.union(a, b);
            }
        }

        list.sort((a, b) -> b - a);

        int N = list.size();

        long[] preSum = new long[N + 1];
        for (int i = 1; i <= N; i++)
            preSum[i] = preSum[i - 1] + (long) i * list.get(i - 1);

        if (preSum[N] <= c) {
            System.out.println(0);
        } else {
            for (int i = 1; i <= N; i++) {
                if (preSum[i] > c) {

                    System.out.println(list.get(i - 1));
                    return;
                }
            }

        }
    }


}"
106,D,Java,61851521,2023-04-11 20:50:26,山东协和学院_张福旭,执行出错,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,c,cnt=0;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextInt();
        int a[][] =new int[m][3];
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=0;i<m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,((o1, o2) -> o1[2]-o2[2]));
        for(int i=0;i<n;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y) continue;
            G[x]=y;
            num[++cnt]=a[i][2];
            //out.println(a[i][0]+"" ""+a[i][1]+"" ""+num[cnt]+"" "");
        }
        long l=1,r=(long)1e9+10;
        long pos=0;
        while (l<=r){
            long mid=l+r>>1;
            if (check(mid)){
                pos=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        out.println(pos);
        out.flush();
    }
    public static int find(int p){
        if (p!=G[p]) return G[p]=find(G[p]);
        return p;
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if (num[i]>x) {
                ans+=(long)(num[i]*j);
                j++;
            }
        }
        return ans<=c;
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
107,D,Java,61851546,2023-04-11 20:51:38,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int a[][] =new int[m][3];
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=0;i<m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,((o1, o2) -> o1[2]-o2[2]));
        for(int i=0;i<n;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y) continue;
            G[x]=y;
            num[++cnt]=a[i][2];
            //out.println(a[i][0]+"" ""+a[i][1]+"" ""+num[cnt]+"" "");
        }
        long l=1,r=(long)1e9+10;
        long pos=0;
        while (l<=r){
            long mid=l+r>>1;
            if (check(mid)){
                pos=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        out.println(pos);
        out.flush();
    }
    public static int find(int p){
        if (p!=G[p]) return G[p]=find(G[p]);
        return p;
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if (num[i]>x) {
                ans+=(long)(num[i]*j);
                j++;
            }
        }
        return ans<=c;
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
108,D,Java,61851565,2023-04-11 20:52:23,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int a[][] =new int[m][3];
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=0;i<m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,((o1, o2) -> o1[2]-o2[2]));
        for(int i=0;i<n;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y) continue;
            G[x]=y;
            num[++cnt]=a[i][2];
            //out.println(a[i][0]+"" ""+a[i][1]+"" ""+num[cnt]+"" "");
        }
        long l=1,r=(long)1e9+10;
        while (l<r){
            long mid=l+r>>1;
            if (check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(l);
        out.flush();
    }
    public static int find(int p){
        if (p!=G[p]) return G[p]=find(G[p]);
        return p;
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if (num[i]>x) {
                ans+=(long)(num[i]*j);
                j++;
            }
        }
        return ans<=c;
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
109,D,Java,61851570,2023-04-11 20:52:44,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int a[][] =new int[m][3];
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=0;i<m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,((o1, o2) -> o1[2]-o2[2]));
        for(int i=0;i<n;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y) continue;
            G[x]=y;
            num[++cnt]=a[i][2];
            //out.println(a[i][0]+"" ""+a[i][1]+"" ""+num[cnt]+"" "");
        }
        long l=1,r=(long)1e9+10;
        while (l<r){
            long mid=l+r>>1;
            if (check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(l);
        out.flush();
    }
    public static int find(int p){
        if (p!=G[p]) return G[p]=find(G[p]);
        return p;
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if (num[i]>x) {
                ans+=(long)num[i]*j;
                j++;
            }
        }
        return ans<=c;
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
110,D,Java,61851613,2023-04-11 20:54:44,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int a[][] =new int[m][3];
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=0;i<m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,((o1, o2) -> o1[2]-o2[2]));
        for(int i=0;i<n;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y) continue;
            G[x]=y;
            num[++cnt]=a[i][2];
            //out.println(a[i][0]+"" ""+a[i][1]+"" ""+num[cnt]+"" "");
        }
        long l=0,r=(long)1e9+10;
        while (l<r){
            long mid=l+r>>1;
            if (check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(l);
        out.flush();
    }
    public static int find(int p){
        if (p!=G[p]) return G[p]=find(G[p]);
        return p;
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if (num[i]>x) {
                ans+=(long)num[i]*j;
                j++;
            }
        }
        return ans<=c;
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
111,D,Java,61851623,2023-04-11 20:55:34,山东协和学院_张福旭,答案正确,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int a[][] =new int[m][3];
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=0;i<m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,((o1, o2) -> o1[2]-o2[2]));
        for(int i=0;i<m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y) continue;
            G[x]=y;
            num[++cnt]=a[i][2];
            //out.println(a[i][0]+"" ""+a[i][1]+"" ""+num[cnt]+"" "");
        }
        long l=0,r=(long)1e9+10;
        while (l<r){
            long mid=l+r>>1;
            if (check(mid)){
                r=mid;
            }
            else l=mid+1;
        }
        out.println(l);
        out.flush();
    }
    public static int find(int p){
        if (p!=G[p]) return G[p]=find(G[p]);
        return p;
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if (num[i]>x) {
                ans+=(long)num[i]*j;
                j++;
            }
        }
        return ans<=c;
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
112,D,Java,61851639,2023-04-11 20:56:17,山东协和学院_张福旭,答案错误,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int a[][] =new int[m][3];
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=0;i<m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,((o1, o2) -> o1[2]-o2[2]));
        for(int i=0;i<m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y) continue;
            G[x]=y;
            num[++cnt]=a[i][2];
            //out.println(a[i][0]+"" ""+a[i][1]+"" ""+num[cnt]+"" "");
        }
        long l=1,r=(long)1e9+10;
        long pos=0;
        while (l<=r){
            long mid=l+r>>1;
            if (check(mid)){
                pos=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        out.println(pos);
        out.flush();
    }
    public static int find(int p){
        if (p!=G[p]) return G[p]=find(G[p]);
        return p;
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if (num[i]>x) {
                ans+=(long)num[i]*j;
                j++;
            }
        }
        return ans<=c;
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
113,D,Java,61851644,2023-04-11 20:56:29,山东协和学院_张福旭,答案正确,"import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    static Read sc=new Read(System.in);
    static PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
    static int[] G=new int[100010];
    static int[] num=new int[100010];
    static int n,m,cnt=0;
    static long c;
    public static void main(String[] args) {
        n=sc.nextInt();
        m=sc.nextInt();
        c=sc.nextLong();
        int a[][] =new int[m][3];
        for(int i=1;i<=n;i++)
            G[i]=i;
        for(int i=0;i<m;i++){
            a[i][0]=sc.nextInt();
            a[i][1]=sc.nextInt();
            a[i][2]=sc.nextInt();
        }
        Arrays.sort(a,((o1, o2) -> o1[2]-o2[2]));
        for(int i=0;i<m;i++){
            int x=find(a[i][0]);
            int y=find(a[i][1]);
            if (x==y) continue;
            G[x]=y;
            num[++cnt]=a[i][2];
            //out.println(a[i][0]+"" ""+a[i][1]+"" ""+num[cnt]+"" "");
        }
        long l=0,r=(long)1e9+10;
        long pos=0;
        while (l<=r){
            long mid=l+r>>1;
            if (check(mid)){
                pos=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        out.println(pos);
        out.flush();
    }
    public static int find(int p){
        if (p!=G[p]) return G[p]=find(G[p]);
        return p;
    }
    public static boolean check(long x){
        long ans=0;
        int j=1;
        for(int i=cnt;i>=1;i--){
            if (num[i]>x) {
                ans+=(long)num[i]*j;
                j++;
            }
        }
        return ans<=c;
    }
    static class Read {
        BufferedReader br;
        StringTokenizer st;

        public Read(InputStream in) {
            br = new BufferedReader(new InputStreamReader(in), 16384);
            eat("""");
        }

        public void eat(String s) {
            st = new StringTokenizer(s);
        }

        public String nextLine() {
            try {
                return br.readLine();
            } catch (IOException e) {
                return null;
            }
        }

        public boolean hasNext() {
            while (!st.hasMoreTokens()) {
                String s = nextLine();
                if (s == null)
                    return false;
                eat(s);
            }
            return true;
        }

        public String next() {
            hasNext();
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public Double nextDouble() {
            return Double.parseDouble(next());
        }

        public BigInteger nextBigInteger() {
            return new BigInteger(next());
        }

        public BigDecimal nextBigDecimal() {
            return new BigDecimal(next());
        }
    }
}"
