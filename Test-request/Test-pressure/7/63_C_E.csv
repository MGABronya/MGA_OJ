,index,languageName,submissionId,submitTime,userName,statusMessage,code
0,E,C,55311995,2022-12-16 22:21:27,一方通行1,答案错误,"#include<stdio.h>
int main(){
    long long n_1;
    scanf(""%lld"",&n_1);
    long long int a_1 =5;
    long long a_2 =(n_1 +2);
    long long b_1 =2;
    if(n_1 ==1){
        printf(""1\n"");
    } else{
        for(a_1 =5;a_1 <=a_2;a_1++){
            b_1 =b_1 *a_1;
        }
    }
    printf(""%lld\n"",b_1);
    return 0;
}"
1,E,C,55312014,2022-12-16 22:22:20,一方通行1,答案错误,"#include<stdio.h>
int main(){
    long long n_1;
    scanf(""%lld"",&n_1);
    long long int a_1 =5;
    long long a_2 =(n_1 +2);
    long long b_1 =2;
    if(n_1 ==1){
        printf(""1\n"");
    } else{
        for(a_1 =5;a_1 <=a_2;a_1++){
            b_1 =b_1 *a_1;
            b_1 =b_1%998244353;
        }
    }
    printf(""%lld\n"",b_1);
    return 0;
}"
2,E,C,55314317,2022-12-17 10:28:09,一方通行1,答案错误,"#include<stdio.h>
int main(){
    long long n_1;
    scanf(""%lld"",&n_1);
    long long int a_1 =5;
    long long b_1 =2;
    if(n_1 ==1){
        printf(""1"");
    } else{
        for(a_1 =5;a_1 <=n_1 +2;a_1++){
            b_1 =b_1 *a_1;
            b_1 =b_1%998244353;
        }
    }
    printf(""%lld"",b_1);
    return 0;
}"
3,E,C,55314336,2022-12-17 10:30:35,一方通行1,答案正确,"#include<stdio.h>
int main(){
    long long int n;
    long long ans =2;
    long long M =998244353;
    scanf(""%lld"",&n);
    if(n==1) printf(""1"");
    else{
        for(long long i=5;i<=n+2;i++){   
            ans*=i; 
            ans%=M;
        }
        printf(""%lld"",ans);
    }
    return 0;
}"
4,E,C,55314339,2022-12-17 10:30:56,一方通行1,答案正确,"#include<stdio.h>
int main(){
    long long int n;
    long long ans =2;
   // long long M =998244353;
    scanf(""%lld"",&n);
    if(n==1) printf(""1"");
    else{
        for(long long i=5;i<=n+2;i++){   
            ans*=i; 
            ans%=998244353;
        }
        printf(""%lld"",ans);
    }
    return 0;
}"
5,E,C,55314351,2022-12-17 10:32:50,一方通行1,答案正确,"#include<stdio.h>
int main(){
    long long int n;
    long long ans =2;
    long long i;
   // long long M =998244353;
    scanf(""%lld"",&n);
    if(n==1) {
        printf(""1"");
    }
    else{
        for(i=5;i<=n+2;i++){   
            ans*=i; 
            ans%=998244353;
        }
        printf(""%lld"",ans);
    }
    return 0;
}"
6,E,C,55315548,2022-12-17 12:56:33,一方通行1,答案错误,"#include<stdio.h>
int main(){
    long long int n_1;
    scanf(""%lld"",&n_1);
    long long int a_1,b_1 =2;
    long long int c_1;
    if(n_1 ==1){
        printf(""1\n"");
    }else{
        for(c_1 =5;c_1 <=n_1 +2;c_1++){
            b_1 =b_1 *c_1;
            b_1 =b_1 % 998244353;
        }
    }
    printf(""%lld\n"",b_1);
    return 0;
}"
7,E,C,55315553,2022-12-17 12:57:55,一方通行1,答案错误,"#include<stdio.h>
int main(){
    long long int n_1;
    scanf(""%lld"",&n_1);
    long long int a_1,b_1 =2;
    long long int c_1;
    if(n_1 ==1){
        printf(""1\n"");
    }else{
        for(c_1 =5;c_1 <=n_1 +2;c_1++){
            b_1 *=c_1;
            b_1 %= 998244353;
        }
    }
    printf(""%lld\n"",b_1);
    return 0;
}"
8,E,C,55315570,2022-12-17 12:59:07,一方通行1,答案错误,"#include<stdio.h>
int main(){
    long long int n_1;
    scanf(""%lld"",&n_1);
    long long int b_1 =2;
    long long int c_1 =5;
    if(n_1 ==1){
        printf(""1\n"");
    }else{
        for(c_1 =5;c_1 <=n_1 +2;c_1++){
            b_1 *=c_1;
            b_1 %= 998244353;
        }
    }
    printf(""%lld\n"",b_1);
    return 0;
}"
9,E,C,55315581,2022-12-17 13:00:26,一方通行1,答案错误,"#include<stdio.h>
int main(){
    long long int n_1;
    scanf(""%lld"",&n_1);
    long long int b_1 =2;
    long long int c_1 =5;
    if(n_1 ==1){
        printf(""1\n"");
    }else{
        for(c_1 =5;c_1 <=n_1 +2;c_1++){
            b_1 *=c_1;
        }
    }
    b_1 %=998244353;
    printf(""%lld\n"",b_1);
    return 0;
}"
10,E,C,55315587,2022-12-17 13:01:06,一方通行1,答案错误,"#include<stdio.h>
int main(){
    long long int n_1;
    scanf(""%lld"",&n_1);
    long long int b_1 =2;
    long long int c_1 =5;
    if(n_1 ==1){
        printf(""1\n"");
    }else{
        for(c_1 =5;c_1 <=n_1 +2;c_1++){
            b_1 *=c_1;
            b_1 %=998244353;
        }
    }
    printf(""%lld\n"",b_1);
    return 0;
}"
11,E,C,55323041,2022-12-17 15:39:15,徐钰帆,编译错误,"{""SPECIAL_TM_FH_MEMO_JSON_TAG"":""SPECIAL_TM_FH_MEMO_JSON_TAG"",""stderr"":""main.c:59:18: error: use of undeclared identifier 'sum'\n    printf(\""%d\"", sum);\n                 ^\n1 error generated.""}

#include<stdio.h>
#include<math.h>
#define mod 998244353

//这是一个求全排列的函数
void full_permutation(int* permutation, int n, int index)
{
    if (index == n)
    {
        //计算最大值为n且最小值为1的子区间个数
        int count = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                int max = permutation[i];
                int min = permutation[i];
                for (int k = i; k <= j; k++)
                {
                    if (permutation[k] > max)
                        max = permutation[k];
                    if (permutation[k] < min)
                        min = permutation[k];
                }
                if (max == n && min == 1)
                    count++;
            }
        }
        //累加每一个全排列的计算结果
        static int sum = 0;
        sum = (sum + count) % mod;
        return;
    }
    for (int i = 1; i <= n; i++)
    {
        int flag = 0;
        for (int j = 0; j < index; j++)
        {
            if (permutation[j] == i)
            {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
        {
            permutation[index] = i;
            full_permutation(permutation, n, index + 1);
        }
    }
}

int main()
{
    int n;
    scanf(""%d"", &n);
    int permutation[n];
    full_permutation(permutation, n, 0);
    printf(""%d"", sum);
    return 0;
}"
12,E,C,55323071,2022-12-17 15:39:52,徐钰帆,编译错误,"{""SPECIAL_TM_FH_MEMO_JSON_TAG"":""SPECIAL_TM_FH_MEMO_JSON_TAG"",""stderr"":""main.c:59:18: error: use of undeclared identifier 'sum'\n    printf(\""%d\"", sum);\n                 ^\n1 error generated.""}

#include<stdio.h>
#include<math.h>
#define mod 998244353

//这是一个求全排列的函数
void full_permutation(int* permutation, int n, int index)
{
    if (index == n)
    {
        //计算最大值为n且最小值为1的子区间个数
        int count = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                int max = permutation[i];
                int min = permutation[i];
                for (int k = i; k <= j; k++)
                {
                    if (permutation[k] > max)
                        max = permutation[k];
                    if (permutation[k] < min)
                        min = permutation[k];
                }
                if (max == n && min == 1)
                    count++;
            }
        }
        //累加每一个全排列的计算结果
        static int sum = 0;
        sum = (sum + count) % mod;
        return;
    }
    for (int i = 1; i <= n; i++)
    {
        int flag = 0;
        for (int j = 0; j < index; j++)
        {
            if (permutation[j] == i)
            {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
        {
            permutation[index] = i;
            full_permutation(permutation, n, index + 1);
        }
    }
}

int main()
{
    int n;
    scanf(""%d"", &n);
    int permutation[n];
    full_permutation(permutation, n, 0);
    printf(""%d"", sum);
    return 0;
}"
13,E,C,55323092,2022-12-17 15:40:19,徐钰帆,编译错误,"{""SPECIAL_TM_FH_MEMO_JSON_TAG"":""SPECIAL_TM_FH_MEMO_JSON_TAG"",""stderr"":""main.c:59:18: error: expected expression\n    printf(\""%d\"", int sum);\n                 ^\n1 error generated.""}

#include<stdio.h>
#include<math.h>
#define mod 998244353

//这是一个求全排列的函数
void full_permutation(int* permutation, int n, int index)
{
    if (index == n)
    {
        //计算最大值为n且最小值为1的子区间个数
        int count = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                int max = permutation[i];
                int min = permutation[i];
                for (int k = i; k <= j; k++)
                {
                    if (permutation[k] > max)
                        max = permutation[k];
                    if (permutation[k] < min)
                        min = permutation[k];
                }
                if (max == n && min == 1)
                    count++;
            }
        }
        //累加每一个全排列的计算结果
        static int sum = 0;
        sum = (sum + count) % mod;
        return;
    }
    for (int i = 1; i <= n; i++)
    {
        int flag = 0;
        for (int j = 0; j < index; j++)
        {
            if (permutation[j] == i)
            {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
        {
            permutation[index] = i;
            full_permutation(permutation, n, index + 1);
        }
    }
}

int main()
{
    int n;
    scanf(""%d"", &n);
    int permutation[n];
    full_permutation(permutation, n, 0);
    printf(""%d"", int sum);
    return 0;
}"
14,E,C,55323102,2022-12-17 15:40:26,徐钰帆,编译错误,"{""SPECIAL_TM_FH_MEMO_JSON_TAG"":""SPECIAL_TM_FH_MEMO_JSON_TAG"",""stderr"":""main.c:59:18: error: non-ASCII characters are not allowed outside of literals and identifiers\n    printf(\""%d\"", ”sum“);\n                 ^\nmain.c:59:24: error: non-ASCII characters are not allowed outside of literals and identifiers\n    printf(\""%d\"", ”sum“);\n                     ^\nmain.c:59:21: error: use of undeclared identifier 'sum'\n    printf(\""%d\"", ”sum“);\n                  ^\n3 errors generated.""}

#include<stdio.h>
#include<math.h>
#define mod 998244353

//这是一个求全排列的函数
void full_permutation(int* permutation, int n, int index)
{
    if (index == n)
    {
        //计算最大值为n且最小值为1的子区间个数
        int count = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                int max = permutation[i];
                int min = permutation[i];
                for (int k = i; k <= j; k++)
                {
                    if (permutation[k] > max)
                        max = permutation[k];
                    if (permutation[k] < min)
                        min = permutation[k];
                }
                if (max == n && min == 1)
                    count++;
            }
        }
        //累加每一个全排列的计算结果
        static int sum = 0;
        sum = (sum + count) % mod;
        return;
    }
    for (int i = 1; i <= n; i++)
    {
        int flag = 0;
        for (int j = 0; j < index; j++)
        {
            if (permutation[j] == i)
            {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
        {
            permutation[index] = i;
            full_permutation(permutation, n, index + 1);
        }
    }
}

int main()
{
    int n;
    scanf(""%d"", &n);
    int permutation[n];
    full_permutation(permutation, n, 0);
    printf(""%d"", ”sum“);
    return 0;
}"
15,E,C,55323107,2022-12-17 15:40:35,徐钰帆,运行超时,"#include<stdio.h>
#include<math.h>
#define mod 998244353

//这是一个求全排列的函数
void full_permutation(int* permutation, int n, int index)
{
    if (index == n)
    {
        //计算最大值为n且最小值为1的子区间个数
        int count = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                int max = permutation[i];
                int min = permutation[i];
                for (int k = i; k <= j; k++)
                {
                    if (permutation[k] > max)
                        max = permutation[k];
                    if (permutation[k] < min)
                        min = permutation[k];
                }
                if (max == n && min == 1)
                    count++;
            }
        }
        //累加每一个全排列的计算结果
        static int sum = 0;
        sum = (sum + count) % mod;
        return;
    }
    for (int i = 1; i <= n; i++)
    {
        int flag = 0;
        for (int j = 0; j < index; j++)
        {
            if (permutation[j] == i)
            {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
        {
            permutation[index] = i;
            full_permutation(permutation, n, index + 1);
        }
    }
}

int main()
{
    int n;
    scanf(""%d"", &n);
    int permutation[n];
    full_permutation(permutation, n, 0);
    printf(""%d"", ""sum"");
    return 0;
}"
16,E,C,55332302,2022-12-18 10:54:05,王培祥大神来也,运行超时,"#include<stdio.h>
#define mod 998244353
int main()
{
    int n;
    long long int ans=0;
    scanf(""%d"",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=i+1;j<=n;j++)
        {
            ans+=i*(n-j+1)*2;
        }
    }
    printf(""%lld"",ans);
}"
17,E,C,55332327,2022-12-18 10:56:13,王培祥大神来也,运行超时,"#include<stdio.h>
#define mod 998244353
int main()
{
    int n;
    long long int ans=0;
    scanf(""%d"",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=i+1;j<=n;j++)
        {
            ans+=i*(n-j+1)*2;
        }
    }
    ans=ans%mod;
    printf(""%lld"",ans);
}"
18,E,C,55332432,2022-12-18 11:07:29,王培祥大神来也,答案正确,"#include<stdio.h>
#define mod 998244353
int main()
{
    long long int n,a[1000010];
    scanf(""%lld"",&n);
    a[1]=1,a[2]=2,a[3]=10;
    for(int i=4;i<=n;i++)
    {
        a[i]=a[i-1]*(i+2)%mod;
    }
    printf(""%lld"",a[n]);
}"
